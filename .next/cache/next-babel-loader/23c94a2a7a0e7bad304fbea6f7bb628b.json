{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils';\n\nclass LocalStorageManager {\n  constructor() {\n    _defineProperty(this, \"loadLocalContactAddresses\", () => {\n      this.contactAddresses = []; // A list of Ethereum addresses in the contact list of the current user.\n\n      if (typeof Storage != 'undefined') {\n        var rawContactAddresses = window.localStorage.contactAddresses;\n\n        if (rawContactAddresses != undefined) {\n          this.contactAddresses = JSON.parse(rawContactAddresses);\n        }\n      }\n    });\n\n    _defineProperty(this, \"loadContactMessages\", () => {\n      if (typeof Storage != 'undefined') {\n        for (var i = 0; i < this.contactAddresses.length; i++) {\n          var address = this.contactAddresses[i];\n          var localContact = window.localStorage[address];\n          this.contacts[address] = JSON.parse(localContact);\n        }\n      }\n    });\n\n    _defineProperty(this, \"addContact\", (address, relationship) => {\n      var data = this.contacts[address];\n\n      if (data == undefined) {\n        var member = {};\n        member.messages = [];\n        member.relationship = relationship;\n        window.localStorage.setItem(address, JSON.stringify(member));\n        this.contacts[address] = member;\n        this.contactAddresses.push(address);\n        window.localStorage.setItem('contactAddresses', JSON.stringify(this.contactAddresses));\n      }\n    });\n\n    _defineProperty(this, \"updateContact\", (address, publicKey, name, avatarUrl, relationship) => {\n      var data = this.contacts[address];\n\n      if (data != undefined) {\n        if (data.relationship < relationship) {\n          data.relationship = relationship;\n        }\n\n        if (publicKey) {\n          data.publicKey = publicKey;\n        }\n\n        if (name) {\n          data.name = name;\n        }\n\n        if (avatarUrl) {\n          data.avatarUrl = avatarUrl;\n        }\n\n        window.localStorage.setItem(address, JSON.stringify(data));\n      }\n    });\n\n    _defineProperty(this, \"addInvitationEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.addContact(events[i].returnValues[\"from\"], Constant.Relationship.NoRelation);\n      }\n    });\n\n    _defineProperty(this, \"addRequestEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.addContact(events[i].returnValues[\"to\"], Constant.Relationship.Requested);\n      }\n    });\n\n    _defineProperty(this, \"addMyAcceptContactEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.updateContact(events[i].returnValues[\"to\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addAcceptContactEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.updateContact(events[i].returnValues[\"from\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addMessageFromFriendEvent\", event => {\n      var data = event.returnValues;\n      var fromAddress = data.from;\n      var message = {};\n      message.isMine = false;\n      message.message = data.message;\n      message.encryption = utils.hexStringToAsciiString(data.encryption);\n      message.txHash = event.transactionHash;\n      this.contacts[fromAddress].messages.push(message);\n      window.localStorage.setItem(fromAddress, JSON.stringify(this.contacts[fromAddress]));\n    });\n\n    _defineProperty(this, \"addMyMessageEvent\", event => {\n      var data = event.returnValues;\n      var localMessages = this.contacts[data.to];\n      var noMatchingItem = true;\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (event.transactionHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = Constant.SENT_STATUS.SUCCESS;\n          window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\n          noMatchingItem = false;\n        }\n      }\n\n      if (noMatchingItem) {\n        var message = {};\n        message.isMine = true;\n        message.message = data.message;\n        message.encryption = utils.hexStringToAsciiString(data.encryption);\n        message.txHash = event.transactionHash;\n        localMessages.messages.push(message);\n        window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\n      }\n    });\n\n    _defineProperty(this, \"addMyLocalMessage\", (message, to, encryption, txHash) => {\n      var message = {\n        message,\n        encryption,\n        txHash\n      };\n      message.status = Constant.SENT_STATUS.PENDING;\n      message.isMine = true;\n      this.contacts[to].messages.push(message);\n      window.localStorage.setItem(to, JSON.stringify(this.contacts[to]));\n    });\n\n    _defineProperty(this, \"updateLocalMessage\", (toAddress, txHash, status) => {\n      var localMessages = this.contacts[toAddress];\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (txHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = status;\n          window.localStorage.setItem(toAddress, JSON.stringify(this.contacts[toAddress]));\n        }\n      }\n    });\n\n    _defineProperty(this, \"clearMessages\", contacts => {\n      window.localStorage.setItem('currentDataBlock', \"0\");\n      window.localStorage.removeItem('contactAddresses');\n\n      for (var i = 0; i < contacts.length; i++) {\n        window.localStorage.removeItem(contacts[i]);\n      }\n    });\n  }\n\n  initialize() {\n    this.contacts = {}; // Map Ethereum addresses with all messages and information belong to an address\n\n    this.loadLocalContactAddresses();\n    this.loadContactMessages();\n    appDispatcher.dispatch({\n      action: Constant.EVENT.CONTACT_LIST_UPDATED\n    });\n  }\n\n  storePrivateKeyAndAddress(privateKey, address) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem(\"privateKey\", privateKey);\n      window.localStorage.setItem(\"address\", address);\n      window.localStorage.setItem(\"currentDataBlock\", \"0\");\n      window.localStorage.setItem(\"ethNetwork\", \"4\");\n    }\n  }\n\n  getPrivateKey() {\n    if (typeof Storage !== 'undefined') {\n      return window.localStorage.privateKey;\n    }\n  }\n\n  getAddress() {\n    if (typeof Storage !== 'undefined') {\n      return window.localStorage.address;\n    }\n  }\n\n  setBalance(balance) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('balance', balance);\n    }\n  }\n\n  getBalance() {\n    if (typeof Storage !== 'undefined' && window.localStorage.balance != undefined) {\n      return window.localStorage.balance;\n    } else {\n      return \"0\";\n    }\n  }\n\n  setName(name) {\n    if (typeof Storage !== 'undefined' && name != \"\") {\n      window.localStorage.setItem('name', name);\n    }\n  }\n\n  getName() {\n    if (typeof Storage !== 'undefined' && window.localStorage.name != undefined) {\n      return window.localStorage.name;\n    } else {\n      return \"\";\n    }\n  }\n\n  setAvatarUrl(avatarUrl) {\n    if (typeof Storage !== 'undefined' && avatarUrl) {\n      window.localStorage.setItem('avatarUrl', avatarUrl);\n    }\n  }\n\n  getAvatarUrl() {\n    if (typeof Storage !== 'undefined' && window.localStorage.avatarUrl != undefined) {\n      return window.localStorage.avatarUrl;\n    } else {\n      return \"\";\n    }\n  }\n\n  setJoinedStatus(isJoined) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('isJoined', isJoined);\n    }\n  }\n\n  getJoinedStatus() {\n    if (typeof Storage !== 'undefined' && window.localStorage.isJoined != undefined) {\n      return window.localStorage.isJoined;\n    } else {\n      return false;\n    }\n  } // Get current block number of contract events' data (message events, invitation events...)\n\n\n  getCurrentDataBlock() {\n    return parseInt(window.localStorage.currentDataBlock);\n  }\n\n  setCurrentDataBlock(blockNumber) {\n    window.localStorage.setItem('currentDataBlock', blockNumber);\n  }\n\n  setAskForTransactionApproval(boolValue) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('askForTransactionApproval', boolValue);\n    }\n  }\n\n  getAskForTransactionApproval() {\n    if (typeof Storage !== 'undefined' && window.localStorage.askForTransactionApproval) {\n      return window.localStorage.askForTransactionApproval == \"true\";\n    } else {\n      return false;\n    }\n  }\n\n  removeNetworkDependentData() {\n    if (typeof Storage !== 'undefined') {\n      var rawAddresses = window.localStorage.contactAddresses;\n\n      if (rawAddresses != undefined) {\n        var addresses = JSON.parse(rawAddresses);\n\n        for (var i = 0; i < addresses.length; i++) {\n          window.localStorage.removeItem(addresses[i]);\n        }\n\n        window.localStorage.removeItem('contactAddresses');\n      }\n\n      window.localStorage.removeItem('balance');\n      window.localStorage.removeItem('isJoined');\n      window.localStorage.removeItem('name');\n      window.localStorage.removeItem('avatarUrl');\n      window.localStorage.setItem('currentDataBlock', '0');\n    }\n  }\n\n}\n\nexport default LocalStorageManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/LocalStorageManager.js"],"names":["appDispatcher","Constant","utils","LocalStorageManager","contactAddresses","Storage","rawContactAddresses","window","localStorage","undefined","JSON","parse","i","length","address","localContact","contacts","relationship","data","member","messages","setItem","stringify","push","publicKey","name","avatarUrl","events","addContact","returnValues","Relationship","NoRelation","Requested","updateContact","Connected","event","fromAddress","from","message","isMine","encryption","hexStringToAsciiString","txHash","transactionHash","localMessages","to","noMatchingItem","status","SENT_STATUS","SUCCESS","PENDING","toAddress","removeItem","initialize","loadLocalContactAddresses","loadContactMessages","dispatch","action","EVENT","CONTACT_LIST_UPDATED","storePrivateKeyAndAddress","privateKey","getPrivateKey","getAddress","setBalance","balance","getBalance","setName","getName","setAvatarUrl","getAvatarUrl","setJoinedStatus","isJoined","getJoinedStatus","getCurrentDataBlock","parseInt","currentDataBlock","setCurrentDataBlock","blockNumber","setAskForTransactionApproval","boolValue","getAskForTransactionApproval","askForTransactionApproval","removeNetworkDependentData","rawAddresses","addresses"],"mappings":"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","sourcesContent":["import appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\n\r\nclass LocalStorageManager {\r\n    initialize() {\r\n        this.contacts = {}; // Map Ethereum addresses with all messages and information belong to an address\r\n        this.loadLocalContactAddresses();\r\n        this.loadContactMessages();\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.CONTACT_LIST_UPDATED\r\n        });\r\n    }\r\n\r\n    loadLocalContactAddresses = () => {\r\n        this.contactAddresses = []; // A list of Ethereum addresses in the contact list of the current user.\r\n        if (typeof(Storage) != 'undefined') {\r\n            var rawContactAddresses = window.localStorage.contactAddresses;\r\n            if (rawContactAddresses != undefined) {\r\n                this.contactAddresses = JSON.parse(rawContactAddresses);\r\n            }\r\n        }\r\n    }\r\n\r\n    loadContactMessages = () => {\r\n        if (typeof(Storage) != 'undefined') {\r\n            for (var i=0;i<this.contactAddresses.length;i++) {\r\n                var address = this.contactAddresses[i];\r\n                var localContact = window.localStorage[address];\r\n                this.contacts[address] = JSON.parse(localContact);\r\n            }\r\n        }\r\n    }\r\n\r\n    addContact = (address, relationship) => {\r\n        var data = this.contacts[address];\r\n        if (data == undefined) {\r\n            var member = {};\r\n            member.messages = [];\r\n            member.relationship = relationship;\r\n            window.localStorage.setItem(address, JSON.stringify(member));\r\n            this.contacts[address] = member;\r\n\r\n            this.contactAddresses.push(address);\r\n            window.localStorage.setItem('contactAddresses', JSON.stringify(this.contactAddresses));\r\n        }\r\n    }\r\n\r\n    updateContact = (address, publicKey, name, avatarUrl, relationship) => {\r\n        var data = this.contacts[address];\r\n        if (data != undefined) {\r\n            if (data.relationship < relationship) {\r\n                data.relationship = relationship;\r\n            }\r\n            if (publicKey) {\r\n                data.publicKey = publicKey;\r\n            }\r\n            if (name) {\r\n                data.name = name;\r\n            }\r\n            if (avatarUrl) {\r\n                data.avatarUrl = avatarUrl;\r\n            }\r\n            window.localStorage.setItem(address, JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    addInvitationEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.addContact(events[i].returnValues[\"from\"], Constant.Relationship.NoRelation);\r\n        }\r\n    }\r\n\r\n    addRequestEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.addContact(events[i].returnValues[\"to\"], Constant.Relationship.Requested);\r\n        }\r\n    }\r\n\r\n    addMyAcceptContactEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.updateContact(events[i].returnValues[\"to\"], \"\", \"\", \"\", Constant.Relationship.Connected);\r\n        }\r\n    }\r\n\r\n    addAcceptContactEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.updateContact(events[i].returnValues[\"from\"], \"\", \"\", \"\", Constant.Relationship.Connected);\r\n        }\r\n    }\r\n\r\n    addMessageFromFriendEvent = (event) => {\r\n        var data = event.returnValues;\r\n        var fromAddress = data.from;\r\n        var message = {};\r\n        message.isMine = false;\r\n        message.message = data.message;\r\n        message.encryption = utils.hexStringToAsciiString(data.encryption);\r\n        message.txHash = event.transactionHash;\r\n\r\n        this.contacts[fromAddress].messages.push(message);\r\n\r\n        window.localStorage.setItem(fromAddress, JSON.stringify(this.contacts[fromAddress]));\r\n    }\r\n\r\n    addMyMessageEvent = (event) => {\r\n        var data = event.returnValues;\r\n        var localMessages = this.contacts[data.to];\r\n        \r\n        var noMatchingItem = true;\r\n        for (var i=localMessages.messages.length-1; i>=0;i--) {\r\n            if (event.transactionHash == localMessages.messages[i].txHash) {\r\n                localMessages.messages[i].status = Constant.SENT_STATUS.SUCCESS;\r\n                window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\r\n                noMatchingItem = false;\r\n            }\r\n        }\r\n        if (noMatchingItem) {\r\n            var message = {};\r\n            message.isMine = true;\r\n            message.message = data.message;\r\n            message.encryption = utils.hexStringToAsciiString(data.encryption);\r\n            message.txHash = event.transactionHash;\r\n            localMessages.messages.push(message);\r\n            window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\r\n        }\r\n    }\r\n\r\n    addMyLocalMessage = (message, to, encryption, txHash) => {\r\n        var message = {message, encryption, txHash};\r\n        message.status = Constant.SENT_STATUS.PENDING;\r\n        message.isMine = true;\r\n        this.contacts[to].messages.push(message);\r\n        window.localStorage.setItem(to, JSON.stringify(this.contacts[to]));\r\n    }\r\n\r\n    updateLocalMessage = (toAddress, txHash, status) => {\r\n        var localMessages = this.contacts[toAddress];\r\n        for (var i=localMessages.messages.length-1; i>=0;i--) {\r\n            if (txHash == localMessages.messages[i].txHash) {\r\n                localMessages.messages[i].status = status;\r\n                window.localStorage.setItem(toAddress, JSON.stringify(this.contacts[toAddress]));\r\n            }\r\n        }\r\n    }\r\n\r\n    storePrivateKeyAndAddress(privateKey, address) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem(\"privateKey\", privateKey);\r\n            window.localStorage.setItem(\"address\", address);\r\n            window.localStorage.setItem(\"currentDataBlock\", \"0\");\r\n            window.localStorage.setItem(\"ethNetwork\", \"4\");\r\n        }\r\n    }\r\n\r\n    getPrivateKey() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            return window.localStorage.privateKey;\r\n        }\r\n    }\r\n\r\n    getAddress() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            return window.localStorage.address;\r\n        }\r\n    }\r\n\r\n    setBalance(balance) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('balance', balance);\r\n        }\r\n    }\r\n\r\n    getBalance() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.balance != undefined) {\r\n            return window.localStorage.balance;\r\n        } else {\r\n            return \"0\";\r\n        }\r\n    }\r\n\r\n    setName(name) {\r\n        if (typeof(Storage) !== 'undefined' && name != \"\") {\r\n            window.localStorage.setItem('name', name);\r\n        }\r\n    }\r\n\r\n    getName() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.name != undefined) {\r\n            return window.localStorage.name;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setAvatarUrl(avatarUrl) {\r\n        if (typeof(Storage) !== 'undefined' && avatarUrl) {\r\n            window.localStorage.setItem('avatarUrl', avatarUrl);\r\n        }\r\n    }\r\n\r\n    getAvatarUrl() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.avatarUrl != undefined) {\r\n            return window.localStorage.avatarUrl;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setJoinedStatus(isJoined) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('isJoined', isJoined);\r\n        }\r\n    }\r\n\r\n    getJoinedStatus() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.isJoined != undefined) {\r\n            return window.localStorage.isJoined;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Get current block number of contract events' data (message events, invitation events...)\r\n    getCurrentDataBlock() {\r\n        return parseInt(window.localStorage.currentDataBlock);\r\n    }\r\n\r\n    setCurrentDataBlock(blockNumber) {\r\n        window.localStorage.setItem('currentDataBlock', blockNumber);\r\n    }\r\n\r\n    setAskForTransactionApproval(boolValue) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('askForTransactionApproval', boolValue);\r\n        }\r\n    }\r\n    \r\n    getAskForTransactionApproval() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.askForTransactionApproval) {\r\n            return (window.localStorage.askForTransactionApproval == \"true\");\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeNetworkDependentData() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            var rawAddresses = window.localStorage.contactAddresses;\r\n            if (rawAddresses != undefined) {\r\n                var addresses = JSON.parse(rawAddresses);\r\n                for (var i=0;i<addresses.length;i++) {\r\n                    window.localStorage.removeItem(addresses[i]);\r\n                }\r\n                window.localStorage.removeItem('contactAddresses');\r\n            }\r\n            window.localStorage.removeItem('balance');\r\n            window.localStorage.removeItem('isJoined');\r\n            window.localStorage.removeItem('name');\r\n            window.localStorage.removeItem('avatarUrl');\r\n            window.localStorage.setItem('currentDataBlock', '0');\r\n        }\r\n    }\r\n\r\n    clearMessages = (contacts) => {\r\n        window.localStorage.setItem('currentDataBlock', \"0\");\r\n        window.localStorage.removeItem('contactAddresses');\r\n        for (var i=0;i<contacts.length;i++) {\r\n            window.localStorage.removeItem(contacts[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport default LocalStorageManager;"]},"metadata":{},"sourceType":"module"}