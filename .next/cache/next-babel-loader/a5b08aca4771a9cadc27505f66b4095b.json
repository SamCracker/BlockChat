{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { Segment, Input, Button, Message, Icon, Header, Label } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport utils from '../support/Utils';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"sendMessage\", message => {\n      this.contractManager.sendMessage(this.state.address, this.account.storageManager.contacts[this.state.address].publicKey, message);\n    });\n\n    this.account = props.account;\n    this.contractManager = props.contractManager;\n    this.state = {\n      address: \"\",\n      messages: [],\n      publicKey: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    if (this.lastObjectAnchor != undefined) {\n      this.lastObjectAnchor.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }\n\n  componentDidMount() {\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.SELECT_CONTACT) {\n        this.setState({\n          address: payload.data,\n          publicKey: this.account.storageManager.contacts[payload.data].publicKey,\n          messages: this.account.storageManager.contacts[payload.data].messages\n        });\n      } else if (this.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\n        if (payload.data == undefined || payload.data == this.state.address) {\n          this.setState({\n            messages: this.account.storageManager.contacts[this.state.address].messages\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      height\n    } = this.props;\n    const {\n      publicKey,\n      messages\n    } = this.state;\n    var messageItems = [];\n\n    if (publicKey) {\n      if (messages.length > 0) {\n        for (var i = 0; i < messages.length; i++) {\n          var decryptedMessage;\n\n          if (messages[i].encryption == 'aes256') {\n            decryptedMessage = utils.decrypt(messages[i].message.substr(2), this.account.computeSecret(Buffer.from(publicKey, 'hex')));\n          } else {\n            decryptedMessage = messages[i].message;\n          }\n\n          var lastObjectAnchor = __jsx(\"span\", null);\n\n          if (i == messages.length - 1) {\n            lastObjectAnchor = __jsx(\"span\", {\n              ref: lastObjectAnchor => {\n                this.lastObjectAnchor = lastObjectAnchor;\n              }\n            });\n          }\n\n          var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\n\n          if (messages[i].isMine) {\n            if (messages[i].status == Constant.SENT_STATUS.PENDING) {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                }\n              }, __jsx(Icon, {\n                name: \"circle notched\",\n                loading: true\n              }), decryptedMessage, lastObjectAnchor)));\n            } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                }\n              }, __jsx(Icon, {\n                name: \"warning sign\"\n              }), decryptedMessage, lastObjectAnchor)));\n            } else {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i\n              }, __jsx(\"a\", {\n                href: explorerUrl,\n                target: \"_blank\"\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                }\n              }, decryptedMessage, lastObjectAnchor))));\n            }\n          } else {\n            messageItems.push(__jsx(\"p\", {\n              key: 'msg_' + i\n            }, __jsx(\"a\", {\n              href: explorerUrl,\n              target: \"_blank\"\n            }, __jsx(Label, {\n              pointing: \"left\",\n              as: \"span\",\n              key: 'msg_' + i,\n              size: \"large\",\n              style: {\n                fontWeight: '100',\n                lineHeight: '1.5'\n              }\n            }, decryptedMessage, lastObjectAnchor))));\n          }\n        }\n      } else {\n        messageItems.push(__jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\",\n          key: \"no_messages\"\n        }, \"No messages\"));\n      }\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        width: '100%'\n      }\n    }, __jsx(Segment, {\n      style: {\n        height: height - 90 + \"px\",\n        width: '100%',\n        overflow: 'auto'\n      }\n    }, messageItems), __jsx(Segment, null, __jsx(TextInput, {\n      disabled: this.state.address ? false : true,\n      onSend: this.sendMessage\n    })));\n  }\n\n}\n\nclass TextInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: props.disabled,\n      content: \"\"\n    };\n    this.onSend = props.onSend;\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      disabled: props.disabled\n    });\n  }\n\n  sendMessageClicked() {\n    if (this.state.content) {\n      this.onSend(this.state.content);\n      this.setState({\n        content: \"\"\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Input, {\n      fluid: true,\n      disabled: this.state.disabled,\n      value: this.state.content,\n      onChange: e => this.setState({\n        content: e.target.value\n      }),\n      action: {\n        color: 'orange',\n        labelPosition: 'right',\n        icon: 'send',\n        content: 'Send',\n        onClick: e => this.sendMessageClicked()\n      }\n    });\n  }\n\n}\n\nexport default Chat;","map":null,"metadata":{},"sourceType":"module"}