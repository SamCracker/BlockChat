{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { Segment, Input, Button, Message, Icon, Header, Label } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport utils from '../support/Utils';\n\nvar Chat = /*#__PURE__*/function (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (message) {\n      _this.contractManager.sendMessage(_this.state.address, _this.account.storageManager.contacts[_this.state.address].publicKey, message);\n    });\n\n    _this.account = props.account;\n    _this.contractManager = props.contractManager;\n    _this.state = {\n      address: \"\",\n      messages: [],\n      publicKey: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      if (this.lastObjectAnchor != undefined) {\n        this.lastObjectAnchor.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.ACTION.SELECT_CONTACT) {\n          _this2.setState({\n            address: payload.data,\n            publicKey: _this2.account.storageManager.contacts[payload.data].publicKey,\n            messages: _this2.account.storageManager.contacts[payload.data].messages\n          });\n        } else if (_this2.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\n          if (payload.data == undefined || payload.data == _this2.state.address) {\n            _this2.setState({\n              messages: _this2.account.storageManager.contacts[_this2.state.address].messages\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var height = this.props.height;\n      var _this$state = this.state,\n          publicKey = _this$state.publicKey,\n          messages = _this$state.messages;\n      var messageItems = [];\n\n      if (publicKey) {\n        if (messages.length > 0) {\n          for (var i = 0; i < messages.length; i++) {\n            var decryptedMessage;\n\n            if (messages[i].encryption == 'aes256') {\n              decryptedMessage = utils.decrypt(messages[i].message.substr(2), this.account.computeSecret(Buffer.from(publicKey, 'hex')));\n            } else {\n              decryptedMessage = messages[i].message;\n            }\n\n            var lastObjectAnchor = __jsx(\"span\", null);\n\n            if (i == messages.length - 1) {\n              lastObjectAnchor = __jsx(\"span\", {\n                ref: function ref(lastObjectAnchor) {\n                  _this3.lastObjectAnchor = lastObjectAnchor;\n                }\n              });\n            }\n\n            var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\n\n            if (messages[i].isMine) {\n              if (messages[i].status == Constant.SENT_STATUS.PENDING) {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  }\n                }, __jsx(Icon, {\n                  name: \"circle notched\",\n                  loading: true\n                }), decryptedMessage, lastObjectAnchor)));\n              } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  key: 'msg_' + i,\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  }\n                }, __jsx(Icon, {\n                  name: \"warning sign\"\n                }), decryptedMessage, lastObjectAnchor)));\n              } else {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i\n                }, __jsx(\"a\", {\n                  href: explorerUrl,\n                  target: \"_blank\"\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  key: 'msg_' + i,\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  }\n                }, decryptedMessage, lastObjectAnchor))));\n              }\n            } else {\n              messageItems.push(__jsx(\"p\", {\n                key: 'msg_' + i\n              }, __jsx(\"a\", {\n                href: explorerUrl,\n                target: \"_blank\"\n              }, __jsx(Label, {\n                pointing: \"left\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                }\n              }, decryptedMessage, lastObjectAnchor))));\n            }\n          }\n        } else {\n          messageItems.push(__jsx(Header, {\n            as: \"h2\",\n            textAlign: \"center\",\n            key: \"no_messages\"\n          }, \"No messages\"));\n        }\n      }\n\n      return __jsx(\"div\", {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Segment, {\n        style: {\n          height: height - 90 + \"px\",\n          width: '100%',\n          overflow: 'auto'\n        }\n      }, messageItems), __jsx(Segment, null, __jsx(TextInput, {\n        disabled: this.state.address ? false : true,\n        onSend: this.sendMessage\n      })));\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nvar TextInput = /*#__PURE__*/function (_Component2) {\n  _inherits(TextInput, _Component2);\n\n  function TextInput(props) {\n    var _this4;\n\n    _classCallCheck(this, TextInput);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(TextInput).call(this, props));\n    _this4.state = {\n      disabled: props.disabled,\n      content: \"\"\n    };\n    _this4.onSend = props.onSend;\n    return _this4;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.setState({\n        disabled: props.disabled\n      });\n    }\n  }, {\n    key: \"sendMessageClicked\",\n    value: function sendMessageClicked() {\n      if (this.state.content) {\n        this.onSend(this.state.content);\n        this.setState({\n          content: \"\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return __jsx(Input, {\n        fluid: true,\n        disabled: this.state.disabled,\n        value: this.state.content,\n        onChange: function onChange(e) {\n          return _this5.setState({\n            content: e.target.value\n          });\n        },\n        action: {\n          color: 'orange',\n          labelPosition: 'right',\n          icon: 'send',\n          content: 'Send',\n          onClick: function onClick(e) {\n            return _this5.sendMessageClicked();\n          }\n        }\n      });\n    }\n  }]);\n\n  return TextInput;\n}(Component);\n\nexport default Chat;","map":null,"metadata":{},"sourceType":"module"}