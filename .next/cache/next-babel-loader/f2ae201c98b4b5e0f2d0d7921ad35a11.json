{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport AccountManager from './AccountManager';\nimport LocalStorageManager from './LocalStorageManager';\nimport ContractManager from './ContractManager';\nimport EventHandler from './EventHandler';\nimport appDispatcher from './AppDispatcher';\nimport Constant from '../support/Constant';\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\n\nvar AppManager = /*#__PURE__*/function () {\n  function AppManager() {\n    var _this = this;\n\n    _classCallCheck(this, AppManager);\n\n    _defineProperty(this, \"getProfileFromContract\", function _callee() {\n      var profile;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(_this.contractManager.getProfile());\n\n            case 2:\n              profile = _context.sent;\n\n              _this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"startEventHandler\", function (accountAddress) {\n      _this.eventHandler = new EventHandler(accountAddress, _this.contractManager, _this.storageManager);\n\n      _this.eventHandler.start();\n    });\n  }\n\n  _createClass(AppManager, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      this.storageManager = new LocalStorageManager();\n      this.storageManager.initialize();\n      this.account = new AccountManager(this.storageManager);\n      this.contractManager = new ContractManager(this.account, this.storageManager); // Need to wait until the smart contract instance in this.contractManager is ready for using\n      // because it will take sometime to create the web3 contract instance.\n\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.EVENT.CONTRACT_READY) {\n          var accountAddress = _this2.account.getAddress();\n\n          if (accountAddress) {\n            _this2.startEventHandler();\n\n            _this2.getProfileFromContract();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getTransactionDispatcher\",\n    value: function getTransactionDispatcher() {\n      if (this.contractManager) {\n        return this.contractManager.transactionManager.dispatcher;\n      }\n    }\n  }]);\n\n  return AppManager;\n}();\n\nexport default AppManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/AppManager.js"],"names":["AccountManager","LocalStorageManager","ContractManager","EventHandler","appDispatcher","Constant","AppManager","contractManager","getProfile","profile","account","setProfile","name","avatarUrl","isJoined","accountAddress","eventHandler","storageManager","start","initialize","register","payload","action","EVENT","CONTRACT_READY","getAddress","startEventHandler","getProfileFromContract","transactionManager","dispatcher"],"mappings":";;;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;;;;;;;;;IASMC,U;;;;;;oDAqBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACD,KAAI,CAACC,eAAL,CAAqBC,UAArB,EADC;;AAAA;AACjBC,cAAAA,OADiB;;AAErB,cAAA,KAAI,CAACC,OAAL,CAAaC,UAAb,CAAwBF,OAAO,CAACG,IAAhC,EAAsCH,OAAO,CAACI,SAA9C,EAAyDJ,OAAO,CAACK,QAAjE;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;+CAML,UAACC,cAAD,EAAoB;AACpC,MAAA,KAAI,CAACC,YAAL,GAAoB,IAAIb,YAAJ,CAAiBY,cAAjB,EAAiC,KAAI,CAACR,eAAtC,EAAuD,KAAI,CAACU,cAA5D,CAApB;;AACA,MAAA,KAAI,CAACD,YAAL,CAAkBE,KAAlB;AACH,K;;;;;iCA7BY;AAAA;;AACT,WAAKD,cAAL,GAAsB,IAAIhB,mBAAJ,EAAtB;AACA,WAAKgB,cAAL,CAAoBE,UAApB;AAEA,WAAKT,OAAL,GAAe,IAAIV,cAAJ,CAAmB,KAAKiB,cAAxB,CAAf;AACA,WAAKV,eAAL,GAAuB,IAAIL,eAAJ,CAAoB,KAAKQ,OAAzB,EAAkC,KAAKO,cAAvC,CAAvB,CALS,CAOT;AACA;;AACAb,MAAAA,aAAa,CAACgB,QAAd,CAAuB,UAACC,OAAD,EAAa;AAChC,YAAIA,OAAO,CAACC,MAAR,IAAkBjB,QAAQ,CAACkB,KAAT,CAAeC,cAArC,EAAqD;AACjD,cAAIT,cAAc,GAAG,MAAI,CAACL,OAAL,CAAae,UAAb,EAArB;;AACA,cAAIV,cAAJ,EAAoB;AAChB,YAAA,MAAI,CAACW,iBAAL;;AACA,YAAA,MAAI,CAACC,sBAAL;AACH;AACJ;AACJ,OARD;AASH;;;+CAa0B;AACvB,UAAI,KAAKpB,eAAT,EAA0B;AACtB,eAAO,KAAKA,eAAL,CAAqBqB,kBAArB,CAAwCC,UAA/C;AACH;AACJ;;;;;;AAGL,eAAevB,UAAf","sourcesContent":["import AccountManager from './AccountManager'\r\nimport LocalStorageManager from './LocalStorageManager'\r\nimport ContractManager from './ContractManager'\r\nimport EventHandler from './EventHandler'\r\nimport appDispatcher from './AppDispatcher';\r\nimport Constant from '../support/Constant';\r\n\r\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\r\n\r\nclass AppManager {\r\n    initialize() {\r\n        this.storageManager = new LocalStorageManager();\r\n        this.storageManager.initialize();\r\n\r\n        this.account = new AccountManager(this.storageManager);\r\n        this.contractManager = new ContractManager(this.account, this.storageManager);\r\n\r\n        // Need to wait until the smart contract instance in this.contractManager is ready for using\r\n        // because it will take sometime to create the web3 contract instance.\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTRACT_READY) {\r\n                var accountAddress = this.account.getAddress();\r\n                if (accountAddress) {\r\n                    this.startEventHandler();\r\n                    this.getProfileFromContract();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getProfileFromContract = async () => {\r\n        var profile = await this.contractManager.getProfile();\r\n        this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\r\n    }\r\n\r\n    // Start to listen to EtherChat's events\r\n    startEventHandler = (accountAddress) => {\r\n        this.eventHandler = new EventHandler(accountAddress, this.contractManager, this.storageManager);\r\n        this.eventHandler.start();\r\n    }\r\n\r\n    getTransactionDispatcher() {\r\n        if (this.contractManager) {\r\n            return this.contractManager.transactionManager.dispatcher;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppManager;"]},"metadata":{},"sourceType":"module"}