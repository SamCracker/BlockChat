{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AccountManager from './AccountManager';\nimport LocalStorageManager from './LocalStorageManager';\nimport ContractManager from './ContractManager';\nimport EventHandler from './EventHandler';\nimport appDispatcher from './AppDispatcher';\nimport Constant from '../support/Constant';\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\n\nclass AppManager {\n  constructor() {\n    _defineProperty(this, \"getProfileFromContract\", async () => {\n      var profile = await this.contractManager.getProfile();\n      this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\n    });\n\n    _defineProperty(this, \"startEventHandler\", accountAddress => {\n      this.eventHandler = new EventHandler(accountAddress, this.contractManager, this.storageManager);\n      this.eventHandler.start();\n    });\n  }\n\n  initialize() {\n    this.storageManager = new LocalStorageManager();\n    this.storageManager.initialize();\n    this.account = new AccountManager(this.storageManager);\n    this.contractManager = new ContractManager(this.account, this.storageManager); // Need to wait until the smart contract instance in this.contractManager is ready for using\n    // because it will take sometime to create the web3 contract instance.\n\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.EVENT.CONTRACT_READY) {\n        var accountAddress = this.account.getAddress();\n\n        if (accountAddress) {\n          this.startEventHandler();\n          this.getProfileFromContract();\n        }\n      }\n    });\n  }\n\n  getTransactionDispatcher() {\n    if (this.contractManager) {\n      return this.contractManager.transactionManager.dispatcher;\n    }\n  }\n\n}\n\nexport default AppManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/AppManager.js"],"names":["AccountManager","LocalStorageManager","ContractManager","EventHandler","appDispatcher","Constant","AppManager","profile","contractManager","getProfile","account","setProfile","name","avatarUrl","isJoined","accountAddress","eventHandler","storageManager","start","initialize","register","payload","action","EVENT","CONTRACT_READY","getAddress","startEventHandler","getProfileFromContract","getTransactionDispatcher","transactionManager","dispatcher"],"mappings":";;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;;;;;;;;;AASA,MAAMC,UAAN,CAAiB;AAAA;AAAA,oDAqBY,YAAY;AACjC,UAAIC,OAAO,GAAG,MAAM,KAAKC,eAAL,CAAqBC,UAArB,EAApB;AACA,WAAKC,OAAL,CAAaC,UAAb,CAAwBJ,OAAO,CAACK,IAAhC,EAAsCL,OAAO,CAACM,SAA9C,EAAyDN,OAAO,CAACO,QAAjE;AACH,KAxBY;;AAAA,+CA2BQC,cAAD,IAAoB;AACpC,WAAKC,YAAL,GAAoB,IAAIb,YAAJ,CAAiBY,cAAjB,EAAiC,KAAKP,eAAtC,EAAuD,KAAKS,cAA5D,CAApB;AACA,WAAKD,YAAL,CAAkBE,KAAlB;AACH,KA9BY;AAAA;;AACbC,EAAAA,UAAU,GAAG;AACT,SAAKF,cAAL,GAAsB,IAAIhB,mBAAJ,EAAtB;AACA,SAAKgB,cAAL,CAAoBE,UAApB;AAEA,SAAKT,OAAL,GAAe,IAAIV,cAAJ,CAAmB,KAAKiB,cAAxB,CAAf;AACA,SAAKT,eAAL,GAAuB,IAAIN,eAAJ,CAAoB,KAAKQ,OAAzB,EAAkC,KAAKO,cAAvC,CAAvB,CALS,CAOT;AACA;;AACAb,IAAAA,aAAa,CAACgB,QAAd,CAAwBC,OAAD,IAAa;AAChC,UAAIA,OAAO,CAACC,MAAR,IAAkBjB,QAAQ,CAACkB,KAAT,CAAeC,cAArC,EAAqD;AACjD,YAAIT,cAAc,GAAG,KAAKL,OAAL,CAAae,UAAb,EAArB;;AACA,YAAIV,cAAJ,EAAoB;AAChB,eAAKW,iBAAL;AACA,eAAKC,sBAAL;AACH;AACJ;AACJ,KARD;AASH;;AAaDC,EAAAA,wBAAwB,GAAG;AACvB,QAAI,KAAKpB,eAAT,EAA0B;AACtB,aAAO,KAAKA,eAAL,CAAqBqB,kBAArB,CAAwCC,UAA/C;AACH;AACJ;;AApCY;;AAuCjB,eAAexB,UAAf","sourcesContent":["import AccountManager from './AccountManager'\r\nimport LocalStorageManager from './LocalStorageManager'\r\nimport ContractManager from './ContractManager'\r\nimport EventHandler from './EventHandler'\r\nimport appDispatcher from './AppDispatcher';\r\nimport Constant from '../support/Constant';\r\n\r\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\r\n\r\nclass AppManager {\r\n    initialize() {\r\n        this.storageManager = new LocalStorageManager();\r\n        this.storageManager.initialize();\r\n\r\n        this.account = new AccountManager(this.storageManager);\r\n        this.contractManager = new ContractManager(this.account, this.storageManager);\r\n\r\n        // Need to wait until the smart contract instance in this.contractManager is ready for using\r\n        // because it will take sometime to create the web3 contract instance.\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTRACT_READY) {\r\n                var accountAddress = this.account.getAddress();\r\n                if (accountAddress) {\r\n                    this.startEventHandler();\r\n                    this.getProfileFromContract();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getProfileFromContract = async () => {\r\n        var profile = await this.contractManager.getProfile();\r\n        this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\r\n    }\r\n\r\n    // Start to listen to EtherChat's events\r\n    startEventHandler = (accountAddress) => {\r\n        this.eventHandler = new EventHandler(accountAddress, this.contractManager, this.storageManager);\r\n        this.eventHandler.start();\r\n    }\r\n\r\n    getTransactionDispatcher() {\r\n        if (this.contractManager) {\r\n            return this.contractManager.transactionManager.dispatcher;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppManager;"]},"metadata":{},"sourceType":"module"}