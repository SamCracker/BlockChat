{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\modals\\\\EnterPrivateKeyModal.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { Modal, Header, Button, Icon, Input, Message } from 'semantic-ui-react';\nimport appDispatcher from '../../core/AppDispatcher';\nimport Constant from '../../support/Constant';\n\nclass EnterPrivateKeyModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClose\", e => {\n      e.preventDefault();\n      this.setState({\n        errorMessage: \"\"\n      });\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(this, \"handleConfirm\", e => {\n      e.preventDefault();\n      this.setState({\n        errorMessage: \"\"\n      });\n      var success = this.account.storePrivateKey(this.state.key);\n\n      if (success) {\n        this.setState({\n          modalOpen: false\n        });\n        window.location.reload();\n      } else {\n        this.setState({\n          errorMessage: \"Invalid private key\"\n        });\n      }\n    });\n\n    this.state = {\n      modalOpen: false,\n      key: \"\",\n      errorMessage: \"\"\n    };\n    this.account = props.account;\n  }\n\n  componentDidMount() {\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.OPEN_PRIVATE_KEY_MODAL) {\n        this.setState({\n          modalOpen: true\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(Header, {\n      icon: \"\",\n      content: \"Import private key\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), __jsx(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(Input, {\n      fluid: true,\n      value: this.state.key,\n      onChange: event => this.setState({\n        key: event.target.value\n      }),\n      placeholder: \"Ethereum private key\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(Message, {\n      error: true,\n      header: this.state.errorMessage,\n      hidden: this.state.errorMessage == \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), __jsx(\"p\", {\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"By clicking Confirm, you also agree to our \", __jsx(\"a\", {\n      href: \"/terms\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Terms of use\"))), __jsx(Modal.Actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(Button, {\n      color: \"blue\",\n      onClick: this.handleConfirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Icon, {\n      name: \"checkmark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), \" Confirm\"), __jsx(Button, {\n      color: \"grey\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Icon, {\n      name: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), \" Close\")));\n  }\n\n}\n\nexport default EnterPrivateKeyModal;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/modals/EnterPrivateKeyModal.js"],"names":["Component","Modal","Header","Button","Icon","Input","Message","appDispatcher","Constant","EnterPrivateKeyModal","constructor","props","e","preventDefault","setState","errorMessage","modalOpen","success","account","storePrivateKey","state","key","window","location","reload","componentDidMount","register","payload","action","ACTION","OPEN_PRIVATE_KEY_MODAL","render","handleClose","event","target","value","marginTop","handleConfirm"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Icon,\r\n    Input,\r\n    Message\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass EnterPrivateKeyModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { modalOpen: false, key: \"\", errorMessage:\"\"}\r\n        this.account = props.account;\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({errorMessage: \"\"});\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    handleConfirm = (e) => {\r\n        e.preventDefault();\r\n        this.setState({errorMessage: \"\"});\r\n\r\n        var success = this.account.storePrivateKey(this.state.key);\r\n        if (success) {\r\n            this.setState({ modalOpen: false });\r\n            window.location.reload();\r\n        } else {\r\n            this.setState({errorMessage: \"Invalid private key\"});\r\n        }\r\n        \r\n    };\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_PRIVATE_KEY_MODAL) {\r\n                this.setState({modalOpen: true});\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content=\"Import private key\"/>\r\n                    <Modal.Content>\r\n                        <Input fluid value={this.state.key} \r\n                            onChange={event => this.setState({key: event.target.value})}\r\n                            placeholder='Ethereum private key'/>\r\n                        <Message error header={this.state.errorMessage} hidden={this.state.errorMessage == \"\"}/>\r\n                        <p style={{marginTop: 20}}>By clicking Confirm, you also agree to our <a href='/terms' target='_blank'>Terms of use</a></p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='blue' onClick={this.handleConfirm}>\r\n                        <Icon name='checkmark' /> Confirm\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        <Icon name='close' /> Close\r\n                    </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterPrivateKeyModal;"]},"metadata":{},"sourceType":"module"}