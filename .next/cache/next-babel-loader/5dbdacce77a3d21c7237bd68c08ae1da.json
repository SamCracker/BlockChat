{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { Modal, Header, Button, Message, Loader, Dimmer, Form, Input } from 'semantic-ui-react';\nimport Constant from '../../support/Constant';\nimport web3 from '../../ethereum/web3';\n\nclass TransactionModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleReject\", e => {\n      e.preventDefault();\n      this.setState({\n        modalOpen: false\n      });\n      this.dispatcher.dispatch({\n        action: Constant.ACTION.REJECT_TRANSACTION,\n        transactionId: this.state.transactionId\n      });\n    });\n\n    _defineProperty(this, \"handleApprove\", e => {\n      e.preventDefault();\n      this.setState({\n        modalOpen: false\n      });\n      this.dispatcher.dispatch({\n        action: Constant.ACTION.APPROVE_TRANSACTION,\n        transactionId: this.state.transactionId,\n        method: this.method,\n        gasPrice: this.state.gasPrice,\n        gasAmount: this.state.estimatedGas\n      });\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.dispatcher.register(payload => {\n        if (payload.action == Constant.ACTION.OPEN_TRANSACTION_MODAL) {\n          this.method = payload.method;\n          this.setState({\n            modalOpen: true,\n            estimatedGas: 0,\n            gasPrice: 0,\n            transactionId: payload.transactionId\n          });\n          this.updateInfo();\n        }\n      });\n    });\n\n    _defineProperty(this, \"updateInfo\", async () => {\n      var estimatedGas;\n      var warningMessage = \"\";\n\n      try {\n        estimatedGas = await this.method.estimateGas({\n          gas: 3000000 // from: this.account.getAddress()\n\n        });\n      } catch (err) {\n        estimatedGas = 3000000;\n\n        if (err) {\n          warningMessage = err.message;\n        }\n      }\n\n      var gasPrice = await web3.eth.getGasPrice();\n      this.setState({\n        estimatedGas,\n        gasPrice,\n        warningMessage\n      });\n    });\n\n    this.dispatcher = props.dispatcher;\n    this.state = {\n      modalOpen: false,\n      estimatedGas: 0,\n      gasPrice: 0,\n      transactionId: 0,\n      warningMessage: \"\"\n    };\n  }\n\n  render() {\n    var content = __jsx(Dimmer.Dimmable, {\n      as: Modal.Content\n    }, __jsx(Dimmer, {\n      active: true,\n      inverted: true\n    }, __jsx(Loader, {\n      active: true,\n      inline: \"centered\",\n      inverted: true\n    })));\n\n    if (this.state.gasPrice) {\n      content = __jsx(Modal.Content, null, __jsx(Form, {\n        warning: this.state.warningMessage != \"\"\n      }, __jsx(Form.Field, null, \"The gas price is suggested by the last few blocks median gas price.\"), __jsx(Form.Field, {\n        inline: true\n      }, __jsx(\"label\", null, \"Gas limit: \"), __jsx(\"input\", {\n        value: this.state.estimatedGas,\n        disabled: true\n      })), __jsx(Form.Field, {\n        inline: true\n      }, __jsx(\"label\", null, \"Gas price\"), __jsx(Input, {\n        value: web3.utils.fromWei(this.state.gasPrice, 'gwei'),\n        label: {\n          basic: true,\n          content: 'Gwei'\n        },\n        labelPosition: \"right\",\n        onChange: e => {\n          if (e.target.value < 1000000) {\n            this.setState({\n              gasPrice: web3.utils.toWei(e.target.value, 'gwei')\n            });\n          }\n        },\n        style: {\n          textAlign: 'right'\n        }\n      })), __jsx(Form.Field, {\n        inline: true\n      }, __jsx(\"label\", null, \"Transaction fee: \"), __jsx(\"label\", null, web3.utils.fromWei((this.state.estimatedGas * this.state.gasPrice).toString(), 'ether') + ' ETH')), __jsx(Form.Field, null, __jsx(Message, {\n        warning: true\n      }, this.state.warningMessage))));\n    }\n\n    return __jsx(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      size: \"mini\",\n      closeOnDimmerClick: false\n    }, __jsx(Header, {\n      icon: \"\",\n      content: \"Confirm transaction\"\n    }), content, __jsx(Modal.Actions, null, __jsx(Button, {\n      color: \"orange\",\n      onClick: this.handleApprove\n    }, \"Approve\"), __jsx(Button, {\n      color: \"red\",\n      onClick: this.handleReject\n    }, \"Reject\")));\n  }\n\n}\n\nexport default TransactionModal;","map":null,"metadata":{},"sourceType":"module"}