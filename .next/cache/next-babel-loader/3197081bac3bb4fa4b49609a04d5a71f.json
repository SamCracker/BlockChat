{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport { Dispatcher } from 'flux';\nimport web3 from '../ethereum/web3';\nimport Tx from 'ethereumjs-tx';\n\nclass TransactionsManager {\n  constructor(account) {\n    _defineProperty(this, \"approveTransaction\", async (transactionId, gasPrice, gasAmount, method) => {\n      var emitter = this.emitterMapping[transactionId];\n      var data = method.encodeABI();\n      var transactionCount = await web3.eth.getTransactionCount(this.account.getAddress());\n      var rawTx = {\n        nonce: parseInt(transactionCount + this.numPendingTx),\n        gasPrice: parseInt(gasPrice),\n        gasLimit: parseInt(gasAmount),\n        to: Config.ENV.ContractAddress,\n        value: 0,\n        data: data\n      };\n      var tx = new Tx(rawTx);\n      tx.sign(this.account.getPrivateKeyBuffer());\n      var serializedTx = tx.serialize();\n      var txHash = '0x' + tx.hash().toString('hex');\n      this.updatePendingTx(this.numPendingTx + 1);\n      web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', receipt => {\n        this.updatePendingTx(this.numPendingTx - 1);\n        emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\n      }).on('error', (err, data) => {\n        this.updatePendingTx(this.numPendingTx - 1);\n        emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\n      });\n      emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\n    });\n\n    _defineProperty(this, \"rejectTransaction\", transactionId => {\n      var emitter = this.emitterMapping[transactionId];\n      emitter.emit(Constant.EVENT.ON_REJECTED);\n      delete this.emitterMapping[transactionId];\n    });\n\n    _defineProperty(this, \"automaticallyApproveTransaction\", async (transactionId, method) => {\n      var estimatedGas;\n\n      try {\n        estimatedGas = await method.estimateGas({\n          gas: 3000000\n        });\n      } catch (err) {\n        estimatedGas = 3000000;\n      }\n\n      var gasPrice = await web3.eth.getGasPrice();\n      this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\n    });\n\n    this.account = account;\n    this.numPendingTx = 0; // Number of pending Ethereum transactions\n\n    this.emitterMapping = {}; // A mapping of an increamental id with an event emitter in order\n    // to emit user approval and transaction results.\n\n    this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\n\n    this.dispatcher = new Dispatcher();\n    this.dispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\n        this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\n      } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\n        this.rejectTransaction(payload.transactionId);\n      }\n    });\n  }\n  /**\r\n   * @description Get called when user click on Approve button from a TransactionModal\r\n   */\n\n\n  updatePendingTx(numPendingTx) {\n    this.numPendingTx = numPendingTx;\n    this.dispatcher.dispatch({\n      action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\n      numPendingTx: this.numPendingTx\n    });\n  }\n  /**\r\n   * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n   * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n   */\n\n\n  executeMethod(method) {\n    this.emitterIncrementalId++;\n    var emitter = new EventEmitter();\n    this.emitterMapping[this.emitterIncrementalId] = emitter;\n\n    if (this.account.askForTransactionApproval) {\n      this.dispatcher.dispatch({\n        action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\n        method: method,\n        transactionId: this.emitterIncrementalId\n      });\n    } else {\n      this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\n    }\n\n    return emitter;\n  }\n  /**\r\n   * @description Approve a transaction without asking for user permission. Gas price will be\r\n   * calculated automatically\r\n   */\n\n\n}\n\nexport default TransactionsManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/TransactionManager.js"],"names":["EventEmitter","Constant","Config","Dispatcher","web3","Tx","TransactionsManager","constructor","account","transactionId","gasPrice","gasAmount","method","emitter","emitterMapping","data","encodeABI","transactionCount","eth","getTransactionCount","getAddress","rawTx","nonce","parseInt","numPendingTx","gasLimit","to","ENV","ContractAddress","value","tx","sign","getPrivateKeyBuffer","serializedTx","serialize","txHash","hash","toString","updatePendingTx","sendSignedTransaction","on","receipt","emit","EVENT","ON_RECEIPT","err","ON_ERROR","ON_APPROVED","ON_REJECTED","estimatedGas","estimateGas","gas","getGasPrice","approveTransaction","emitterIncrementalId","dispatcher","register","payload","action","ACTION","APPROVE_TRANSACTION","REJECT_TRANSACTION","rejectTransaction","dispatch","PENDING_TRANSACTION_UPDATED","executeMethod","askForTransactionApproval","OPEN_TRANSACTION_MODAL","automaticallyApproveTransaction"],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport {Dispatcher} from 'flux';\r\nimport web3 from '../ethereum/web3';\r\nimport Tx from 'ethereumjs-tx';\r\n\r\nclass TransactionsManager {\r\n    constructor(account) {\r\n        this.account = account;\r\n        this.numPendingTx = 0;      // Number of pending Ethereum transactions\r\n        this.emitterMapping = {};   // A mapping of an increamental id with an event emitter in order\r\n                                    // to emit user approval and transaction results.\r\n        this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\r\n        this.dispatcher = new Dispatcher();\r\n\r\n        this.dispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\r\n                this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\r\n            } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\r\n                this.rejectTransaction(payload.transactionId);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    approveTransaction = async (transactionId, gasPrice, gasAmount, method) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n\r\n        var data = method.encodeABI();\r\n        var transactionCount = await web3.eth.getTransactionCount(this.account.getAddress());\r\n\r\n        var rawTx = {\r\n            nonce: parseInt(transactionCount + this.numPendingTx),\r\n            gasPrice: parseInt(gasPrice),\r\n            gasLimit: parseInt(gasAmount),\r\n            to: Config.ENV.ContractAddress,\r\n            value: 0,\r\n            data: data\r\n        }\r\n        var tx = new Tx(rawTx);\r\n        tx.sign(this.account.getPrivateKeyBuffer());\r\n        var serializedTx = tx.serialize();\r\n        var txHash =  '0x' + tx.hash().toString('hex');\r\n\r\n        this.updatePendingTx(this.numPendingTx+1);\r\n        web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\r\n                .on('receipt', (receipt) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\r\n                }).on('error', (err, data) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\r\n                });\r\n        emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    rejectTransaction = (transactionId) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n        emitter.emit(Constant.EVENT.ON_REJECTED);\r\n\r\n        delete this.emitterMapping[transactionId];\r\n    }\r\n\r\n    updatePendingTx(numPendingTx) {\r\n        this.numPendingTx = numPendingTx;\r\n        this.dispatcher.dispatch({\r\n            action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\r\n            numPendingTx: this.numPendingTx\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n     * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n     */\r\n    executeMethod(method) {\r\n        this.emitterIncrementalId++;\r\n        var emitter = new EventEmitter();\r\n        this.emitterMapping[this.emitterIncrementalId] = emitter;\r\n\r\n        if (this.account.askForTransactionApproval) {\r\n            this.dispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\r\n                method: method,\r\n                transactionId: this.emitterIncrementalId\r\n            });\r\n        } else {\r\n            this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\r\n        }\r\n\r\n        return emitter;\r\n    }\r\n\r\n    /**\r\n     * @description Approve a transaction without asking for user permission. Gas price will be\r\n     * calculated automatically\r\n     */\r\n    automaticallyApproveTransaction = async (transactionId, method) => {\r\n        var estimatedGas;\r\n        try {\r\n            estimatedGas = await method.estimateGas({\r\n                gas: 3000000,\r\n            });\r\n        } catch(err) {\r\n            estimatedGas = 3000000;\r\n        }\r\n        var gasPrice = await web3.eth.getGasPrice();\r\n        this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\r\n    }\r\n}\r\n\r\nexport default TransactionsManager;"]},"metadata":{},"sourceType":"module"}