{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { sha256 } from 'ethereumjs-util';\nimport Wallet from 'ethereumjs-wallet';\nimport crypto from 'crypto';\nimport web3 from '../ethereum/web3';\nimport utils from '../support/Utils';\nimport EventHandler from './EventHandler';\nimport appDispatcher from '../core/AppDispatcher';\nimport TransactionManager from './TransactionManager';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\n\nvar AccountManager = /*#__PURE__*/function () {\n  function AccountManager(storageManager) {\n    var _this = this;\n\n    _classCallCheck(this, AccountManager);\n\n    _defineProperty(this, \"loadInfoFromstorageManager\", function () {\n      _this.balance = _this.storageManager.getBalance();\n      _this.name = _this.storageManager.getName();\n      _this.avatarUrl = _this.storageManager.getAvatarUrl();\n      _this.isJoined = _this.storageManager.getJoinedStatus();\n      _this.askForTransactionApproval = _this.storageManager.getAskForTransactionApproval();\n    });\n\n    _defineProperty(this, \"setProfile\", function (name, avatarUrl, isJoined) {\n      _this.name = name;\n      _this.avatarUrl = avatarUrl;\n      _this.isJoined = isJoined;\n    });\n\n    _defineProperty(this, \"updateBalance\", function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3.eth.getBalance(_this.walletAccount.getAddress().toString('hex')));\n\n            case 2:\n              _this.balance = _context.sent;\n\n              _this.storageManager.setBalance(_this.balance);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ACCOUNT_BALANCE_UPDATED\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"setAskForTransactionApproval\", function (askForApproval) {\n      _this.storageManager.setAskForTransactionApproval(askForApproval);\n\n      _this.askForTransactionApproval = askForApproval;\n    });\n\n    _defineProperty(this, \"loadPrivateKey\", function () {\n      var privateKeyHex = _this.storageManager.getPrivateKey();\n\n      if (privateKeyHex) {\n        var privateKeyBuffer = Buffer.from(privateKeyHex, 'hex');\n        _this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n\n        _this.updateBalance();\n      }\n    });\n\n    _defineProperty(this, \"storePrivateKey\", function (privateKey) {\n      var isValid = false;\n\n      try {\n        var privateKeyBuffer = Buffer.from(privateKey, 'hex');\n        _this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n\n        _this.storageManager.storePrivateKeyAndAddress(privateKey, _this.getAddress());\n\n        isValid = true;\n      } catch (err) {}\n\n      _this.updateBalance();\n\n      return isValid;\n    });\n\n    _defineProperty(this, \"getAddress\", function () {\n      if (_this.walletAccount) {\n        return '0x' + _this.walletAccount.getAddress().toString('hex');\n      } else {\n        return \"\";\n      }\n    });\n\n    _defineProperty(this, \"computeSecret\", function (publicKeyBuffer) {\n      var a = crypto.createECDH('secp256k1');\n      a.generateKeys();\n      a.setPrivateKey(_this.getPrivateKeyBuffer());\n      return a.computeSecret(publicKeyBuffer);\n    });\n\n    this.isJoined = false;\n    this.balance = 0;\n    this.name = \"\";\n    this.avatarUrl = \"\";\n    this.storageManager = storageManager;\n    this.loadPrivateKey();\n    this.loadInfoFromstorageManager();\n  }\n\n  _createClass(AccountManager, [{\n    key: \"getPublicKeyBuffer\",\n    value: function getPublicKeyBuffer() {\n      return this.walletAccount.getPublicKey();\n    }\n  }, {\n    key: \"getPrivateKeyBuffer\",\n    value: function getPrivateKeyBuffer() {\n      return this.walletAccount.getPrivateKey();\n    }\n  }]);\n\n  return AccountManager;\n}();\n\nexport default AccountManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/AccountManager.js"],"names":["sha256","Wallet","crypto","web3","utils","EventHandler","appDispatcher","TransactionManager","Constant","Config","AccountManager","storageManager","balance","getBalance","name","getName","avatarUrl","getAvatarUrl","isJoined","getJoinedStatus","askForTransactionApproval","getAskForTransactionApproval","eth","walletAccount","getAddress","toString","setBalance","dispatch","action","EVENT","ACCOUNT_BALANCE_UPDATED","askForApproval","setAskForTransactionApproval","privateKeyHex","getPrivateKey","privateKeyBuffer","Buffer","from","fromPrivateKey","updateBalance","privateKey","isValid","storePrivateKeyAndAddress","err","publicKeyBuffer","a","createECDH","generateKeys","setPrivateKey","getPrivateKeyBuffer","computeSecret","loadPrivateKey","loadInfoFromstorageManager","getPublicKey"],"mappings":"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","sourcesContent":["import { sha256 } from 'ethereumjs-util';\r\n\r\nimport Wallet from 'ethereumjs-wallet';\r\nimport crypto from 'crypto';\r\nimport web3 from '../ethereum/web3';\r\nimport utils from '../support/Utils';\r\nimport EventHandler from './EventHandler';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport TransactionManager from './TransactionManager';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\n\r\nclass AccountManager {\r\n    constructor(storageManager) {\r\n        this.isJoined = false;\r\n        this.balance = 0;\r\n        this.name = \"\";\r\n        this.avatarUrl = \"\";\r\n        this.storageManager = storageManager;\r\n        this.loadPrivateKey();\r\n        this.loadInfoFromstorageManager();\r\n    }\r\n\r\n    loadInfoFromstorageManager = () => {\r\n        this.balance = this.storageManager.getBalance();\r\n        this.name = this.storageManager.getName();\r\n        this.avatarUrl = this.storageManager.getAvatarUrl();\r\n        this.isJoined = this.storageManager.getJoinedStatus();\r\n        this.askForTransactionApproval = this.storageManager.getAskForTransactionApproval();\r\n    }\r\n\r\n    setProfile = (name, avatarUrl, isJoined) => {\r\n        this.name = name;\r\n        this.avatarUrl = avatarUrl;\r\n        this.isJoined = isJoined;\r\n    }\r\n\r\n    // Update balance of the current account\r\n    updateBalance = async () => {\r\n        this.balance = await web3.eth.getBalance(this.walletAccount.getAddress().toString('hex'));\r\n        this.storageManager.setBalance(this.balance);\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.ACCOUNT_BALANCE_UPDATED\r\n        })\r\n    }\r\n\r\n    setAskForTransactionApproval = (askForApproval) => {\r\n        this.storageManager.setAskForTransactionApproval(askForApproval);\r\n        this.askForTransactionApproval = askForApproval;\r\n    }\r\n\r\n    // Load private key from browser's local storage\r\n    loadPrivateKey = () => {\r\n        var privateKeyHex = this.storageManager.getPrivateKey();\r\n        if (privateKeyHex) {\r\n            var privateKeyBuffer = Buffer.from(privateKeyHex, 'hex');\r\n            this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\r\n            this.updateBalance();\r\n        }\r\n    }\r\n\r\n    storePrivateKey = (privateKey) => {\r\n        var isValid = false;\r\n        try {\r\n            var privateKeyBuffer = Buffer.from(privateKey, 'hex');\r\n            this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\r\n            this.storageManager.storePrivateKeyAndAddress(privateKey, this.getAddress());\r\n            isValid = true;\r\n        } catch (err) {\r\n        }\r\n        this.updateBalance();\r\n        return isValid;\r\n    }\r\n\r\n    getPublicKeyBuffer() {\r\n        return this.walletAccount.getPublicKey();\r\n    }\r\n\r\n    getPrivateKeyBuffer() {\r\n        return this.walletAccount.getPrivateKey();\r\n    }\r\n\r\n    getAddress = () => {\r\n        if (this.walletAccount) {\r\n            return '0x' + this.walletAccount.getAddress().toString('hex');\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // Compute a secret key for messages encryption/decryption\r\n    computeSecret = (publicKeyBuffer) => {\r\n        var a = crypto.createECDH('secp256k1');\r\n        a.generateKeys();\r\n        a.setPrivateKey(this.getPrivateKeyBuffer());\r\n        return a.computeSecret(publicKeyBuffer);\r\n    }\r\n}\r\n\r\nexport default AccountManager;"]},"metadata":{},"sourceType":"module"}