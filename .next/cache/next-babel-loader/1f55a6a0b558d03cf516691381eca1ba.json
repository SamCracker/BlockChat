{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport web3 from '../ethereum/web3';\nimport compiledContract from '../ethereum/build/EtherChat.json';\nimport TransactionsManager from './TransactionManager';\nimport appDispatcher from './AppDispatcher';\nimport Config from '../support/Config';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils';\nimport crypto from 'crypto';\n/**\r\n * Responsible for interacting with the Ethereum smart contract\r\n */\n\nvar ContractManager = function ContractManager(accountManager, storageManager) {\n  var _this = this;\n\n  _classCallCheck(this, ContractManager);\n\n  _defineProperty(this, \"getContract\", function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(new web3.eth.Contract(JSON.parse(compiledContract[\"interface\"]), Config.ENV.ContractAddress));\n\n          case 2:\n            _this.contract = _context.sent;\n            appDispatcher.dispatch({\n              action: Constant.EVENT.CONTRACT_READY\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"getProfile\", function _callee2(address) {\n    var result, profile;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(_this.contract.methods.members(_this.accountManager.getAddress()).call());\n\n          case 2:\n            result = _context2.sent;\n            profile = {};\n\n            if (result.isMember == 1) {\n              profile.isJoined = true;\n              profile.avatarUrl = utils.hexStringToAsciiString(result.avatarUrl);\n              profile.name = utils.hexStringToAsciiString(result.name);\n\n              _this.storageManager.setJoinedStatus(true);\n\n              _this.storageManager.setName(_this.name);\n\n              _this.storageManager.setAvatarUrl(_this.avatarUrl);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ACCOUNT_INFO_UPDATED,\n                profile: profile\n              });\n            }\n\n            return _context2.abrupt(\"return\", profile);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"getMemberInfo\", function _callee3(address, relationship) {\n    var memberInfo, publicKey, name, avatarUrl;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(_this.contract.methods.members(address).call());\n\n          case 2:\n            memberInfo = _context3.sent;\n\n            if (memberInfo.isMember) {\n              publicKey = '04' + memberInfo.publicKeyLeft.substr(2) + memberInfo.publicKeyRight.substr(2);\n              name = utils.hexStringToAsciiString(memberInfo.name);\n              avatarUrl = utils.hexStringToAsciiString(memberInfo.avatarUrl);\n\n              _this.storageManager.updateContact(address, publicKey, name, avatarUrl, relationship);\n            }\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"getPastEvents\", function _callee4(eventName, filters) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(_this.contract.getPastEvents(eventName, filters));\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"joinContract\", function _callee5(publicKeyBuffer, callback) {\n    var publicKeyLeft, publicKeyRight;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            publicKeyLeft = '0x' + publicKeyBuffer.toString('hex', 0, 32);\n            publicKeyRight = '0x' + publicKeyBuffer.toString('hex', 32, 64);\n\n            _this.transactionManager.executeMethod(_this.contract.methods.join(publicKeyLeft, publicKeyRight)).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n              if (callback) callback(Constant.EVENT.ON_APPROVED);\n            }).on(Constant.EVENT.ON_REJECTED, function (txHash) {\n              if (callback) callback(Constant.EVENT.ON_REJECTED);\n            }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n              if (callback) callback(Constant.EVENT.ON_RECEIPT);\n            }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\n                message: error.message,\n                title: \"Error\"\n              });\n              if (callback) callback(Constant.EVENT.ON_ERROR);\n            });\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"addContact\", function _callee6(address, callback) {\n    var method;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            console.log(address);\n            method = _this.contract.methods.addContact(address);\n\n            _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n              if (callback) callback(Constant.EVENT.ON_APPROVED);\n            }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n              if (callback) callback(Constant.EVENT.ON_RECEIPT);\n            }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\n                message: error.message,\n                title: \"Error\"\n              });\n              if (callback) callback(Constant.EVENT.ON_ERROR);\n            });\n\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"acceptContactRequest\", function _callee7(address, callback) {\n    var method;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            method = _this.contract.methods.acceptContactRequest(address);\n\n            _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n              if (callback) callback(Constant.EVENT.ON_APPROVED);\n            }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n              if (callback) callback(Constant.EVENT.ON_RECEIPT);\n            }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\n                message: error.message,\n                title: \"Error\"\n              });\n              if (callback) callback(Constant.EVENT.ON_ERROR);\n            });\n\n          case 2:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"updateProfile\", function _callee8(name, avatarUrl, callback) {\n    var nameHex, avatarUrlHex, method;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            nameHex = '0x' + Buffer.from(name, 'ascii').toString('hex');\n            avatarUrlHex = '0x' + Buffer.from(avatarUrl, 'ascii').toString('hex');\n            method = _this.contract.methods.updateProfile(nameHex, avatarUrlHex);\n\n            _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n              if (callback) callback(Constant.EVENT.ON_APPROVED);\n            }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n              if (callback) callback(Constant.EVENT.ON_RECEIPT);\n            }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\n                message: error.message,\n                title: \"Error\"\n              });\n              if (callback) callback(Constant.EVENT.ON_ERROR);\n            });\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"sendMessage\", function _callee9(toAddress, publicKey, message) {\n    var publicKeyBuffer, encryptedRaw, encryptedMessage, method;\n    return _regeneratorRuntime.async(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            publicKeyBuffer = Buffer.from(publicKey, 'hex');\n            encryptedRaw = utils.encrypt(message, _this.accountManager.computeSecret(publicKeyBuffer));\n            encryptedMessage = '0x' + encryptedRaw.toString('hex');\n            method = _this.contract.methods.sendMessage(toAddress, encryptedMessage, utils.getEncryptAlgorithmInHex());\n\n            _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n              _this.storageManager.addMyLocalMessage(encryptedMessage, toAddress, utils.getEncryptAlgorithm(), txHash);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.MESSAGES_UPDATED,\n                data: toAddress\n              });\n            }).on(Constant.EVENT.ON_REJECTED, function (data) {// do nothing\n            }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n              _this.storageManager.updateLocalMessage(toAddress, receipt.transactionHash, Constant.SENT_STATUS.SUCCESS);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.MESSAGES_UPDATED,\n                data: toAddress\n              });\n            }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n              _this.storageManager.updateLocalMessage(toAddress, txHash, Constant.SENT_STATUS.FAILED);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.MESSAGES_UPDATED,\n                data: toAddress\n              });\n            });\n\n          case 5:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    });\n  });\n\n  this.getContract();\n  this.accountManager = accountManager;\n  this.storageManager = storageManager;\n  this.transactionManager = new TransactionsManager(accountManager);\n} // Create a web3 contract object that represent the ethereum smart contract\n;\n\nexport default ContractManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/ContractManager.js"],"names":["web3","compiledContract","TransactionsManager","appDispatcher","Config","Constant","utils","crypto","ContractManager","accountManager","storageManager","eth","Contract","JSON","parse","ENV","ContractAddress","contract","dispatch","action","EVENT","CONTRACT_READY","address","methods","members","getAddress","call","result","profile","isMember","isJoined","avatarUrl","hexStringToAsciiString","name","setJoinedStatus","setName","setAvatarUrl","ACCOUNT_INFO_UPDATED","relationship","memberInfo","publicKey","publicKeyLeft","substr","publicKeyRight","updateContact","eventName","filters","getPastEvents","publicKeyBuffer","callback","toString","transactionManager","executeMethod","join","on","ON_APPROVED","txHash","ON_REJECTED","ON_RECEIPT","receipt","ON_ERROR","error","ENCOUNTERED_ERROR","message","title","console","log","method","addContact","acceptContactRequest","nameHex","Buffer","from","avatarUrlHex","updateProfile","toAddress","encryptedRaw","encrypt","computeSecret","encryptedMessage","sendMessage","getEncryptAlgorithmInHex","addMyLocalMessage","getEncryptAlgorithm","MESSAGES_UPDATED","data","updateLocalMessage","transactionHash","SENT_STATUS","SUCCESS","FAILED","getContract"],"mappings":"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","sourcesContent":["import web3 from '../ethereum/web3';\r\nimport compiledContract from '../ethereum/build/EtherChat.json';\r\nimport TransactionsManager from './TransactionManager';\r\nimport appDispatcher from './AppDispatcher';\r\nimport Config from '../support/Config';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\nimport crypto from 'crypto';\r\n\r\n/**\r\n * Responsible for interacting with the Ethereum smart contract\r\n */\r\n\r\nclass ContractManager {\r\n    constructor(accountManager, storageManager) {\r\n        this.getContract();\r\n        this.accountManager = accountManager;\r\n        this.storageManager = storageManager;\r\n        this.transactionManager = new TransactionsManager(accountManager);\r\n    }\r\n\r\n    // Create a web3 contract object that represent the ethereum smart contract\r\n    getContract = async () => {\r\n        this.contract = await new web3.eth.Contract(JSON.parse(compiledContract.interface), \r\n                Config.ENV.ContractAddress);\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.CONTRACT_READY\r\n        })\r\n    }\r\n\r\n    // Get current account profile from EtherChat contract's storage\r\n    getProfile = async (address) => {\r\n        var result = await this.contract.methods.members(this.accountManager.getAddress()).call();\r\n        var profile = {};\r\n        if (result.isMember == 1) {\r\n            profile.isJoined = true;\r\n            profile.avatarUrl = utils.hexStringToAsciiString(result.avatarUrl);\r\n            profile.name = utils.hexStringToAsciiString(result.name);\r\n\r\n            this.storageManager.setJoinedStatus(true);\r\n            this.storageManager.setName(this.name);\r\n            this.storageManager.setAvatarUrl(this.avatarUrl);\r\n            \r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ACCOUNT_INFO_UPDATED,\r\n                profile: profile\r\n            })\r\n        }\r\n        return profile;\r\n    }\r\n\r\n    getMemberInfo = async (address, relationship) => {\r\n        var memberInfo = await this.contract.methods.members(address).call();\r\n        if (memberInfo.isMember) {\r\n            var publicKey = '04' + memberInfo.publicKeyLeft.substr(2) + memberInfo.publicKeyRight.substr(2);\r\n            var name = utils.hexStringToAsciiString(memberInfo.name);\r\n            var avatarUrl = utils.hexStringToAsciiString(memberInfo.avatarUrl);\r\n            this.storageManager.updateContact(address, publicKey, name, avatarUrl, relationship);\r\n        }\r\n    }\r\n\r\n    getPastEvents = async (eventName, filters) => {\r\n        return await this.contract.getPastEvents(eventName, filters);\r\n    }\r\n\r\n    joinContract = async(publicKeyBuffer, callback) => {\r\n        var publicKeyLeft = '0x' + publicKeyBuffer.toString('hex', 0, 32);\r\n        var publicKeyRight = '0x' + publicKeyBuffer.toString('hex', 32, 64);\r\n\r\n        this.transactionManager.executeMethod(this.contract.methods.join(publicKeyLeft, publicKeyRight))\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_REJECTED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_REJECTED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n    // joinContract = async (publicKeyBuffer, callback) => {\r\n\r\n    addContact = async (address, callback) => {\r\n        console.log(address);\r\n\r\n        var method = this.contract.methods.addContact(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    acceptContactRequest = async (address, callback) => {\r\n        var method = this.contract.methods.acceptContactRequest(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    updateProfile = async (name, avatarUrl, callback) => {\r\n        var nameHex = '0x' + Buffer.from(name, 'ascii').toString('hex');\r\n        var avatarUrlHex = '0x' + Buffer.from(avatarUrl, 'ascii').toString('hex');\r\n        var method = this.contract.methods.updateProfile(nameHex, avatarUrlHex);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    // A message will be encrypted locally before sending to the smart contract\r\n    sendMessage = async (toAddress, publicKey, message) => {\r\n        var publicKeyBuffer = Buffer.from(publicKey, 'hex');\r\n        var encryptedRaw = utils.encrypt(message, this.accountManager.computeSecret(publicKeyBuffer));\r\n        var encryptedMessage = '0x' + encryptedRaw.toString('hex');\r\n        var method = this.contract.methods.sendMessage(toAddress, encryptedMessage, utils.getEncryptAlgorithmInHex());\r\n\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                this.storageManager.addMyLocalMessage(encryptedMessage, toAddress, utils.getEncryptAlgorithm(), txHash);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_REJECTED, (data) => {\r\n                // do nothing\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt, ) => {\r\n                this.storageManager.updateLocalMessage(toAddress, receipt.transactionHash, Constant.SENT_STATUS.SUCCESS);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                this.storageManager.updateLocalMessage(toAddress, txHash, Constant.SENT_STATUS.FAILED);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport default ContractManager;"]},"metadata":{},"sourceType":"module"}