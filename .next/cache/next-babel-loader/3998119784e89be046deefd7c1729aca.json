{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { sha256 } from 'ethereumjs-util';\nimport Wallet from 'ethereumjs-wallet';\nimport crypto from 'crypto';\nimport web3 from '../ethereum/web3';\nimport utils from '../support/Utils';\nimport EventHandler from './EventHandler';\nimport appDispatcher from '../core/AppDispatcher';\nimport TransactionManager from './TransactionManager';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\n\nvar AccountManager = /*#__PURE__*/function () {\n  function AccountManager(storageManager) {\n    var _this = this;\n\n    _classCallCheck(this, AccountManager);\n\n    _defineProperty(this, \"loadInfoFromstorageManager\", function () {\n      _this.balance = _this.storageManager.getBalance();\n      _this.name = _this.storageManager.getName();\n      _this.avatarUrl = _this.storageManager.getAvatarUrl();\n      _this.isJoined = _this.storageManager.getJoinedStatus();\n      _this.askForTransactionApproval = _this.storageManager.getAskForTransactionApproval();\n    });\n\n    _defineProperty(this, \"setProfile\", function (name, avatarUrl, isJoined) {\n      _this.name = name;\n      _this.avatarUrl = avatarUrl;\n      _this.isJoined = isJoined;\n    });\n\n    _defineProperty(this, \"updateBalance\", function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3.eth.getBalance(_this.walletAccount.getAddress().toString('hex')));\n\n            case 2:\n              _this.balance = _context.sent;\n\n              _this.storageManager.setBalance(_this.balance);\n\n              appDispatcher.dispatch({\n                action: Constant.EVENT.ACCOUNT_BALANCE_UPDATED\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"setAskForTransactionApproval\", function (askForApproval) {\n      _this.storageManager.setAskForTransactionApproval(askForApproval);\n\n      _this.askForTransactionApproval = askForApproval;\n    });\n\n    _defineProperty(this, \"loadPrivateKey\", function () {\n      var privateKeyHex = _this.storageManager.getPrivateKey();\n\n      if (privateKeyHex) {\n        var privateKeyBuffer = Buffer.from(privateKeyHex, 'hex');\n        _this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n\n        _this.updateBalance();\n      }\n    });\n\n    _defineProperty(this, \"storePrivateKey\", function (privateKey) {\n      var isValid = false;\n\n      try {\n        var privateKeyBuffer = Buffer.from(privateKey, 'hex');\n        _this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n\n        _this.storageManager.storePrivateKeyAndAddress(privateKey, _this.getAddress());\n\n        isValid = true;\n      } catch (err) {}\n\n      _this.updateBalance();\n\n      return isValid;\n    });\n\n    _defineProperty(this, \"getAddress\", function () {\n      if (_this.walletAccount) {\n        return '0x' + _this.walletAccount.getAddress().toString('hex');\n      } else {\n        return \"\";\n      }\n    });\n\n    _defineProperty(this, \"computeSecret\", function (publicKeyBuffer) {\n      var a = crypto.createECDH('secp256k1');\n      a.generateKeys();\n      a.setPrivateKey(_this.getPrivateKeyBuffer());\n      return a.computeSecret(publicKeyBuffer);\n    });\n\n    this.isJoined = false;\n    this.balance = 0;\n    this.name = \"\";\n    this.avatarUrl = \"\";\n    this.storageManager = storageManager;\n    this.loadPrivateKey();\n    this.loadInfoFromstorageManager();\n  }\n\n  _createClass(AccountManager, [{\n    key: \"getPublicKeyBuffer\",\n    value: function getPublicKeyBuffer() {\n      return this.walletAccount.getPublicKey();\n    }\n  }, {\n    key: \"getPrivateKeyBuffer\",\n    value: function getPrivateKeyBuffer() {\n      return this.walletAccount.getPrivateKey();\n    }\n  }]);\n\n  return AccountManager;\n}();\n\nexport default AccountManager;","map":null,"metadata":{},"sourceType":"module"}