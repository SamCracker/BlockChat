{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport EventEmitter from 'events';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport { Dispatcher } from 'flux';\nimport web3 from '../ethereum/web3';\nimport Tx from 'ethereumjs-tx';\n\nvar TransactionsManager = /*#__PURE__*/function () {\n  function TransactionsManager(account) {\n    var _this = this;\n\n    _classCallCheck(this, TransactionsManager);\n\n    _defineProperty(this, \"approveTransaction\", function _callee(transactionId, gasPrice, gasAmount, method) {\n      var emitter, data, transactionCount, rawTx, tx, serializedTx, txHash;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              emitter = _this.emitterMapping[transactionId];\n              data = method.encodeABI();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(web3.eth.getTransactionCount(_this.account.getAddress()));\n\n            case 4:\n              transactionCount = _context.sent;\n              rawTx = {\n                nonce: _parseInt(transactionCount + _this.numPendingTx),\n                gasPrice: _parseInt(gasPrice),\n                gasLimit: _parseInt(gasAmount),\n                to: Config.ENV.ContractAddress,\n                value: 0,\n                data: data\n              };\n              tx = new Tx(rawTx);\n              tx.sign(_this.account.getPrivateKeyBuffer());\n              serializedTx = tx.serialize();\n              txHash = '0x' + tx.hash().toString('hex');\n\n              _this.updatePendingTx(_this.numPendingTx + 1);\n\n              web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', function (receipt) {\n                _this.updatePendingTx(_this.numPendingTx - 1);\n\n                emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\n              }).on('error', function (err, data) {\n                _this.updatePendingTx(_this.numPendingTx - 1);\n\n                emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\n              });\n              emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"rejectTransaction\", function (transactionId) {\n      var emitter = _this.emitterMapping[transactionId];\n      emitter.emit(Constant.EVENT.ON_REJECTED);\n      delete _this.emitterMapping[transactionId];\n    });\n\n    _defineProperty(this, \"automaticallyApproveTransaction\", function _callee2(transactionId, method) {\n      var estimatedGas, gasPrice;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(method.estimateGas({\n                gas: 3000000\n              }));\n\n            case 3:\n              estimatedGas = _context2.sent;\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              estimatedGas = 3000000;\n\n            case 9:\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(web3.eth.getGasPrice());\n\n            case 11:\n              gasPrice = _context2.sent;\n\n              _this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 6]]);\n    });\n\n    this.account = account;\n    this.numPendingTx = 0; // Number of pending Ethereum transactions\n\n    this.emitterMapping = {}; // A mapping of an increamental id with an event emitter in order\n    // to emit user approval and transaction results.\n\n    this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\n\n    this.dispatcher = new Dispatcher();\n    this.dispatcher.register(function (payload) {\n      if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\n        _this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\n      } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\n        _this.rejectTransaction(payload.transactionId);\n      }\n    });\n  }\n  /**\r\n   * @description Get called when user click on Approve button from a TransactionModal\r\n   */\n\n\n  _createClass(TransactionsManager, [{\n    key: \"updatePendingTx\",\n    value: function updatePendingTx(numPendingTx) {\n      this.numPendingTx = numPendingTx;\n      this.dispatcher.dispatch({\n        action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\n        numPendingTx: this.numPendingTx\n      });\n    }\n    /**\r\n     * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n     * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n     */\n\n  }, {\n    key: \"executeMethod\",\n    value: function executeMethod(method) {\n      this.emitterIncrementalId++;\n      var emitter = new EventEmitter();\n      this.emitterMapping[this.emitterIncrementalId] = emitter;\n\n      if (this.account.askForTransactionApproval) {\n        this.dispatcher.dispatch({\n          action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\n          method: method,\n          transactionId: this.emitterIncrementalId\n        });\n      } else {\n        this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\n      }\n\n      return emitter;\n    }\n    /**\r\n     * @description Approve a transaction without asking for user permission. Gas price will be\r\n     * calculated automatically\r\n     */\n\n  }]);\n\n  return TransactionsManager;\n}();\n\nexport default TransactionsManager;","map":null,"metadata":{},"sourceType":"module"}