{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { sha256 } from 'ethereumjs-util';\nimport Wallet from 'ethereumjs-wallet';\nimport crypto from 'crypto';\nimport web3 from '../ethereum/web3';\nimport utils from '../support/Utils';\nimport EventHandler from './EventHandler';\nimport appDispatcher from '../core/AppDispatcher';\nimport TransactionManager from './TransactionManager';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\n\nclass AccountManager {\n  constructor(storageManager) {\n    _defineProperty(this, \"loadInfoFromstorageManager\", () => {\n      this.balance = this.storageManager.getBalance();\n      this.name = this.storageManager.getName();\n      this.avatarUrl = this.storageManager.getAvatarUrl();\n      this.isJoined = this.storageManager.getJoinedStatus();\n      this.askForTransactionApproval = this.storageManager.getAskForTransactionApproval();\n    });\n\n    _defineProperty(this, \"setProfile\", (name, avatarUrl, isJoined) => {\n      this.name = name;\n      this.avatarUrl = avatarUrl;\n      this.isJoined = isJoined;\n    });\n\n    _defineProperty(this, \"updateBalance\", async () => {\n      this.balance = await web3.eth.getBalance(this.walletAccount.getAddress().toString('hex'));\n      this.storageManager.setBalance(this.balance);\n      appDispatcher.dispatch({\n        action: Constant.EVENT.ACCOUNT_BALANCE_UPDATED\n      });\n    });\n\n    _defineProperty(this, \"setAskForTransactionApproval\", askForApproval => {\n      this.storageManager.setAskForTransactionApproval(askForApproval);\n      this.askForTransactionApproval = askForApproval;\n    });\n\n    _defineProperty(this, \"loadPrivateKey\", () => {\n      var privateKeyHex = this.storageManager.getPrivateKey();\n\n      if (privateKeyHex) {\n        var privateKeyBuffer = Buffer.from(privateKeyHex, 'hex');\n        this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n        this.updateBalance();\n      }\n    });\n\n    _defineProperty(this, \"storePrivateKey\", privateKey => {\n      var isValid = false;\n\n      try {\n        var privateKeyBuffer = Buffer.from(privateKey, 'hex');\n        this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\n        this.storageManager.storePrivateKeyAndAddress(privateKey, this.getAddress());\n        isValid = true;\n      } catch (err) {}\n\n      this.updateBalance();\n      return isValid;\n    });\n\n    _defineProperty(this, \"getAddress\", () => {\n      if (this.walletAccount) {\n        return '0x' + this.walletAccount.getAddress().toString('hex');\n      } else {\n        return \"\";\n      }\n    });\n\n    _defineProperty(this, \"computeSecret\", publicKeyBuffer => {\n      var a = crypto.createECDH('secp256k1');\n      a.generateKeys();\n      a.setPrivateKey(this.getPrivateKeyBuffer());\n      return a.computeSecret(publicKeyBuffer);\n    });\n\n    this.isJoined = false;\n    this.balance = 0;\n    this.name = \"\";\n    this.avatarUrl = \"\";\n    this.storageManager = storageManager;\n    this.loadPrivateKey();\n    this.loadInfoFromstorageManager();\n  }\n\n  getPublicKeyBuffer() {\n    return this.walletAccount.getPublicKey();\n  }\n\n  getPrivateKeyBuffer() {\n    return this.walletAccount.getPrivateKey();\n  }\n\n}\n\nexport default AccountManager;","map":null,"metadata":{},"sourceType":"module"}