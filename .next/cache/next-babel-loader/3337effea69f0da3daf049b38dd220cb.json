{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\Chat.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { Segment, Input, Button, Message, Icon, Header, Label } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport utils from '../support/Utils';\n\nvar Chat = /*#__PURE__*/function (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (message) {\n      _this.contractManager.sendMessage(_this.state.address, _this.account.storageManager.contacts[_this.state.address].publicKey, message);\n    });\n\n    _this.account = props.account;\n    _this.contractManager = props.contractManager;\n    _this.state = {\n      address: \"\",\n      messages: [],\n      publicKey: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      if (this.lastObjectAnchor != undefined) {\n        this.lastObjectAnchor.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.ACTION.SELECT_CONTACT) {\n          _this2.setState({\n            address: payload.data,\n            publicKey: _this2.account.storageManager.contacts[payload.data].publicKey,\n            messages: _this2.account.storageManager.contacts[payload.data].messages\n          });\n        } else if (_this2.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\n          if (payload.data == undefined || payload.data == _this2.state.address) {\n            _this2.setState({\n              messages: _this2.account.storageManager.contacts[_this2.state.address].messages\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var height = this.props.height;\n      var _this$state = this.state,\n          publicKey = _this$state.publicKey,\n          messages = _this$state.messages;\n      var messageItems = [];\n\n      if (publicKey) {\n        if (messages.length > 0) {\n          for (var i = 0; i < messages.length; i++) {\n            var decryptedMessage;\n\n            if (messages[i].encryption == 'aes256') {\n              decryptedMessage = utils.decrypt(messages[i].message.substr(2), this.account.computeSecret(Buffer.from(publicKey, 'hex')));\n            } else {\n              decryptedMessage = messages[i].message;\n            }\n\n            var lastObjectAnchor = __jsx(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76\n              },\n              __self: this\n            });\n\n            if (i == messages.length - 1) {\n              lastObjectAnchor = __jsx(\"span\", {\n                ref: function ref(lastObjectAnchor) {\n                  _this3.lastObjectAnchor = lastObjectAnchor;\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 78\n                },\n                __self: this\n              });\n            }\n\n            var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\n\n            if (messages[i].isMine) {\n              if (messages[i].status == Constant.SENT_STATUS.PENDING) {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 85\n                  },\n                  __self: this\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 85\n                  },\n                  __self: this\n                }, __jsx(Icon, {\n                  name: \"circle notched\",\n                  loading: true,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 87\n                  },\n                  __self: this\n                }), decryptedMessage, lastObjectAnchor)));\n              } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 94\n                  },\n                  __self: this\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  key: 'msg_' + i,\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 94\n                  },\n                  __self: this\n                }, __jsx(Icon, {\n                  name: \"warning sign\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 97\n                  },\n                  __self: this\n                }), decryptedMessage, lastObjectAnchor)));\n              } else {\n                messageItems.push(__jsx(\"p\", {\n                  align: \"right\",\n                  key: 'msg_' + i,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 104\n                  },\n                  __self: this\n                }, __jsx(\"a\", {\n                  href: explorerUrl,\n                  target: \"_blank\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 105\n                  },\n                  __self: this\n                }, __jsx(Label, {\n                  pointing: \"right\",\n                  as: \"span\",\n                  key: 'msg_' + i,\n                  size: \"large\",\n                  color: \"blue\",\n                  style: {\n                    fontWeight: '100',\n                    lineHeight: '1.5'\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 105\n                  },\n                  __self: this\n                }, decryptedMessage, lastObjectAnchor))));\n              }\n            } else {\n              messageItems.push(__jsx(\"p\", {\n                key: 'msg_' + i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 115\n                },\n                __self: this\n              }, __jsx(\"a\", {\n                href: explorerUrl,\n                target: \"_blank\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 116\n                },\n                __self: this\n              }, __jsx(Label, {\n                pointing: \"left\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 117\n                },\n                __self: this\n              }, decryptedMessage, lastObjectAnchor))));\n            }\n          }\n        } else {\n          messageItems.push(__jsx(Header, {\n            as: \"h2\",\n            textAlign: \"center\",\n            key: \"no_messages\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, \"No messages\"));\n        }\n      }\n\n      return __jsx(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(Segment, {\n        style: {\n          height: height - 90 + \"px\",\n          width: '100%',\n          overflow: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, messageItems), __jsx(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, __jsx(TextInput, {\n        disabled: this.state.address ? false : true,\n        onSend: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nvar TextInput = /*#__PURE__*/function (_Component2) {\n  _inherits(TextInput, _Component2);\n\n  function TextInput(props) {\n    var _this4;\n\n    _classCallCheck(this, TextInput);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(TextInput).call(this, props));\n    _this4.state = {\n      disabled: props.disabled,\n      content: \"\"\n    };\n    _this4.onSend = props.onSend;\n    return _this4;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.setState({\n        disabled: props.disabled\n      });\n    }\n  }, {\n    key: \"sendMessageClicked\",\n    value: function sendMessageClicked() {\n      if (this.state.content) {\n        this.onSend(this.state.content);\n        this.setState({\n          content: \"\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return __jsx(Input, {\n        fluid: true,\n        disabled: this.state.disabled,\n        value: this.state.content,\n        onChange: function onChange(e) {\n          return _this5.setState({\n            content: e.target.value\n          });\n        },\n        action: {\n          color: 'orange',\n          labelPosition: 'right',\n          icon: 'send',\n          content: 'Send',\n          onClick: function onClick(e) {\n            return _this5.sendMessageClicked();\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TextInput;\n}(Component);\n\nexport default Chat;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/Chat.js"],"names":["Component","Segment","Input","Button","Message","Icon","Header","Label","appDispatcher","Constant","Config","utils","Chat","props","message","contractManager","sendMessage","state","address","account","storageManager","contacts","publicKey","messages","scrollToBottom","lastObjectAnchor","undefined","scrollIntoView","behavior","register","payload","action","ACTION","SELECT_CONTACT","setState","data","EVENT","MESSAGES_UPDATED","height","messageItems","length","i","decryptedMessage","encryption","decrypt","substr","computeSecret","Buffer","from","explorerUrl","ENV","ExplorerUrl","txHash","isMine","status","SENT_STATUS","PENDING","push","fontWeight","lineHeight","FAILED","width","overflow","TextInput","disabled","content","onSend","e","target","value","color","labelPosition","icon","onClick","sendMessageClicked"],"mappings":";;;;;;;;;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SACIC,OADJ,EAEIC,KAFJ,EAGIC,MAHJ,EAIIC,OAJJ,EAKIC,IALJ,EAMIC,MANJ,EAOIC,KAPJ,QAQO,mBARP;AASA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;IAEMC,I;;;AACF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,kEAoCL,UAACC,OAAD,EAAa;AACvB,YAAKC,eAAL,CAAqBC,WAArB,CAAiC,MAAKC,KAAL,CAAWC,OAA5C,EACI,MAAKC,OAAL,CAAaC,cAAb,CAA4BC,QAA5B,CAAqC,MAAKJ,KAAL,CAAWC,OAAhD,EAAyDI,SAD7D,EAEIR,OAFJ;AAGH,KAxCkB;;AAEf,UAAKK,OAAL,GAAeN,KAAK,CAACM,OAArB;AACA,UAAKJ,eAAL,GAAuBF,KAAK,CAACE,eAA7B;AACA,UAAKE,KAAL,GAAa;AAACC,MAAAA,OAAO,EAAE,EAAV;AAAcK,MAAAA,QAAQ,EAAE,EAAxB;AAA4BD,MAAAA,SAAS,EAAE;AAAvC,KAAb;AAJe;AAKlB;;;;wCAEmB;AAChB,WAAKE,cAAL;AACD;;;yCAEoB;AACnB,WAAKA,cAAL;AACD;;;qCAEgB;AACb,UAAI,KAAKC,gBAAL,IAAyBC,SAA7B,EAAwC;AAClC,aAAKD,gBAAL,CAAsBE,cAAtB,CAAqC;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAArC;AACL;AACJ;;;wCAEiB;AAAA;;AAChBpB,MAAAA,aAAa,CAACqB,QAAd,CAAuB,UAACC,OAAD,EAAa;AAChC,YAAIA,OAAO,CAACC,MAAR,IAAkBtB,QAAQ,CAACuB,MAAT,CAAgBC,cAAtC,EAAsD;AAClD,UAAA,MAAI,CAACC,QAAL,CAAc;AAAChB,YAAAA,OAAO,EAAEY,OAAO,CAACK,IAAlB;AACVb,YAAAA,SAAS,EAAE,MAAI,CAACH,OAAL,CAAaC,cAAb,CAA4BC,QAA5B,CAAqCS,OAAO,CAACK,IAA7C,EAAmDb,SADpD;AAEVC,YAAAA,QAAQ,EAAE,MAAI,CAACJ,OAAL,CAAaC,cAAb,CAA4BC,QAA5B,CAAqCS,OAAO,CAACK,IAA7C,EAAmDZ;AAFnD,WAAd;AAIH,SALD,MAKO,IAAI,MAAI,CAACN,KAAL,CAAWC,OAAX,IAAsB,EAAtB,IAA4BY,OAAO,CAACC,MAAR,IAAkBtB,QAAQ,CAAC2B,KAAT,CAAeC,gBAAjE,EAAmF;AACtF,cAAIP,OAAO,CAACK,IAAR,IAAgBT,SAAhB,IAA6BI,OAAO,CAACK,IAAR,IAAgB,MAAI,CAAClB,KAAL,CAAWC,OAA5D,EAAqE;AACjE,YAAA,MAAI,CAACgB,QAAL,CAAc;AAACX,cAAAA,QAAQ,EAAE,MAAI,CAACJ,OAAL,CAAaC,cAAb,CAA4BC,QAA5B,CAAqC,MAAI,CAACJ,KAAL,CAAWC,OAAhD,EAAyDK;AAApE,aAAd;AACH;AACJ;AACJ,OAXD;AAYH;;;6BAQQ;AAAA;;AAAA,UACEe,MADF,GACY,KAAKzB,KADjB,CACEyB,MADF;AAAA,wBAG2B,KAAKrB,KAHhC;AAAA,UAGGK,SAHH,eAGGA,SAHH;AAAA,UAGcC,QAHd,eAGcA,QAHd;AAKL,UAAIgB,YAAY,GAAG,EAAnB;;AACA,UAAIjB,SAAJ,EAAe;AACX,YAAIC,QAAQ,CAACiB,MAAT,GAAkB,CAAtB,EAAyB;AACrB,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAClB,QAAQ,CAACiB,MAAxB,EAA+BC,CAAC,EAAhC,EAAoC;AAChC,gBAAIC,gBAAJ;;AACA,gBAAInB,QAAQ,CAACkB,CAAD,CAAR,CAAYE,UAAZ,IAA0B,QAA9B,EAAwC;AACpCD,cAAAA,gBAAgB,GAAG/B,KAAK,CAACiC,OAAN,CAAcrB,QAAQ,CAACkB,CAAD,CAAR,CAAY3B,OAAZ,CAAoB+B,MAApB,CAA2B,CAA3B,CAAd,EACf,KAAK1B,OAAL,CAAa2B,aAAb,CAA2BC,MAAM,CAACC,IAAP,CAAY1B,SAAZ,EAAuB,KAAvB,CAA3B,CADe,CAAnB;AAEH,aAHD,MAGO;AACHoB,cAAAA,gBAAgB,GAAGnB,QAAQ,CAACkB,CAAD,CAAR,CAAY3B,OAA/B;AACH;;AAED,gBAAIW,gBAAgB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxB;;AACA,gBAAIgB,CAAC,IAAIlB,QAAQ,CAACiB,MAAT,GAAkB,CAA3B,EAA8B;AAC1Bf,cAAAA,gBAAgB,GAAI;AAAM,gBAAA,GAAG,EAAE,aAAAA,gBAAgB,EAAI;AAAE,kBAAA,MAAI,CAACA,gBAAL,GAAwBA,gBAAxB;AAA2C,iBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB;AACH;;AAED,gBAAIwB,WAAW,GAAGvC,MAAM,CAACwC,GAAP,CAAWC,WAAX,GAAyB,KAAzB,GAAiC5B,QAAQ,CAACkB,CAAD,CAAR,CAAYW,MAA/D;;AACA,gBAAI7B,QAAQ,CAACkB,CAAD,CAAR,CAAYY,MAAhB,EAAwB;AACpB,kBAAI9B,QAAQ,CAACkB,CAAD,CAAR,CAAYa,MAAZ,IAAsB7C,QAAQ,CAAC8C,WAAT,CAAqBC,OAA/C,EAAwD;AACpDjB,gBAAAA,YAAY,CAACkB,IAAb,CACI;AAAG,kBAAA,KAAK,EAAC,OAAT;AAAiB,kBAAA,GAAG,EAAE,SAAShB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkC,MAAC,KAAD;AAAO,kBAAA,QAAQ,EAAC,OAAhB;AAC9B,kBAAA,EAAE,EAAC,MAD2B;AACpB,kBAAA,IAAI,EAAC,OADe;AACP,kBAAA,KAAK,EAAC,MADC;AACM,kBAAA,KAAK,EAAE;AAACiB,oBAAAA,UAAU,EAAE,KAAb;AAAoBC,oBAAAA,UAAU,EAAE;AAAhC,mBADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE9B,MAAC,IAAD;AAAM,kBAAA,IAAI,EAAC,gBAAX;AAA4B,kBAAA,OAAO,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF8B,EAG7BjB,gBAH6B,EAI7BjB,gBAJ6B,CAAlC,CADJ;AAQH,eATD,MASO,IAAIF,QAAQ,CAACkB,CAAD,CAAR,CAAYa,MAAZ,IAAsB7C,QAAQ,CAAC8C,WAAT,CAAqBK,MAA/C,EAAuD;AAC1DrB,gBAAAA,YAAY,CAACkB,IAAb,CACI;AAAG,kBAAA,KAAK,EAAC,OAAT;AAAiB,kBAAA,GAAG,EAAE,SAAShB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkC,MAAC,KAAD;AAAO,kBAAA,QAAQ,EAAC,OAAhB;AAC9B,kBAAA,EAAE,EAAC,MAD2B;AACpB,kBAAA,GAAG,EAAE,SAASA,CADM;AACH,kBAAA,IAAI,EAAC,OADF;AACU,kBAAA,KAAK,EAAC,MADhB;AAE9B,kBAAA,KAAK,EAAE;AAACiB,oBAAAA,UAAU,EAAE,KAAb;AAAoBC,oBAAAA,UAAU,EAAE;AAAhC,mBAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAG9B,MAAC,IAAD;AAAM,kBAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAH8B,EAI7BjB,gBAJ6B,EAK7BjB,gBAL6B,CAAlC,CADJ;AASH,eAVM,MAUA;AACHc,gBAAAA,YAAY,CAACkB,IAAb,CACI;AAAG,kBAAA,KAAK,EAAC,OAAT;AAAiB,kBAAA,GAAG,EAAE,SAAShB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACI;AAAG,kBAAA,IAAI,EAAEQ,WAAT;AAAsB,kBAAA,MAAM,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAsC,MAAC,KAAD;AAAO,kBAAA,QAAQ,EAAC,OAAhB;AAClC,kBAAA,EAAE,EAAC,MAD+B;AACxB,kBAAA,GAAG,EAAE,SAASR,CADU;AACP,kBAAA,IAAI,EAAC,OADE;AACM,kBAAA,KAAK,EAAC,MADZ;AAElC,kBAAA,KAAK,EAAE;AAACiB,oBAAAA,UAAU,EAAE,KAAb;AAAoBC,oBAAAA,UAAU,EAAE;AAAhC,mBAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGjCjB,gBAHiC,EAIjCjB,gBAJiC,CAAtC,CADJ,CADJ;AASH;AACJ,aA/BD,MA+BO;AACHc,cAAAA,YAAY,CAACkB,IAAb,CACI;AAAG,gBAAA,GAAG,EAAE,SAAShB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AAAG,gBAAA,IAAI,EAAEQ,WAAT;AAAsB,gBAAA,MAAM,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI,MAAC,KAAD;AAAO,gBAAA,QAAQ,EAAC,MAAhB;AAAuB,gBAAA,EAAE,EAAC,MAA1B;AACA,gBAAA,GAAG,EAAE,SAASR,CADd;AACiB,gBAAA,IAAI,EAAC,OADtB;AAC8B,gBAAA,KAAK,EAAE;AAACiB,kBAAAA,UAAU,EAAE,KAAb;AAAoBC,kBAAAA,UAAU,EAAE;AAAhC,iBADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAECjB,gBAFD,EAGCjB,gBAHD,CADJ,CADJ,CADJ;AASH;AACJ;AACJ,SA3DD,MA2DO;AACHc,UAAAA,YAAY,CAACkB,IAAb,CACI,MAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,IAAX;AAAgB,YAAA,SAAS,EAAC,QAA1B;AAAmC,YAAA,GAAG,EAAC,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ;AAGH;AACJ;;AAED,aACI;AAAK,QAAA,KAAK,EAAE;AAACI,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,OAAD;AAAS,QAAA,KAAK,EAAE;AAACvB,UAAAA,MAAM,EAAGA,MAAM,GAAC,EAAR,GAAc,IAAvB;AAA6BuB,UAAAA,KAAK,EAAE,MAApC;AAA4CC,UAAAA,QAAQ,EAAE;AAAtD,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKvB,YADL,CADJ,EAII,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWC,OAAX,GAAqB,KAArB,GAA6B,IAAlD;AAAwD,QAAA,MAAM,EAAE,KAAKF,WAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CADJ;AAUH;;;;EA9HchB,S;;IAiIb+D,S;;;AACF,qBAAYlD,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AACA,WAAKI,KAAL,GAAa;AAAC+C,MAAAA,QAAQ,EAAEnD,KAAK,CAACmD,QAAjB;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAAb;AACA,WAAKC,MAAL,GAAcrD,KAAK,CAACqD,MAApB;AAHe;AAIlB;;;;8CAEyBrD,K,EAAO;AAC7B,WAAKqB,QAAL,CAAc;AAAC8B,QAAAA,QAAQ,EAAEnD,KAAK,CAACmD;AAAjB,OAAd;AACH;;;yCAEoB;AACjB,UAAI,KAAK/C,KAAL,CAAWgD,OAAf,EAAwB;AACpB,aAAKC,MAAL,CAAY,KAAKjD,KAAL,CAAWgD,OAAvB;AACA,aAAK/B,QAAL,CAAc;AAAC+B,UAAAA,OAAO,EAAE;AAAV,SAAd;AACH;AACJ;;;6BAEQ;AAAA;;AACL,aACI,MAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAW+C,QAAlC;AACI,QAAA,KAAK,EAAE,KAAK/C,KAAL,CAAWgD,OADtB;AAEI,QAAA,QAAQ,EAAE,kBAACE,CAAD;AAAA,iBAAO,MAAI,CAACjC,QAAL,CAAc;AAAC+B,YAAAA,OAAO,EAAEE,CAAC,CAACC,MAAF,CAASC;AAAnB,WAAd,CAAP;AAAA,SAFd;AAGI,QAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,aAAa,EAAE,OAAlC;AAA2CC,UAAAA,IAAI,EAAE,MAAjD;AAAyDP,UAAAA,OAAO,EAAE,MAAlE;AAA0EQ,UAAAA,OAAO,EAAE,iBAACN,CAAD;AAAA,mBAAK,MAAI,CAACO,kBAAL,EAAL;AAAA;AAAnF,SAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH;;;;EAzBmB1E,S;;AA4BxB,eAAeY,IAAf","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    Segment,\r\n    Input,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Header,\r\n    Label\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport utils from '../support/Utils';\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {address: \"\", messages: [], publicKey: \"\"}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      componentDidUpdate() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      scrollToBottom() {\r\n          if (this.lastObjectAnchor != undefined) {\r\n                this.lastObjectAnchor.scrollIntoView({ behavior: 'smooth' });\r\n          }\r\n      }    \r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.SELECT_CONTACT) {\r\n                this.setState({address: payload.data, \r\n                    publicKey: this.account.storageManager.contacts[payload.data].publicKey,\r\n                    messages: this.account.storageManager.contacts[payload.data].messages});\r\n                \r\n            } else if (this.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\r\n                if (payload.data == undefined || payload.data == this.state.address) {\r\n                    this.setState({messages: this.account.storageManager.contacts[this.state.address].messages})\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        this.contractManager.sendMessage(this.state.address, \r\n            this.account.storageManager.contacts[this.state.address].publicKey, \r\n            message);\r\n    }\r\n\r\n    render() {\r\n        const {height} = this.props;\r\n\r\n        const { publicKey, messages } = this.state;\r\n\r\n        var messageItems = [];\r\n        if (publicKey) {\r\n            if (messages.length > 0) {\r\n                for (var i=0;i<messages.length;i++) {\r\n                    var decryptedMessage;\r\n                    if (messages[i].encryption == 'aes256') {\r\n                        decryptedMessage = utils.decrypt(messages[i].message.substr(2), \r\n                            this.account.computeSecret(Buffer.from(publicKey, 'hex')));\r\n                    } else {\r\n                        decryptedMessage = messages[i].message;\r\n                    }\r\n\r\n                    var lastObjectAnchor = (<span />);\r\n                    if (i == messages.length - 1) {\r\n                        lastObjectAnchor = (<span ref={lastObjectAnchor => { this.lastObjectAnchor = lastObjectAnchor; }} />);\r\n                    }\r\n\r\n                    var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\r\n                    if (messages[i].isMine) {\r\n                        if (messages[i].status == Constant.SENT_STATUS.PENDING) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' size='large' color='blue' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='circle notched' loading />\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' key={'msg_' + i} size='large' color='blue' \r\n                                    style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='warning sign'/>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}>\r\n                                    <a href={explorerUrl} target='_blank'><Label pointing='right' \r\n                                        as='span' key={'msg_' + i} size='large' color='blue' \r\n                                        style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                        {decryptedMessage}\r\n                                        {lastObjectAnchor}\r\n                                </Label></a></p>\r\n                            );\r\n                        }\r\n                    } else {\r\n                        messageItems.push(\r\n                            <p key={'msg_' + i}>\r\n                                <a href={explorerUrl} target='_blank'>\r\n                                    <Label pointing='left' as='span' \r\n                                    key={'msg_' + i} size='large' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                            </Label></a></p>\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                messageItems.push(\r\n                    <Header as='h2' textAlign='center' key='no_messages'>No messages</Header>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <Segment style={{height: (height-90) + \"px\", width: '100%', overflow: 'auto'}}>\r\n                    {messageItems}\r\n                </Segment>\r\n                <Segment>\r\n                    <TextInput disabled={this.state.address ? false : true} onSend={this.sendMessage}/>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TextInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {disabled: props.disabled, content: \"\"};\r\n        this.onSend = props.onSend;\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({disabled: props.disabled});\r\n    }\r\n\r\n    sendMessageClicked() {\r\n        if (this.state.content) {\r\n            this.onSend(this.state.content);\r\n            this.setState({content: \"\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Input fluid disabled={this.state.disabled}\r\n                value={this.state.content} \r\n                onChange={(e) => this.setState({content: e.target.value})} \r\n                action={{ color: 'orange', labelPosition: 'right', icon: 'send', content: 'Send', onClick: (e)=>this.sendMessageClicked()}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}