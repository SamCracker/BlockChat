{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport { Dispatcher } from 'flux';\nimport web3 from '../ethereum/web3';\nimport Tx from 'ethereumjs-tx';\n\nclass TransactionsManager {\n  constructor(account) {\n    _defineProperty(this, \"approveTransaction\", async (transactionId, gasPrice, gasAmount, method) => {\n      var emitter = this.emitterMapping[transactionId];\n      var data = method.encodeABI();\n      var transactionCount = await web3.eth.getTransactionCount(this.account.getAddress());\n      var rawTx = {\n        nonce: parseInt(transactionCount + this.numPendingTx),\n        gasPrice: parseInt(gasPrice),\n        gasLimit: parseInt(gasAmount),\n        to: Config.ENV.ContractAddress,\n        value: 0,\n        data: data\n      };\n      var tx = new Tx(rawTx);\n      tx.sign(this.account.getPrivateKeyBuffer());\n      var serializedTx = tx.serialize();\n      var txHash = '0x' + tx.hash().toString('hex');\n      this.updatePendingTx(this.numPendingTx + 1);\n      web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', receipt => {\n        this.updatePendingTx(this.numPendingTx - 1);\n        emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\n      }).on('error', (err, data) => {\n        this.updatePendingTx(this.numPendingTx - 1);\n        emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\n      });\n      emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\n    });\n\n    _defineProperty(this, \"rejectTransaction\", transactionId => {\n      var emitter = this.emitterMapping[transactionId];\n      emitter.emit(Constant.EVENT.ON_REJECTED);\n      delete this.emitterMapping[transactionId];\n    });\n\n    _defineProperty(this, \"automaticallyApproveTransaction\", async (transactionId, method) => {\n      var estimatedGas;\n\n      try {\n        estimatedGas = await method.estimateGas({\n          gas: 3000000\n        });\n      } catch (err) {\n        estimatedGas = 3000000;\n      }\n\n      var gasPrice = await web3.eth.getGasPrice();\n      this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\n    });\n\n    this.account = account;\n    this.numPendingTx = 0; // Number of pending Ethereum transactions\n\n    this.emitterMapping = {}; // A mapping of an increamental id with an event emitter in order\n    // to emit user approval and transaction results.\n\n    this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\n\n    this.dispatcher = new Dispatcher();\n    this.dispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\n        this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\n      } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\n        this.rejectTransaction(payload.transactionId);\n      }\n    });\n  }\n  /**\r\n   * @description Get called when user click on Approve button from a TransactionModal\r\n   */\n\n\n  updatePendingTx(numPendingTx) {\n    this.numPendingTx = numPendingTx;\n    this.dispatcher.dispatch({\n      action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\n      numPendingTx: this.numPendingTx\n    });\n  }\n  /**\r\n   * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n   * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n   */\n\n\n  executeMethod(method) {\n    this.emitterIncrementalId++;\n    var emitter = new EventEmitter();\n    this.emitterMapping[this.emitterIncrementalId] = emitter;\n\n    if (this.account.askForTransactionApproval) {\n      this.dispatcher.dispatch({\n        action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\n        method: method,\n        transactionId: this.emitterIncrementalId\n      });\n    } else {\n      this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\n    }\n\n    return emitter;\n  }\n  /**\r\n   * @description Approve a transaction without asking for user permission. Gas price will be\r\n   * calculated automatically\r\n   */\n\n\n}\n\nexport default TransactionsManager;","map":null,"metadata":{},"sourceType":"module"}