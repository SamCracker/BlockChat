{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport AccountManager from './AccountManager';\nimport LocalStorageManager from './LocalStorageManager';\nimport ContractManager from './ContractManager';\nimport EventHandler from './EventHandler';\nimport appDispatcher from './AppDispatcher';\nimport Constant from '../support/Constant';\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\n\nvar AppManager = /*#__PURE__*/function () {\n  function AppManager() {\n    var _this = this;\n\n    _classCallCheck(this, AppManager);\n\n    _defineProperty(this, \"getProfileFromContract\", function _callee() {\n      var profile;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(_this.contractManager.getProfile());\n\n            case 2:\n              profile = _context.sent;\n\n              _this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"startEventHandler\", function (accountAddress) {\n      _this.eventHandler = new EventHandler(accountAddress, _this.contractManager, _this.storageManager);\n\n      _this.eventHandler.start();\n    });\n  }\n\n  _createClass(AppManager, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      this.storageManager = new LocalStorageManager();\n      this.storageManager.initialize();\n      this.account = new AccountManager(this.storageManager);\n      this.contractManager = new ContractManager(this.account, this.storageManager); // Need to wait until the smart contract instance in this.contractManager is ready for using\n      // because it will take sometime to create the web3 contract instance.\n\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.EVENT.CONTRACT_READY) {\n          var accountAddress = _this2.account.getAddress();\n\n          if (accountAddress) {\n            _this2.startEventHandler();\n\n            _this2.getProfileFromContract();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getTransactionDispatcher\",\n    value: function getTransactionDispatcher() {\n      if (this.contractManager) {\n        return this.contractManager.transactionManager.dispatcher;\n      }\n    }\n  }]);\n\n  return AppManager;\n}();\n\nexport default AppManager;","map":null,"metadata":{},"sourceType":"module"}