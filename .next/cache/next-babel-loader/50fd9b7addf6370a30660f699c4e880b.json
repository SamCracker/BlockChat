{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { Modal, Header, Button, Message, Loader, Dimmer, Form, Input } from 'semantic-ui-react';\nimport Constant from '../../support/Constant';\nimport web3 from '../../ethereum/web3';\n\nvar TransactionModal = /*#__PURE__*/function (_Component) {\n  _inherits(TransactionModal, _Component);\n\n  function TransactionModal(props) {\n    var _this;\n\n    _classCallCheck(this, TransactionModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReject\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        modalOpen: false\n      });\n\n      _this.dispatcher.dispatch({\n        action: Constant.ACTION.REJECT_TRANSACTION,\n        transactionId: _this.state.transactionId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleApprove\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        modalOpen: false\n      });\n\n      _this.dispatcher.dispatch({\n        action: Constant.ACTION.APPROVE_TRANSACTION,\n        transactionId: _this.state.transactionId,\n        method: _this.method,\n        gasPrice: _this.state.gasPrice,\n        gasAmount: _this.state.estimatedGas\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      _this.dispatcher.register(function (payload) {\n        if (payload.action == Constant.ACTION.OPEN_TRANSACTION_MODAL) {\n          _this.method = payload.method;\n\n          _this.setState({\n            modalOpen: true,\n            estimatedGas: 0,\n            gasPrice: 0,\n            transactionId: payload.transactionId\n          });\n\n          _this.updateInfo();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateInfo\", function _callee() {\n      var estimatedGas, warningMessage, gasPrice;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              warningMessage = \"\";\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(_this.method.estimateGas({\n                gas: 3000000 // from: this.account.getAddress()\n\n              }));\n\n            case 4:\n              estimatedGas = _context.sent;\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              estimatedGas = 3000000;\n\n              if (_context.t0) {\n                warningMessage = _context.t0.message;\n              }\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(web3.eth.getGasPrice());\n\n            case 13:\n              gasPrice = _context.sent;\n\n              _this.setState({\n                estimatedGas: estimatedGas,\n                gasPrice: gasPrice,\n                warningMessage: warningMessage\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7]]);\n    });\n\n    _this.dispatcher = props.dispatcher;\n    _this.state = {\n      modalOpen: false,\n      estimatedGas: 0,\n      gasPrice: 0,\n      transactionId: 0,\n      warningMessage: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(TransactionModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var content = __jsx(Dimmer.Dimmable, {\n        as: Modal.Content\n      }, __jsx(Dimmer, {\n        active: true,\n        inverted: true\n      }, __jsx(Loader, {\n        active: true,\n        inline: \"centered\",\n        inverted: true\n      })));\n\n      if (this.state.gasPrice) {\n        content = __jsx(Modal.Content, null, __jsx(Form, {\n          warning: this.state.warningMessage != \"\"\n        }, __jsx(Form.Field, null, \"The gas price is suggested by the last few blocks median gas price.\"), __jsx(Form.Field, {\n          inline: true\n        }, __jsx(\"label\", null, \"Gas limit: \"), __jsx(\"input\", {\n          value: this.state.estimatedGas,\n          disabled: true\n        })), __jsx(Form.Field, {\n          inline: true\n        }, __jsx(\"label\", null, \"Gas price\"), __jsx(Input, {\n          value: web3.utils.fromWei(this.state.gasPrice, 'gwei'),\n          label: {\n            basic: true,\n            content: 'Gwei'\n          },\n          labelPosition: \"right\",\n          onChange: function onChange(e) {\n            if (e.target.value < 1000000) {\n              _this2.setState({\n                gasPrice: web3.utils.toWei(e.target.value, 'gwei')\n              });\n            }\n          },\n          style: {\n            textAlign: 'right'\n          }\n        })), __jsx(Form.Field, {\n          inline: true\n        }, __jsx(\"label\", null, \"Transaction fee: \"), __jsx(\"label\", null, web3.utils.fromWei((this.state.estimatedGas * this.state.gasPrice).toString(), 'ether') + ' ETH')), __jsx(Form.Field, null, __jsx(Message, {\n          warning: true\n        }, this.state.warningMessage))));\n      }\n\n      return __jsx(Modal, {\n        open: this.state.modalOpen,\n        onClose: this.handleClose,\n        size: \"mini\",\n        closeOnDimmerClick: false\n      }, __jsx(Header, {\n        icon: \"\",\n        content: \"Confirm transaction\"\n      }), content, __jsx(Modal.Actions, null, __jsx(Button, {\n        color: \"orange\",\n        onClick: this.handleApprove\n      }, \"Approve\"), __jsx(Button, {\n        color: \"red\",\n        onClick: this.handleReject\n      }, \"Reject\")));\n    }\n  }]);\n\n  return TransactionModal;\n}(Component);\n\nexport default TransactionModal;","map":null,"metadata":{},"sourceType":"module"}