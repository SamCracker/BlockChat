{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\modals\\\\SettingsModal.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { Modal, Header, Button, Message, Checkbox } from 'semantic-ui-react';\nimport appDispatcher from '../../core/AppDispatcher';\nimport Constant from '../../support/Constant';\n\nvar SettingsModal = /*#__PURE__*/function (_Component) {\n  _inherits(SettingsModal, _Component);\n\n  function SettingsModal(props) {\n    var _this;\n\n    _classCallCheck(this, SettingsModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SettingsModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpdate\", function () {\n      _this.account.setAskForTransactionApproval(_this.state.askForApproval);\n\n      _this.setState({\n        modalOpen: false\n      });\n    });\n\n    _this.account = props.account;\n    _this.state = {\n      modalOpen: false,\n      askForApproval: false\n    };\n    return _this;\n  }\n\n  _createClass(SettingsModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.ACTION.OPEN_SETTINGS_MODAL) {\n          var askForApproval = _this2.account.askForTransactionApproval;\n\n          _this2.setState({\n            modalOpen: true,\n            askForApproval: askForApproval\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(Modal, {\n        open: this.state.modalOpen,\n        onClose: this.handleClose,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, __jsx(Header, {\n        icon: \"\",\n        content: \"Settings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), __jsx(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(Checkbox, {\n        toggle: true,\n        label: \"Ask for transaction approval\",\n        checked: this.state.askForApproval,\n        onChange: function onChange(event, data) {\n          return _this3.setState({\n            askForApproval: data.checked\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), __jsx(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(Button, {\n        color: \"blue\",\n        onClick: this.handleUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Update\"), __jsx(Button, {\n        color: \"grey\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Close\")));\n    }\n  }]);\n\n  return SettingsModal;\n}(Component);\n\nexport default SettingsModal;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/modals/SettingsModal.js"],"names":["Component","Modal","Header","Button","Message","Checkbox","appDispatcher","Constant","SettingsModal","props","e","preventDefault","setState","modalOpen","account","setAskForTransactionApproval","state","askForApproval","register","payload","action","ACTION","OPEN_SETTINGS_MODAL","askForTransactionApproval","handleClose","event","data","checked","handleUpdate"],"mappings":";;;;;;;;;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SACIC,KADJ,EAEIC,MAFJ,EAGIC,MAHJ,EAIIC,OAJJ,EAKIC,QALJ,QAMO,mBANP;AAOA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;;IAEMC,a;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;;AADe,kEAML,UAACC,CAAD,EAAO;AACjBA,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KATkB;;AAAA,mEAWJ,YAAM;AACjB,YAAKC,OAAL,CAAaC,4BAAb,CAA0C,MAAKC,KAAL,CAAWC,cAArD;;AACA,YAAKL,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAdkB;;AAEf,UAAKC,OAAL,GAAeL,KAAK,CAACK,OAArB;AACA,UAAKE,KAAL,GAAa;AAAEH,MAAAA,SAAS,EAAE,KAAb;AAAoBI,MAAAA,cAAc,EAAE;AAApC,KAAb;AAHe;AAIlB;;;;wCAYmB;AAAA;;AAChBX,MAAAA,aAAa,CAACY,QAAd,CAAuB,UAACC,OAAD,EAAa;AAChC,YAAIA,OAAO,CAACC,MAAR,IAAkBb,QAAQ,CAACc,MAAT,CAAgBC,mBAAtC,EAA2D;AACvD,cAAIL,cAAc,GAAG,MAAI,CAACH,OAAL,CAAaS,yBAAlC;;AACA,UAAA,MAAI,CAACX,QAAL,CAAc;AAACC,YAAAA,SAAS,EAAE,IAAZ;AAAkBI,YAAAA,cAAc,EAAdA;AAAlB,WAAd;AACH;AACJ,OALD;AAMH;;;6BAEQ;AAAA;;AACL,aACI,MAAC,KAAD;AACI,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWH,SADrB;AAEI,QAAA,OAAO,EAAE,KAAKW,WAFlB;AAGI,QAAA,IAAI,EAAC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,EAAb;AAAgB,QAAA,OAAO,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMQ,MAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAiB,QAAA,KAAK,EAAC,8BAAvB;AAAsD,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWC,cAA1E;AAA0F,QAAA,QAAQ,EAAE,kBAACQ,KAAD,EAAQC,IAAR;AAAA,iBAAiB,MAAI,CAACd,QAAL,CAAc;AAACK,YAAAA,cAAc,EAAES,IAAI,CAACC;AAAtB,WAAd,CAAjB;AAAA,SAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CANR,EASQ,MAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,KAAKC,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAIA,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,KAAKJ,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJA,CATR,CADJ;AAoBH;;;;EA/CuBxB,S;;AAkD5B,eAAeQ,aAAf","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Message,\r\n    Checkbox\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass SettingsModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.state = { modalOpen: false, askForApproval: false}\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false})\r\n    };\r\n\r\n    handleUpdate = () => {\r\n        this.account.setAskForTransactionApproval(this.state.askForApproval);\r\n        this.setState({ modalOpen: false})\r\n    }\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_SETTINGS_MODAL) {\r\n                var askForApproval = this.account.askForTransactionApproval;\r\n                this.setState({modalOpen: true, askForApproval});\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content='Settings' />\r\n                    <Modal.Content>\r\n                        <Checkbox toggle label='Ask for transaction approval' checked={this.state.askForApproval} onChange={(event, data) => this.setState({askForApproval: data.checked})}/>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='blue' onClick={this.handleUpdate}>\r\n                        Update\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsModal;"]},"metadata":{},"sourceType":"module"}