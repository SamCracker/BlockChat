{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\ContactList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { List, Image, Loader, Dimmer, Button, Icon, Header, Popup } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport AddContactModal from './modals/AddContactModal';\n\nclass ContactList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"addContactClicked\", () => {\n      if (this.account.isJoined) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.ADD_CONTACT\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(this, \"acceptContactRequest\", event => {\n      if (this.account.isJoined) {\n        var address = event.target.value;\n        this.account.storageManager.contacts[address].isAccepting = true;\n        this.forceUpdate();\n        this.contractManager.acceptContactRequest(address, resultEvent => {\n          if (resultEvent == Constant.EVENT.ON_REJECTED) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_ERROR) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\n            this.setState({\n              contactAddresses: this.account.storageManager.contactAddresses\n            });\n          }\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(this, \"listItemClicked\", (address, event) => {\n      if (this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected && this.account.storageManager.contacts[address].publicKey) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.SELECT_CONTACT,\n          data: address\n        });\n        this.setState({\n          selectedAddress: address\n        });\n      }\n    });\n\n    this.account = props.account;\n    this.contractManager = props.contractManager;\n    this.state = {\n      contactAddresses: [],\n      isAccepting: [],\n      selectedAddress: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      contactAddresses: this.account.storageManager.contactAddresses\n    });\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\n        this.setState({\n          contactAddresses: this.account.storageManager.contactAddresses\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      contactAddresses\n    } = this.state;\n    const {\n      height\n    } = this.props;\n    var htmlContent;\n    var contactItems = [];\n\n    if (contactAddresses == undefined) {\n      htmlContent = __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    } else if (contactAddresses.length == 0) {\n      contactItems.push(__jsx(List.Item, {\n        key: 'contact_' + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, __jsx(List.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Empty\"))));\n      htmlContent = __jsx(List, {\n        selection: true,\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, contactItems);\n    } else {\n      for (var i = 0; i < contactAddresses.length; i++) {\n        var user = this.account.storageManager.contacts[contactAddresses[i]];\n        var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\n        var rightAlignedContent;\n\n        if (user.relationship == Constant.Relationship.NoRelation) {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, __jsx(Button, {\n            color: \"orange\",\n            loading: user.isAccepting,\n            disabled: user.isAccepting,\n            onClick: this.acceptContactRequest,\n            value: contactAddresses[i],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }, \"Accept\"), __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117\n              },\n              __self: this\n            }),\n            content: \"View on Etherscan\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }));\n        } else if (user.relationship == Constant.Relationship.Requested) {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, __jsx(Popup, {\n            key: 'wait_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"yellow\",\n              circular: true,\n              icon: \"wait\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126\n              },\n              __self: this\n            }),\n            content: \"Pending acceptance\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }), __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            }),\n            content: \"View on Etherscan\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }));\n        } else {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139\n              },\n              __self: this\n            }),\n            content: \"View on Etherscan\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138\n            },\n            __self: this\n          }));\n        }\n\n        var address = contactAddresses[i];\n        contactItems.push(__jsx(List.Item, {\n          active: address == this.state.selectedAddress,\n          key: 'contact_' + i,\n          value: address,\n          onClick: this.listItemClicked.bind(this, address),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, __jsx(Image, {\n          avatar: true,\n          src: user.avatarUrl ? user.avatarUrl : 'static/images/user.png',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }), __jsx(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, __jsx(List.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, user.name ? user.name : address.substr(0, 10)), address.substr(0, 14) + '...'), rightAlignedContent));\n      }\n\n      htmlContent = __jsx(List, {\n        selection: true,\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, contactItems);\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        height: 40,\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, __jsx(Header, {\n      as: \"h2\",\n      style: {\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Contact list\"), __jsx(Button, {\n      color: \"blue\",\n      style: {\n        float: 'right'\n      },\n      onClick: this.addContactClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, __jsx(Icon, {\n      name: \"add user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), \"Add\")), __jsx(\"div\", {\n      style: {\n        height: height - 40,\n        overflow: 'auto',\n        float: 'left',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, htmlContent), __jsx(AddContactModal, {\n      contractManager: this.contractManager,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ContactList;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/ContactList.js"],"names":["Component","List","Image","Loader","Dimmer","Button","Icon","Header","Popup","appDispatcher","Constant","Config","AddContactModal","ContactList","constructor","props","account","isJoined","dispatch","action","ACTION","ADD_CONTACT","EVENT","ENCOUNTERED_ERROR","message","APP_NAME","event","address","target","value","storageManager","contacts","isAccepting","forceUpdate","contractManager","acceptContactRequest","resultEvent","ON_REJECTED","ON_ERROR","ON_RECEIPT","relationship","Relationship","Connected","setState","contactAddresses","publicKey","SELECT_CONTACT","data","selectedAddress","state","componentDidMount","register","payload","CONTACT_LIST_UPDATED","render","height","htmlContent","contactItems","undefined","length","push","i","user","addressExplorerUrl","ENV","ExplorerUrl","rightAlignedContent","NoRelation","Requested","listItemClicked","bind","avatarUrl","name","substr","width","float","addContactClicked","overflow"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    List,\r\n    Image,\r\n    Loader,\r\n    Dimmer,\r\n    Button,\r\n    Icon,\r\n    Header,\r\n    Popup\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport AddContactModal from './modals/AddContactModal';\r\n\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {contactAddresses: [], isAccepting: [], selectedAddress: \"\"};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\r\n                this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n            }\r\n        })\r\n    }\r\n\r\n    addContactClicked = () => {\r\n        if (this.account.isJoined) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.ADD_CONTACT\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    acceptContactRequest = (event) => {\r\n        if (this.account.isJoined) {\r\n            var address = event.target.value;\r\n            \r\n            this.account.storageManager.contacts[address].isAccepting = true;\r\n            this.forceUpdate();\r\n\r\n            this.contractManager.acceptContactRequest(address, (resultEvent) => {\r\n                if (resultEvent == Constant.EVENT.ON_REJECTED) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_ERROR) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\r\n                    this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n                }\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    listItemClicked = (address, event) => {\r\n        if (this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected &&\r\n            this.account.storageManager.contacts[address].publicKey) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.SELECT_CONTACT,\r\n                data: address\r\n            });\r\n            this.setState({selectedAddress: address});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { contactAddresses } = this.state;\r\n        const {height} = this.props;\r\n        var htmlContent;\r\n\r\n        var contactItems = [];\r\n\r\n        if (contactAddresses == undefined) {\r\n            htmlContent = (<div></div>);\r\n        } else \r\n        if (contactAddresses.length == 0) {\r\n            contactItems.push(\r\n                <List.Item key={'contact_' + i}>\r\n                    <List.Content>\r\n                        <List.Header>Empty</List.Header>\r\n                    </List.Content>\r\n                </List.Item>\r\n                );\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        } else {\r\n            for (var i=0;i<contactAddresses.length;i++) {\r\n                var user = this.account.storageManager.contacts[contactAddresses[i]];\r\n                var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\r\n                var rightAlignedContent;\r\n                if (user.relationship == Constant.Relationship.NoRelation) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Button color='orange' loading={user.isAccepting} disabled={user.isAccepting} \r\n                                onClick={this.acceptContactRequest} value={contactAddresses[i]}>Accept</Button>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else if (user.relationship == Constant.Relationship.Requested) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'wait_popup_' + i}\r\n                                    trigger={<Button color='yellow' circular icon='wait'></Button>}\r\n                                    content='Pending acceptance'\r\n                            />\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    )\r\n                }\r\n\r\n                var address = contactAddresses[i];\r\n                contactItems.push(\r\n                    <List.Item active={address == this.state.selectedAddress} key={'contact_' + i} value={address} onClick={this.listItemClicked.bind(this,address)}>\r\n                        <Image avatar src={user.avatarUrl ? user.avatarUrl : 'static/images/user.png'}/>\r\n                        <List.Content>\r\n                            <List.Header>\r\n                                {user.name ? user.name : address.substr(0, 10)}\r\n                            </List.Header>\r\n                            {address.substr(0,14) + '...'}\r\n                        </List.Content>\r\n                        {rightAlignedContent}\r\n                    </List.Item>\r\n                );\r\n            }\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        }\r\n        \r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <div style={{height: 40, width: '100%'}}>\r\n                <Header as='h2' style={{float: 'left'}}>Contact list</Header>\r\n                <Button color='blue' style={{float: 'right'}} onClick={this.addContactClicked}><Icon name='add user'></Icon>Add</Button>\r\n                </div>\r\n                <div style={{height: height - 40, overflow: 'auto', float: 'left', width:'100%'}}>\r\n                    {htmlContent}\r\n                </div>\r\n                <AddContactModal contractManager={this.contractManager} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactList;"]},"metadata":{},"sourceType":"module"}