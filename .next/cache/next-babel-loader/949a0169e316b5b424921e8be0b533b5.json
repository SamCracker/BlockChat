{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils';\n\nvar LocalStorageManager = /*#__PURE__*/function () {\n  function LocalStorageManager() {\n    var _this = this;\n\n    _classCallCheck(this, LocalStorageManager);\n\n    _defineProperty(this, \"loadLocalContactAddresses\", function () {\n      _this.contactAddresses = []; // A list of Ethereum addresses in the contact list of the current user.\n\n      if (typeof Storage != 'undefined') {\n        var rawContactAddresses = window.localStorage.contactAddresses;\n\n        if (rawContactAddresses != undefined) {\n          _this.contactAddresses = JSON.parse(rawContactAddresses);\n        }\n      }\n    });\n\n    _defineProperty(this, \"loadContactMessages\", function () {\n      if (typeof Storage != 'undefined') {\n        for (var i = 0; i < _this.contactAddresses.length; i++) {\n          var address = _this.contactAddresses[i];\n          var localContact = window.localStorage[address];\n          _this.contacts[address] = JSON.parse(localContact);\n        }\n      }\n    });\n\n    _defineProperty(this, \"addContact\", function (address, relationship) {\n      var data = _this.contacts[address];\n\n      if (data == undefined) {\n        var member = {};\n        member.messages = [];\n        member.relationship = relationship;\n        window.localStorage.setItem(address, _JSON$stringify(member));\n        _this.contacts[address] = member;\n\n        _this.contactAddresses.push(address);\n\n        window.localStorage.setItem('contactAddresses', _JSON$stringify(_this.contactAddresses));\n      }\n    });\n\n    _defineProperty(this, \"updateContact\", function (address, publicKey, name, avatarUrl, relationship) {\n      var data = _this.contacts[address];\n\n      if (data != undefined) {\n        if (data.relationship < relationship) {\n          data.relationship = relationship;\n        }\n\n        if (publicKey) {\n          data.publicKey = publicKey;\n        }\n\n        if (name) {\n          data.name = name;\n        }\n\n        if (avatarUrl) {\n          data.avatarUrl = avatarUrl;\n        }\n\n        window.localStorage.setItem(address, _JSON$stringify(data));\n      }\n    });\n\n    _defineProperty(this, \"addInvitationEvents\", function (events) {\n      for (var i = 0; i < events.length; i++) {\n        _this.addContact(events[i].returnValues[\"from\"], Constant.Relationship.NoRelation);\n      }\n    });\n\n    _defineProperty(this, \"addRequestEvents\", function (events) {\n      for (var i = 0; i < events.length; i++) {\n        _this.addContact(events[i].returnValues[\"to\"], Constant.Relationship.Requested);\n      }\n    });\n\n    _defineProperty(this, \"addMyAcceptContactEvents\", function (events) {\n      for (var i = 0; i < events.length; i++) {\n        _this.updateContact(events[i].returnValues[\"to\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addAcceptContactEvents\", function (events) {\n      for (var i = 0; i < events.length; i++) {\n        _this.updateContact(events[i].returnValues[\"from\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addMessageFromFriendEvent\", function (event) {\n      var data = event.returnValues;\n      var fromAddress = data.from;\n      var message = {};\n      message.isMine = false;\n      message.message = data.message;\n      message.encryption = utils.hexStringToAsciiString(data.encryption);\n      message.txHash = event.transactionHash;\n\n      _this.contacts[fromAddress].messages.push(message);\n\n      window.localStorage.setItem(fromAddress, _JSON$stringify(_this.contacts[fromAddress]));\n    });\n\n    _defineProperty(this, \"addMyMessageEvent\", function (event) {\n      var data = event.returnValues;\n      var localMessages = _this.contacts[data.to];\n      var noMatchingItem = true;\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (event.transactionHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = Constant.SENT_STATUS.SUCCESS;\n          window.localStorage.setItem(data.to, _JSON$stringify(_this.contacts[data.to]));\n          noMatchingItem = false;\n        }\n      }\n\n      if (noMatchingItem) {\n        var message = {};\n        message.isMine = true;\n        message.message = data.message;\n        message.encryption = utils.hexStringToAsciiString(data.encryption);\n        message.txHash = event.transactionHash;\n        localMessages.messages.push(message);\n        window.localStorage.setItem(data.to, _JSON$stringify(_this.contacts[data.to]));\n      }\n    });\n\n    _defineProperty(this, \"addMyLocalMessage\", function (message, to, encryption, txHash) {\n      var message = {\n        message: message,\n        encryption: encryption,\n        txHash: txHash\n      };\n      message.status = Constant.SENT_STATUS.PENDING;\n      message.isMine = true;\n\n      _this.contacts[to].messages.push(message);\n\n      window.localStorage.setItem(to, _JSON$stringify(_this.contacts[to]));\n    });\n\n    _defineProperty(this, \"updateLocalMessage\", function (toAddress, txHash, status) {\n      var localMessages = _this.contacts[toAddress];\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (txHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = status;\n          window.localStorage.setItem(toAddress, _JSON$stringify(_this.contacts[toAddress]));\n        }\n      }\n    });\n\n    _defineProperty(this, \"clearMessages\", function (contacts) {\n      window.localStorage.setItem('currentDataBlock', \"0\");\n      window.localStorage.removeItem('contactAddresses');\n\n      for (var i = 0; i < contacts.length; i++) {\n        window.localStorage.removeItem(contacts[i]);\n      }\n    });\n  }\n\n  _createClass(LocalStorageManager, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.contacts = {}; // Map Ethereum addresses with all messages and information belong to an address\n\n      this.loadLocalContactAddresses();\n      this.loadContactMessages();\n      appDispatcher.dispatch({\n        action: Constant.EVENT.CONTACT_LIST_UPDATED\n      });\n    }\n  }, {\n    key: \"storePrivateKeyAndAddress\",\n    value: function storePrivateKeyAndAddress(privateKey, address) {\n      if (typeof Storage !== 'undefined') {\n        window.localStorage.setItem(\"privateKey\", privateKey);\n        window.localStorage.setItem(\"address\", address);\n        window.localStorage.setItem(\"currentDataBlock\", \"0\");\n        window.localStorage.setItem(\"ethNetwork\", \"4\");\n      }\n    }\n  }, {\n    key: \"getPrivateKey\",\n    value: function getPrivateKey() {\n      if (typeof Storage !== 'undefined') {\n        return window.localStorage.privateKey;\n      }\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      if (typeof Storage !== 'undefined') {\n        return window.localStorage.address;\n      }\n    }\n  }, {\n    key: \"setBalance\",\n    value: function setBalance(balance) {\n      if (typeof Storage !== 'undefined') {\n        window.localStorage.setItem('balance', balance);\n      }\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance() {\n      if (typeof Storage !== 'undefined' && window.localStorage.balance != undefined) {\n        return window.localStorage.balance;\n      } else {\n        return \"0\";\n      }\n    }\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      if (typeof Storage !== 'undefined' && name != \"\") {\n        window.localStorage.setItem('name', name);\n      }\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      if (typeof Storage !== 'undefined' && window.localStorage.name != undefined) {\n        return window.localStorage.name;\n      } else {\n        return \"\";\n      }\n    }\n  }, {\n    key: \"setAvatarUrl\",\n    value: function setAvatarUrl(avatarUrl) {\n      if (typeof Storage !== 'undefined' && avatarUrl) {\n        window.localStorage.setItem('avatarUrl', avatarUrl);\n      }\n    }\n  }, {\n    key: \"getAvatarUrl\",\n    value: function getAvatarUrl() {\n      if (typeof Storage !== 'undefined' && window.localStorage.avatarUrl != undefined) {\n        return window.localStorage.avatarUrl;\n      } else {\n        return \"\";\n      }\n    }\n  }, {\n    key: \"setJoinedStatus\",\n    value: function setJoinedStatus(isJoined) {\n      if (typeof Storage !== 'undefined') {\n        window.localStorage.setItem('isJoined', isJoined);\n      }\n    }\n  }, {\n    key: \"getJoinedStatus\",\n    value: function getJoinedStatus() {\n      if (typeof Storage !== 'undefined' && window.localStorage.isJoined != undefined) {\n        return window.localStorage.isJoined;\n      } else {\n        return false;\n      }\n    } // Get current block number of contract events' data (message events, invitation events...)\n\n  }, {\n    key: \"getCurrentDataBlock\",\n    value: function getCurrentDataBlock() {\n      return _parseInt(window.localStorage.currentDataBlock);\n    }\n  }, {\n    key: \"setCurrentDataBlock\",\n    value: function setCurrentDataBlock(blockNumber) {\n      window.localStorage.setItem('currentDataBlock', blockNumber);\n    }\n  }, {\n    key: \"setAskForTransactionApproval\",\n    value: function setAskForTransactionApproval(boolValue) {\n      if (typeof Storage !== 'undefined') {\n        window.localStorage.setItem('askForTransactionApproval', boolValue);\n      }\n    }\n  }, {\n    key: \"getAskForTransactionApproval\",\n    value: function getAskForTransactionApproval() {\n      if (typeof Storage !== 'undefined' && window.localStorage.askForTransactionApproval) {\n        return window.localStorage.askForTransactionApproval == \"true\";\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"removeNetworkDependentData\",\n    value: function removeNetworkDependentData() {\n      if (typeof Storage !== 'undefined') {\n        var rawAddresses = window.localStorage.contactAddresses;\n\n        if (rawAddresses != undefined) {\n          var addresses = JSON.parse(rawAddresses);\n\n          for (var i = 0; i < addresses.length; i++) {\n            window.localStorage.removeItem(addresses[i]);\n          }\n\n          window.localStorage.removeItem('contactAddresses');\n        }\n\n        window.localStorage.removeItem('balance');\n        window.localStorage.removeItem('isJoined');\n        window.localStorage.removeItem('name');\n        window.localStorage.removeItem('avatarUrl');\n        window.localStorage.setItem('currentDataBlock', '0');\n      }\n    }\n  }]);\n\n  return LocalStorageManager;\n}();\n\nexport default LocalStorageManager;","map":null,"metadata":{},"sourceType":"module"}