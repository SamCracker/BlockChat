{"ast":null,"code":"var crypto = require('crypto');\n\nvar wallet = require('ethereumjs-wallet');\n\nvar algorithm = 'aes256';\n\nmodule.exports.getEncryptAlgorithm = () => {\n  return algorithm;\n};\n\nmodule.exports.getEncryptAlgorithmInHex = () => {\n  return '0x' + Buffer.from(algorithm, 'ascii').toString('hex');\n};\n\nmodule.exports.hexStringToAsciiString = hexString => {\n  if (hexString.startsWith('0x')) {\n    hexString = hexString.substr(2);\n  }\n\n  return Buffer.from(hexString, 'hex').toString('ascii').replace(/\\0/g, '');\n};\n\nmodule.exports.privateToPublic = privateKey => {\n  var account = crypto.createECDH('secp256k1');\n  account.setPrivateKey(privateKey);\n  return account.getPublicKey().slice(1);\n};\n\nmodule.exports.computeSecret = (privateKeyFromA, publicKeyFromB) => {\n  var A = crypto.createECDH('secp256k1');\n  A.setPrivateKey(privateKeyFromA);\n  return A.computeSecret(publicKeyFromB);\n};\n\nexports.encrypt = (message, secret) => {\n  var cipher = crypto.createCipher(algorithm, secret);\n  var crypted = cipher.update(message, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return crypted;\n};\n\nexports.decrypt = (encryptedMessage, secret) => {\n  var decipher = crypto.createDecipher(algorithm, secret);\n  var dec = decipher.update(encryptedMessage, 'hex', 'utf8');\n  dec += decipher.final('utf8');\n  return dec;\n}; // exports.getPubkeyFromTransaction = (rawTx) => {\n//       var localTx = {\n//         nonce: parseInt(rawTx.nonce),\n//         gasPrice: parseInt(rawTx.gasPrice),\n//         gasLimit: parseInt(rawTx.gas),\n//         to: rawTx.to,\n//         value: parseInt(rawTx.value),\n//         r: rawTx.r,\n//         s: rawTx.s,\n//         v: rawTx.v,\n//         data: rawTx.input,\n//       };\n//     var txInstance = new Transaction(localTx);\n//     return txInstance.getSenderPublicKey().toString('hex');\n//   }","map":{"version":3,"sources":["D:/BlockChat/BlockChat/support/Utils.js"],"names":["crypto","require","wallet","algorithm","module","exports","getEncryptAlgorithm","getEncryptAlgorithmInHex","Buffer","from","toString","hexStringToAsciiString","hexString","startsWith","substr","replace","privateToPublic","privateKey","account","createECDH","setPrivateKey","getPublicKey","slice","computeSecret","privateKeyFromA","publicKeyFromB","A","encrypt","message","secret","cipher","createCipher","crypted","update","final","decrypt","encryptedMessage","decipher","createDecipher","dec"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAApB;;AAEA,IAAIE,SAAS,GAAG,QAAhB;;AAEAC,MAAM,CAACC,OAAP,CAAeC,mBAAf,GAAqC,MAAM;AACvC,SAAOH,SAAP;AACH,CAFD;;AAIAC,MAAM,CAACC,OAAP,CAAeE,wBAAf,GAA0C,MAAM;AAC5C,SAAO,OAAOC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuB,OAAvB,EAAgCO,QAAhC,CAAyC,KAAzC,CAAd;AACH,CAFD;;AAIAN,MAAM,CAACC,OAAP,CAAeM,sBAAf,GAAyCC,SAAD,IAAe;AACnD,MAAIA,SAAS,CAACC,UAAV,CAAqB,IAArB,CAAJ,EAAgC;AAC5BD,IAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiB,CAAjB,CAAZ;AACH;;AACD,SAAON,MAAM,CAACC,IAAP,CAAYG,SAAZ,EAAuB,KAAvB,EAA8BF,QAA9B,CAAuC,OAAvC,EAAgDK,OAAhD,CAAwD,KAAxD,EAA+D,EAA/D,CAAP;AACH,CALD;;AAOAX,MAAM,CAACC,OAAP,CAAeW,eAAf,GAAkCC,UAAD,IAAgB;AAC7C,MAAIC,OAAO,GAAGlB,MAAM,CAACmB,UAAP,CAAkB,WAAlB,CAAd;AACAD,EAAAA,OAAO,CAACE,aAAR,CAAsBH,UAAtB;AACA,SAAOC,OAAO,CAACG,YAAR,GAAuBC,KAAvB,CAA6B,CAA7B,CAAP;AACH,CAJD;;AAMAlB,MAAM,CAACC,OAAP,CAAekB,aAAf,GAA+B,CAACC,eAAD,EAAkBC,cAAlB,KAAqC;AAChE,MAAIC,CAAC,GAAG1B,MAAM,CAACmB,UAAP,CAAkB,WAAlB,CAAR;AACAO,EAAAA,CAAC,CAACN,aAAF,CAAgBI,eAAhB;AACA,SAAOE,CAAC,CAACH,aAAF,CAAgBE,cAAhB,CAAP;AACH,CAJD;;AAMApB,OAAO,CAACsB,OAAR,GAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnC,MAAIC,MAAM,GAAG9B,MAAM,CAAC+B,YAAP,CAAoB5B,SAApB,EAA+B0B,MAA/B,CAAb;AACA,MAAIG,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAcL,OAAd,EAAsB,MAAtB,EAA6B,KAA7B,CAAd;AACAI,EAAAA,OAAO,IAAIF,MAAM,CAACI,KAAP,CAAa,KAAb,CAAX;AACA,SAAOF,OAAP;AACD,CALH;;AAOA3B,OAAO,CAAC8B,OAAR,GAAkB,CAACC,gBAAD,EAAmBP,MAAnB,KAA8B;AAC5C,MAAIQ,QAAQ,GAAGrC,MAAM,CAACsC,cAAP,CAAsBnC,SAAtB,EAAgC0B,MAAhC,CAAf;AACA,MAAIU,GAAG,GAAGF,QAAQ,CAACJ,MAAT,CAAgBG,gBAAhB,EAAiC,KAAjC,EAAuC,MAAvC,CAAV;AACAG,EAAAA,GAAG,IAAIF,QAAQ,CAACH,KAAT,CAAe,MAAf,CAAP;AACA,SAAOK,GAAP;AACH,CALD,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["var crypto = require('crypto');\r\nvar wallet = require('ethereumjs-wallet');\r\n\r\nvar algorithm = 'aes256';\r\n\r\nmodule.exports.getEncryptAlgorithm = () => {\r\n    return algorithm;\r\n}\r\n\r\nmodule.exports.getEncryptAlgorithmInHex = () => {\r\n    return '0x' + Buffer.from(algorithm, 'ascii').toString('hex');\r\n}\r\n\r\nmodule.exports.hexStringToAsciiString = (hexString) => {\r\n    if (hexString.startsWith('0x')) {\r\n        hexString = hexString.substr(2);\r\n    }\r\n    return Buffer.from(hexString, 'hex').toString('ascii').replace(/\\0/g, '');\r\n}\r\n\r\nmodule.exports.privateToPublic = (privateKey) => {\r\n    var account = crypto.createECDH('secp256k1');\r\n    account.setPrivateKey(privateKey);\r\n    return account.getPublicKey().slice(1);\r\n}\r\n\r\nmodule.exports.computeSecret = (privateKeyFromA, publicKeyFromB) => {\r\n    var A = crypto.createECDH('secp256k1');\r\n    A.setPrivateKey(privateKeyFromA);\r\n    return A.computeSecret(publicKeyFromB);\r\n}\r\n\r\nexports.encrypt = (message, secret) => {\r\n    var cipher = crypto.createCipher(algorithm, secret);\r\n    var crypted = cipher.update(message,'utf8','hex')\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n  }\r\n  \r\nexports.decrypt = (encryptedMessage, secret) => {\r\n    var decipher = crypto.createDecipher(algorithm,secret)\r\n    var dec = decipher.update(encryptedMessage,'hex','utf8')\r\n    dec += decipher.final('utf8');\r\n    return dec;\r\n}\r\n\r\n// exports.getPubkeyFromTransaction = (rawTx) => {\r\n//       var localTx = {\r\n//         nonce: parseInt(rawTx.nonce),\r\n//         gasPrice: parseInt(rawTx.gasPrice),\r\n//         gasLimit: parseInt(rawTx.gas),\r\n//         to: rawTx.to,\r\n//         value: parseInt(rawTx.value),\r\n//         r: rawTx.r,\r\n//         s: rawTx.s,\r\n//         v: rawTx.v,\r\n//         data: rawTx.input,\r\n//       };\r\n  \r\n//     var txInstance = new Transaction(localTx);\r\n//     return txInstance.getSenderPublicKey().toString('hex');\r\n//   }"]},"metadata":{},"sourceType":"script"}