{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport EventEmitter from 'events';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport { Dispatcher } from 'flux';\nimport web3 from '../ethereum/web3';\nimport Tx from 'ethereumjs-tx';\n\nvar TransactionsManager = /*#__PURE__*/function () {\n  function TransactionsManager(account) {\n    var _this = this;\n\n    _classCallCheck(this, TransactionsManager);\n\n    _defineProperty(this, \"approveTransaction\", function _callee(transactionId, gasPrice, gasAmount, method) {\n      var emitter, data, transactionCount, rawTx, tx, serializedTx, txHash;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              emitter = _this.emitterMapping[transactionId];\n              data = method.encodeABI();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(web3.eth.getTransactionCount(_this.account.getAddress()));\n\n            case 4:\n              transactionCount = _context.sent;\n              rawTx = {\n                nonce: _parseInt(transactionCount + _this.numPendingTx),\n                gasPrice: _parseInt(gasPrice),\n                gasLimit: _parseInt(gasAmount),\n                to: Config.ENV.ContractAddress,\n                value: 0,\n                data: data\n              };\n              tx = new Tx(rawTx);\n              tx.sign(_this.account.getPrivateKeyBuffer());\n              serializedTx = tx.serialize();\n              txHash = '0x' + tx.hash().toString('hex');\n\n              _this.updatePendingTx(_this.numPendingTx + 1);\n\n              web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', function (receipt) {\n                _this.updatePendingTx(_this.numPendingTx - 1);\n\n                emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\n              }).on('error', function (err, data) {\n                _this.updatePendingTx(_this.numPendingTx - 1);\n\n                emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\n              });\n              emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"rejectTransaction\", function (transactionId) {\n      var emitter = _this.emitterMapping[transactionId];\n      emitter.emit(Constant.EVENT.ON_REJECTED);\n      delete _this.emitterMapping[transactionId];\n    });\n\n    _defineProperty(this, \"automaticallyApproveTransaction\", function _callee2(transactionId, method) {\n      var estimatedGas, gasPrice;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(method.estimateGas({\n                gas: 3000000\n              }));\n\n            case 3:\n              estimatedGas = _context2.sent;\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              estimatedGas = 3000000;\n\n            case 9:\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(web3.eth.getGasPrice());\n\n            case 11:\n              gasPrice = _context2.sent;\n\n              _this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 6]]);\n    });\n\n    this.account = account;\n    this.numPendingTx = 0; // Number of pending Ethereum transactions\n\n    this.emitterMapping = {}; // A mapping of an increamental id with an event emitter in order\n    // to emit user approval and transaction results.\n\n    this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\n\n    this.dispatcher = new Dispatcher();\n    this.dispatcher.register(function (payload) {\n      if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\n        _this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\n      } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\n        _this.rejectTransaction(payload.transactionId);\n      }\n    });\n  }\n  /**\r\n   * @description Get called when user click on Approve button from a TransactionModal\r\n   */\n\n\n  _createClass(TransactionsManager, [{\n    key: \"updatePendingTx\",\n    value: function updatePendingTx(numPendingTx) {\n      this.numPendingTx = numPendingTx;\n      this.dispatcher.dispatch({\n        action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\n        numPendingTx: this.numPendingTx\n      });\n    }\n    /**\r\n     * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n     * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n     */\n\n  }, {\n    key: \"executeMethod\",\n    value: function executeMethod(method) {\n      this.emitterIncrementalId++;\n      var emitter = new EventEmitter();\n      this.emitterMapping[this.emitterIncrementalId] = emitter;\n\n      if (this.account.askForTransactionApproval) {\n        this.dispatcher.dispatch({\n          action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\n          method: method,\n          transactionId: this.emitterIncrementalId\n        });\n      } else {\n        this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\n      }\n\n      return emitter;\n    }\n    /**\r\n     * @description Approve a transaction without asking for user permission. Gas price will be\r\n     * calculated automatically\r\n     */\n\n  }]);\n\n  return TransactionsManager;\n}();\n\nexport default TransactionsManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/TransactionManager.js"],"names":["EventEmitter","Constant","Config","Dispatcher","web3","Tx","TransactionsManager","account","transactionId","gasPrice","gasAmount","method","emitter","emitterMapping","data","encodeABI","eth","getTransactionCount","getAddress","transactionCount","rawTx","nonce","numPendingTx","gasLimit","to","ENV","ContractAddress","value","tx","sign","getPrivateKeyBuffer","serializedTx","serialize","txHash","hash","toString","updatePendingTx","sendSignedTransaction","on","receipt","emit","EVENT","ON_RECEIPT","err","ON_ERROR","ON_APPROVED","ON_REJECTED","estimateGas","gas","estimatedGas","getGasPrice","approveTransaction","emitterIncrementalId","dispatcher","register","payload","action","ACTION","APPROVE_TRANSACTION","REJECT_TRANSACTION","rejectTransaction","dispatch","PENDING_TRANSACTION_UPDATED","askForTransactionApproval","OPEN_TRANSACTION_MODAL","automaticallyApproveTransaction"],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport {Dispatcher} from 'flux';\r\nimport web3 from '../ethereum/web3';\r\nimport Tx from 'ethereumjs-tx';\r\n\r\nclass TransactionsManager {\r\n    constructor(account) {\r\n        this.account = account;\r\n        this.numPendingTx = 0;      // Number of pending Ethereum transactions\r\n        this.emitterMapping = {};   // A mapping of an increamental id with an event emitter in order\r\n                                    // to emit user approval and transaction results.\r\n        this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\r\n        this.dispatcher = new Dispatcher();\r\n\r\n        this.dispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\r\n                this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\r\n            } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\r\n                this.rejectTransaction(payload.transactionId);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    approveTransaction = async (transactionId, gasPrice, gasAmount, method) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n\r\n        var data = method.encodeABI();\r\n        var transactionCount = await web3.eth.getTransactionCount(this.account.getAddress());\r\n\r\n        var rawTx = {\r\n            nonce: parseInt(transactionCount + this.numPendingTx),\r\n            gasPrice: parseInt(gasPrice),\r\n            gasLimit: parseInt(gasAmount),\r\n            to: Config.ENV.ContractAddress,\r\n            value: 0,\r\n            data: data\r\n        }\r\n        var tx = new Tx(rawTx);\r\n        tx.sign(this.account.getPrivateKeyBuffer());\r\n        var serializedTx = tx.serialize();\r\n        var txHash =  '0x' + tx.hash().toString('hex');\r\n\r\n        this.updatePendingTx(this.numPendingTx+1);\r\n        web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\r\n                .on('receipt', (receipt) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\r\n                }).on('error', (err, data) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\r\n                });\r\n        emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    rejectTransaction = (transactionId) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n        emitter.emit(Constant.EVENT.ON_REJECTED);\r\n\r\n        delete this.emitterMapping[transactionId];\r\n    }\r\n\r\n    updatePendingTx(numPendingTx) {\r\n        this.numPendingTx = numPendingTx;\r\n        this.dispatcher.dispatch({\r\n            action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\r\n            numPendingTx: this.numPendingTx\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n     * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n     */\r\n    executeMethod(method) {\r\n        this.emitterIncrementalId++;\r\n        var emitter = new EventEmitter();\r\n        this.emitterMapping[this.emitterIncrementalId] = emitter;\r\n\r\n        if (this.account.askForTransactionApproval) {\r\n            this.dispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\r\n                method: method,\r\n                transactionId: this.emitterIncrementalId\r\n            });\r\n        } else {\r\n            this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\r\n        }\r\n\r\n        return emitter;\r\n    }\r\n\r\n    /**\r\n     * @description Approve a transaction without asking for user permission. Gas price will be\r\n     * calculated automatically\r\n     */\r\n    automaticallyApproveTransaction = async (transactionId, method) => {\r\n        var estimatedGas;\r\n        try {\r\n            estimatedGas = await method.estimateGas({\r\n                gas: 3000000,\r\n            });\r\n        } catch(err) {\r\n            estimatedGas = 3000000;\r\n        }\r\n        var gasPrice = await web3.eth.getGasPrice();\r\n        this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\r\n    }\r\n}\r\n\r\nexport default TransactionsManager;"]},"metadata":{},"sourceType":"module"}