{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\Chat.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { Segment, Input, Button, Message, Icon, Header, Label } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport utils from '../support/Utils';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"sendMessage\", message => {\n      this.contractManager.sendMessage(this.state.address, this.account.storageManager.contacts[this.state.address].publicKey, message);\n    });\n\n    this.account = props.account;\n    this.contractManager = props.contractManager;\n    this.state = {\n      address: \"\",\n      messages: [],\n      publicKey: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    if (this.lastObjectAnchor != undefined) {\n      this.lastObjectAnchor.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }\n\n  componentDidMount() {\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.SELECT_CONTACT) {\n        this.setState({\n          address: payload.data,\n          publicKey: this.account.storageManager.contacts[payload.data].publicKey,\n          messages: this.account.storageManager.contacts[payload.data].messages\n        });\n      } else if (this.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\n        if (payload.data == undefined || payload.data == this.state.address) {\n          this.setState({\n            messages: this.account.storageManager.contacts[this.state.address].messages\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      height\n    } = this.props;\n    const {\n      publicKey,\n      messages\n    } = this.state;\n    var messageItems = [];\n\n    if (publicKey) {\n      if (messages.length > 0) {\n        for (var i = 0; i < messages.length; i++) {\n          var decryptedMessage;\n\n          if (messages[i].encryption == 'aes256') {\n            decryptedMessage = utils.decrypt(messages[i].message.substr(2), this.account.computeSecret(Buffer.from(publicKey, 'hex')));\n          } else {\n            decryptedMessage = messages[i].message;\n          }\n\n          var lastObjectAnchor = __jsx(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          });\n\n          if (i == messages.length - 1) {\n            lastObjectAnchor = __jsx(\"span\", {\n              ref: lastObjectAnchor => {\n                this.lastObjectAnchor = lastObjectAnchor;\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 78\n              },\n              __self: this\n            });\n          }\n\n          var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\n\n          if (messages[i].isMine) {\n            if (messages[i].status == Constant.SENT_STATUS.PENDING) {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 85\n                },\n                __self: this\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 85\n                },\n                __self: this\n              }, __jsx(Icon, {\n                name: \"circle notched\",\n                loading: true,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87\n                },\n                __self: this\n              }), decryptedMessage, lastObjectAnchor)));\n            } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 94\n                },\n                __self: this\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 94\n                },\n                __self: this\n              }, __jsx(Icon, {\n                name: \"warning sign\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 97\n                },\n                __self: this\n              }), decryptedMessage, lastObjectAnchor)));\n            } else {\n              messageItems.push(__jsx(\"p\", {\n                align: \"right\",\n                key: 'msg_' + i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 104\n                },\n                __self: this\n              }, __jsx(\"a\", {\n                href: explorerUrl,\n                target: \"_blank\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 105\n                },\n                __self: this\n              }, __jsx(Label, {\n                pointing: \"right\",\n                as: \"span\",\n                key: 'msg_' + i,\n                size: \"large\",\n                color: \"blue\",\n                style: {\n                  fontWeight: '100',\n                  lineHeight: '1.5'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 105\n                },\n                __self: this\n              }, decryptedMessage, lastObjectAnchor))));\n            }\n          } else {\n            messageItems.push(__jsx(\"p\", {\n              key: 'msg_' + i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 115\n              },\n              __self: this\n            }, __jsx(\"a\", {\n              href: explorerUrl,\n              target: \"_blank\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            }, __jsx(Label, {\n              pointing: \"left\",\n              as: \"span\",\n              key: 'msg_' + i,\n              size: \"large\",\n              style: {\n                fontWeight: '100',\n                lineHeight: '1.5'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117\n              },\n              __self: this\n            }, decryptedMessage, lastObjectAnchor))));\n          }\n        }\n      } else {\n        messageItems.push(__jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\",\n          key: \"no_messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"No messages\"));\n      }\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(Segment, {\n      style: {\n        height: height - 90 + \"px\",\n        width: '100%',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, messageItems), __jsx(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(TextInput, {\n      disabled: this.state.address ? false : true,\n      onSend: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass TextInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: props.disabled,\n      content: \"\"\n    };\n    this.onSend = props.onSend;\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      disabled: props.disabled\n    });\n  }\n\n  sendMessageClicked() {\n    if (this.state.content) {\n      this.onSend(this.state.content);\n      this.setState({\n        content: \"\"\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Input, {\n      fluid: true,\n      disabled: this.state.disabled,\n      value: this.state.content,\n      onChange: e => this.setState({\n        content: e.target.value\n      }),\n      action: {\n        color: 'orange',\n        labelPosition: 'right',\n        icon: 'send',\n        content: 'Send',\n        onClick: e => this.sendMessageClicked()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/Chat.js"],"names":["Component","Segment","Input","Button","Message","Icon","Header","Label","appDispatcher","Constant","Config","utils","Chat","constructor","props","message","contractManager","sendMessage","state","address","account","storageManager","contacts","publicKey","messages","componentDidMount","scrollToBottom","componentDidUpdate","lastObjectAnchor","undefined","scrollIntoView","behavior","register","payload","action","ACTION","SELECT_CONTACT","setState","data","EVENT","MESSAGES_UPDATED","render","height","messageItems","length","i","decryptedMessage","encryption","decrypt","substr","computeSecret","Buffer","from","explorerUrl","ENV","ExplorerUrl","txHash","isMine","status","SENT_STATUS","PENDING","push","fontWeight","lineHeight","FAILED","width","overflow","TextInput","disabled","content","onSend","componentWillReceiveProps","sendMessageClicked","e","target","value","color","labelPosition","icon","onClick"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    Segment,\r\n    Input,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Header,\r\n    Label\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport utils from '../support/Utils';\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {address: \"\", messages: [], publicKey: \"\"}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      componentDidUpdate() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      scrollToBottom() {\r\n          if (this.lastObjectAnchor != undefined) {\r\n                this.lastObjectAnchor.scrollIntoView({ behavior: 'smooth' });\r\n          }\r\n      }    \r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.SELECT_CONTACT) {\r\n                this.setState({address: payload.data, \r\n                    publicKey: this.account.storageManager.contacts[payload.data].publicKey,\r\n                    messages: this.account.storageManager.contacts[payload.data].messages});\r\n                \r\n            } else if (this.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\r\n                if (payload.data == undefined || payload.data == this.state.address) {\r\n                    this.setState({messages: this.account.storageManager.contacts[this.state.address].messages})\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        this.contractManager.sendMessage(this.state.address, \r\n            this.account.storageManager.contacts[this.state.address].publicKey, \r\n            message);\r\n    }\r\n\r\n    render() {\r\n        const {height} = this.props;\r\n\r\n        const { publicKey, messages } = this.state;\r\n\r\n        var messageItems = [];\r\n        if (publicKey) {\r\n            if (messages.length > 0) {\r\n                for (var i=0;i<messages.length;i++) {\r\n                    var decryptedMessage;\r\n                    if (messages[i].encryption == 'aes256') {\r\n                        decryptedMessage = utils.decrypt(messages[i].message.substr(2), \r\n                            this.account.computeSecret(Buffer.from(publicKey, 'hex')));\r\n                    } else {\r\n                        decryptedMessage = messages[i].message;\r\n                    }\r\n\r\n                    var lastObjectAnchor = (<span />);\r\n                    if (i == messages.length - 1) {\r\n                        lastObjectAnchor = (<span ref={lastObjectAnchor => { this.lastObjectAnchor = lastObjectAnchor; }} />);\r\n                    }\r\n\r\n                    var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\r\n                    if (messages[i].isMine) {\r\n                        if (messages[i].status == Constant.SENT_STATUS.PENDING) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' size='large' color='blue' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='circle notched' loading />\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' key={'msg_' + i} size='large' color='blue' \r\n                                    style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='warning sign'/>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}>\r\n                                    <a href={explorerUrl} target='_blank'><Label pointing='right' \r\n                                        as='span' key={'msg_' + i} size='large' color='blue' \r\n                                        style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                        {decryptedMessage}\r\n                                        {lastObjectAnchor}\r\n                                </Label></a></p>\r\n                            );\r\n                        }\r\n                    } else {\r\n                        messageItems.push(\r\n                            <p key={'msg_' + i}>\r\n                                <a href={explorerUrl} target='_blank'>\r\n                                    <Label pointing='left' as='span' \r\n                                    key={'msg_' + i} size='large' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                            </Label></a></p>\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                messageItems.push(\r\n                    <Header as='h2' textAlign='center' key='no_messages'>No messages</Header>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <Segment style={{height: (height-90) + \"px\", width: '100%', overflow: 'auto'}}>\r\n                    {messageItems}\r\n                </Segment>\r\n                <Segment>\r\n                    <TextInput disabled={this.state.address ? false : true} onSend={this.sendMessage}/>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TextInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {disabled: props.disabled, content: \"\"};\r\n        this.onSend = props.onSend;\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({disabled: props.disabled});\r\n    }\r\n\r\n    sendMessageClicked() {\r\n        if (this.state.content) {\r\n            this.onSend(this.state.content);\r\n            this.setState({content: \"\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Input fluid disabled={this.state.disabled}\r\n                value={this.state.content} \r\n                onChange={(e) => this.setState({content: e.target.value})} \r\n                action={{ color: 'orange', labelPosition: 'right', icon: 'send', content: 'Send', onClick: (e)=>this.sendMessageClicked()}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}