{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport web3 from '../ethereum/web3';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils'; // EventHandler object currently make requests to the smart contract periodically \n//    to get events initiated by the contract.\n\nvar EventHandler = function EventHandler(myAddress, contractManager, storageManager) {\n  var _this = this;\n\n  _classCallCheck(this, EventHandler);\n\n  _defineProperty(this, \"pullContactEvents\", function _callee(blockNumber, currentDataBlock) {\n    var myRequestEvents, invitationEvents, i, myAcceptContactEvents, acceptContactEvents, fromAddress, profileUpdateEvents, eventData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('addContactEvent', {\n              filter: {\n                from: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 2:\n            myRequestEvents = _context.sent;\n\n            _this.storageManager.addRequestEvents(myRequestEvents); // Get list of invitation requests from other users send to the current user\n\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('addContactEvent', {\n              filter: {\n                to: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 6:\n            invitationEvents = _context.sent;\n\n            _this.storageManager.addInvitationEvents(invitationEvents);\n\n            i = 0;\n\n          case 9:\n            if (!(i < myRequestEvents.length)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(_this.contractManager.getMemberInfo(myRequestEvents[i].returnValues.to, Constant.Relationship.Requested));\n\n          case 12:\n            i++;\n            _context.next = 9;\n            break;\n\n          case 15:\n            i = 0;\n\n          case 16:\n            if (!(i < invitationEvents.length)) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 19;\n            return _regeneratorRuntime.awrap(_this.contractManager.getMemberInfo(invitationEvents[i].returnValues.from, Constant.Relationship.NoRelation));\n\n          case 19:\n            i++;\n            _context.next = 16;\n            break;\n\n          case 22:\n            _context.next = 24;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('acceptContactEvent', {\n              filter: {\n                from: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 24:\n            myAcceptContactEvents = _context.sent;\n\n            _this.storageManager.addMyAcceptContactEvents(myAcceptContactEvents);\n\n            _context.next = 28;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('acceptContactEvent', {\n              filter: {\n                to: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 28:\n            acceptContactEvents = _context.sent;\n\n            _this.storageManager.addAcceptContactEvents(acceptContactEvents); // If the one who accept our contact doesn't have publicKey yet \n            // we need to get it from the smart contract\n\n\n            i = 0;\n\n          case 31:\n            if (!(i < acceptContactEvents.length)) {\n              _context.next = 39;\n              break;\n            }\n\n            fromAddress = acceptContactEvents[i].returnValues.from;\n\n            if (_this.storageManager.contacts[fromAddress].publicKey) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 36;\n            return _regeneratorRuntime.awrap(_this.contractManager.getMemberInfo(fromAddress, Constant.Relationship.Connected));\n\n          case 36:\n            i++;\n            _context.next = 31;\n            break;\n\n          case 39:\n            _context.next = 41;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('profileUpdateEvent', {\n              filter: {\n                from: _this.storageManager.contactAddresses\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 41:\n            profileUpdateEvents = _context.sent;\n\n            for (i = 0; i < profileUpdateEvents.length; i++) {\n              eventData = profileUpdateEvents[i].returnValues;\n\n              _this.storageManager.updateContact(eventData.from, \"\", utils.hexStringToAsciiString(eventData.name), utils.hexStringToAsciiString(eventData.avatarUrl), 0);\n            }\n\n            if (myRequestEvents.length > 0 || invitationEvents.length > 0 || profileUpdateEvents.length > 0 || myAcceptContactEvents.length > 0 || acceptContactEvents.length > 0) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.CONTACT_LIST_UPDATED\n              });\n            }\n\n          case 44:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"pullMessageEvents\", function _callee2(blockNumber, currentDataBlock) {\n    var messagesSent, messagesReceived, iSent, iReceived;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('messageSentEvent', {\n              filter: {\n                from: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 2:\n            messagesSent = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(_this.contractManager.getPastEvents('messageSentEvent', {\n              filter: {\n                to: _this.myAddress\n              },\n              fromBlock: currentDataBlock + 1,\n              toBlock: blockNumber\n            }));\n\n          case 5:\n            messagesReceived = _context2.sent;\n            iSent = 0;\n            iReceived = 0;\n\n            while (iSent < messagesSent.length || iReceived < messagesReceived.length) {\n              if (iSent >= messagesSent.length) {\n                _this.storageManager.addMessageFromFriendEvent(messagesReceived[iReceived]);\n\n                iReceived++;\n              } else if (iReceived >= messagesReceived.length) {\n                _this.storageManager.addMyMessageEvent(messagesSent[iSent]);\n\n                iSent++;\n              } else {\n                if (messagesSent[iSent].blockNumber < messagesReceived[iReceived].blockNumber) {\n                  _this.storageManager.addMyMessageEvent(messagesSent[iSent]);\n\n                  iSent++;\n                } else {\n                  _this.storageManager.addMessageFromFriendEvent(messagesReceived[iReceived]);\n\n                  iReceived++;\n                }\n              }\n            }\n\n            if (messagesReceived.length > 0 || messagesSent.length > 0) {\n              appDispatcher.dispatch({\n                action: Constant.EVENT.MESSAGES_UPDATED\n              });\n            }\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  });\n\n  _defineProperty(this, \"pullEvents\", function _callee3() {\n    var currentDataBlock, blockNumber;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            // Get the last updated block number\n            currentDataBlock = _this.storageManager.getCurrentDataBlock();\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(web3.eth.getBlockNumber());\n\n          case 4:\n            blockNumber = _context3.sent;\n\n            if (!(blockNumber > currentDataBlock)) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(_this.pullContactEvents(blockNumber, currentDataBlock));\n\n          case 8:\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(_this.pullMessageEvents(blockNumber, currentDataBlock));\n\n          case 10:\n            _this.storageManager.setCurrentDataBlock(blockNumber);\n\n          case 11:\n            _context3.next = 16;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0.message);\n\n          case 16:\n            setTimeout(_this.pullEvents, 5000);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]]);\n  });\n\n  _defineProperty(this, \"start\", function () {\n    _this.pullEvents();\n  });\n\n  this.myAddress = myAddress;\n  this.contractManager = contractManager;\n  this.storageManager = storageManager;\n};\n\nexport default EventHandler;","map":null,"metadata":{},"sourceType":"module"}