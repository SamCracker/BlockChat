{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { Menu, Container, Button, Label, Loader, List, Image, Icon, Dropdown } from 'semantic-ui-react';\nimport Head from 'next/head';\nimport web3 from '../ethereum/web3';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport appDispatcher from '../core/AppDispatcher';\nimport contractManager from '../core/ContractManager';\n\nvar HeaderMenu = /*#__PURE__*/function (_Component) {\n  _inherits(HeaderMenu, _Component);\n\n  function HeaderMenu(props) {\n    var _this;\n\n    _classCallCheck(this, HeaderMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HeaderMenu).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"clearAllData\", function () {\n      window.localStorage.clear();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAccountInfo\", function () {\n      var address = _this.account.getAddress();\n\n      if (address) {\n        _this.setState({\n          address: address,\n          balance: _this.account.balance,\n          isLoading: false,\n          isJoined: _this.account.isJoined\n        });\n      } else {\n        if (_this.reloadCount == 1) {\n          _this.setState({\n            isLoading: false\n          });\n        } else {\n          _this.reloadCount++;\n          setTimeout(_this.getAccountInfo, 800);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClicked\", function (event, data) {\n      if (data.name == 'updateProfile') {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.OPEN_UPDATE_PROFILE\n        });\n      } else if (data.name == 'logOutItem') {\n        _this.clearAllData();\n\n        window.location.reload();\n      } else if (data.name == 'settingsItem') {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.OPEN_SETTINGS_MODAL\n        });\n      } else if (data.name == 'changeEthNetwork') {\n        if (data.networkid != Config.ENV.EthNetworkId) {\n          Config.ENV.EthNetworkId = data.networkid;\n\n          _this.removeNetworkDependentData();\n\n          window.location.reload();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeNetworkDependentData\", function () {\n      _this.account.storageManager.removeNetworkDependentData();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleJoinClicked\", function () {\n      var publicKeyBuffer = _this.account.getPublicKeyBuffer();\n\n      _this.contractManager.joinContract(publicKeyBuffer, function (resultEvent) {\n        if (resultEvent == Constant.EVENT.ON_REJECTED || resultEvent == Constant.EVENT.ON_ERROR) {\n          _this.setState({\n            isJoinButtonLoading: false\n          });\n        } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\n          window.location.reload();\n        }\n      });\n\n      _this.setState({\n        isJoinButtonLoading: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleImportPrivateKeyClicked\", function () {\n      appDispatcher.dispatch({\n        action: Constant.ACTION.OPEN_PRIVATE_KEY_MODAL\n      });\n    });\n\n    _this.account = props.account;\n    _this.contractManager = contractManager;\n    console.log(contractManager);\n    _this.transactionDispatcher = props.transactionDispatcher;\n    _this.state = {\n      address: \"\",\n      balance: \"\",\n      name: \"\",\n      avatarUrl: \"\",\n      isLoading: true,\n      isJoinButtonLoading: false,\n      isJoined: false,\n      numPendingTx: 0\n    };\n    _this.reloadCount = 0;\n    return _this;\n  }\n\n  _createClass(HeaderMenu, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.account) {\n        this.getAccountInfo();\n        appDispatcher.register(function (payload) {\n          if (payload.action == Constant.EVENT.ACCOUNT_BALANCE_UPDATED) {\n            _this2.setState({\n              balance: _this2.account.balance\n            });\n          } else if (payload.action == Constant.EVENT.ACCOUNT_INFO_UPDATED) {\n            _this2.setState({\n              name: payload.profile.name,\n              avatarUrl: payload.profile.avatarUrl,\n              isJoined: payload.profile.isJoined\n            });\n          }\n        });\n        this.transactionDispatcher.register(function (payload) {\n          if (payload.action == Constant.EVENT.PENDING_TRANSACTION_UPDATED) {\n            _this2.setState({\n              numPendingTx: payload.numPendingTx\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var accountInfo = __jsx(\"div\", null);\n\n      if (this.account) {\n        if (this.state.isLoading == false) {\n          if (this.state.address) {\n            var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + this.state.address;\n            var dropdownTrigger;\n\n            if (this.state.avatarUrl) {\n              dropdownTrigger = __jsx(\"span\", null, __jsx(Image, {\n                src: this.state.avatarUrl,\n                avatar: true\n              }), this.state.name ? this.state.name : this.state.address.substr(0, 10));\n            } else {\n              dropdownTrigger = __jsx(\"span\", null, __jsx(Icon, {\n                name: \"user\",\n                size: \"large\"\n              }), this.state.name ? this.state.name : this.state.address.substr(0, 10));\n            }\n\n            var networkItems = [];\n\n            for (var i = 0; i < Config.NETWORK_LIST.length; i++) {\n              networkItems.push(__jsx(Dropdown.Item, {\n                key: 'networkItem' + i,\n                networkid: Config.NETWORK_LIST[i].id,\n                name: \"changeEthNetwork\",\n                onClick: this.handleDropdownClicked\n              }, Config.NETWORK_LIST[i].name));\n            }\n\n            var memberInfo;\n\n            if (this.account.isJoined) {\n              memberInfo = __jsx(Dropdown, {\n                item: true,\n                trigger: dropdownTrigger\n              }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n                name: \"updateProfile\",\n                onClick: this.handleDropdownClicked\n              }, __jsx(Icon, {\n                name: \"write\"\n              }), \"Update profile\"), __jsx(Dropdown.Item, {\n                name: \"settingsItem\",\n                onClick: this.handleDropdownClicked\n              }, __jsx(Icon, {\n                name: \"settings\"\n              }), \"Settings\"), __jsx(Dropdown.Item, {\n                name: \"logOutItem\",\n                onClick: this.handleDropdownClicked\n              }, __jsx(Icon, {\n                name: \"log out\"\n              }), \"Log out\")));\n            } else {\n              memberInfo = __jsx(Button, {\n                color: \"orange\",\n                onClick: this.handleJoinClicked,\n                loading: this.state.isJoinButtonLoading,\n                disabled: this.state.isJoinButtonLoading\n              }, \"Join \", Constant.APP_NAME);\n            }\n\n            var pendingTxItem;\n\n            if (this.state.numPendingTx > 0) {\n              pendingTxItem = __jsx(Label, {\n                as: \"a\",\n                color: \"yellow\",\n                href: addressExplorerUrl,\n                target: \"_blank\"\n              }, __jsx(Icon, {\n                name: \"spinner\",\n                loading: true\n              }), this.state.numPendingTx, \" pending tx\");\n            }\n\n            accountInfo = __jsx(Menu.Menu, {\n              position: \"right\"\n            }, __jsx(Menu.Item, null, __jsx(Dropdown, {\n              item: true,\n              text: Config.ENV.NetworkName\n            }, __jsx(Dropdown.Menu, null, networkItems))), __jsx(Menu.Item, null, __jsx(List, null, __jsx(List.Item, null, __jsx(\"a\", {\n              href: addressExplorerUrl,\n              target: \"_blank\"\n            }, this.state.address)), __jsx(List.Item, null, \"Balance: \", __jsx(Label, {\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              color: \"orange\"\n            }, _parseFloat(web3.utils.fromWei(\"\" + this.state.balance, 'ether')).toFixed(8) + ' ETH'), pendingTxItem))), __jsx(Menu.Item, null, memberInfo));\n          } else {\n            accountInfo = __jsx(Menu.Menu, {\n              position: \"right\"\n            }, __jsx(Menu.Item, null, __jsx(Button, {\n              onClick: this.handleImportPrivateKeyClicked,\n              color: \"blue\"\n            }, \"Import private key\")));\n          }\n        } else {\n          accountInfo = __jsx(Loader, {\n            inverted: true,\n            active: true\n          });\n        }\n      }\n\n      return __jsx(Menu, {\n        fixed: \"top\",\n        color: \"grey\",\n        inverted: true\n      }, __jsx(Head, null, __jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n      })), __jsx(Container, null, __jsx(Menu.Item, null, __jsx(\"a\", {\n        href: \"/\"\n      }, __jsx(Image, {\n        src: \"static/images/blockchat.png\",\n        height: 55\n      }))), this.account ? accountInfo : __jsx(\"div\", null)));\n    }\n  }]);\n\n  return HeaderMenu;\n}(Component);\n\nexport default HeaderMenu;","map":null,"metadata":{},"sourceType":"module"}