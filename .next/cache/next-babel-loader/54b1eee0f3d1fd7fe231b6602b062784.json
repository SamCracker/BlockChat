{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\modals\\\\UpdateProfileModal.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { Modal, Header, Button, Icon, Form } from 'semantic-ui-react';\nimport appDispatcher from '../../core/AppDispatcher';\nimport Constant from '../../support/Constant';\n\nclass UpdateProfileModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClose\", e => {\n      e.preventDefault();\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(this, \"updateProfileClicked\", e => {\n      e.preventDefault();\n      this.contractManager.updateProfile(this.state.name, this.state.avatarUrl, resultEvent => {\n        if (resultEvent == Constant.EVENT.ON_RECEIPT) {\n          window.location.reload();\n        }\n      });\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    this.account = props.account;\n    this.contractManager = props.contractManager;\n    this.state = {\n      modalOpen: false,\n      name: this.account.name,\n      avatarUrl: this.account.avatarUrl\n    };\n  }\n\n  componentDidMount() {\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.OPEN_UPDATE_PROFILE) {\n        this.setState({\n          modalOpen: true\n        });\n      } else if (payload.action == Constant.EVENT.ACCOUNT_INFO_UPDATED) {\n        this.setState({\n          name: payload.profile.name,\n          avatarUrl: payload.profile.avatarUrl\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(Header, {\n      icon: \"\",\n      content: \"Update name and avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), __jsx(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Name\"), __jsx(\"input\", {\n      placeholder: \"Maximum 32 characters\",\n      value: this.state.name,\n      onChange: e => {\n        if (e.target.value.length <= 32) {\n          this.setState({\n            name: e.target.value\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Avatar URL\"), __jsx(\"input\", {\n      placeholder: \"Maximum 32 characters\",\n      value: this.state.avatarUrl,\n      onChange: e => {\n        if (e.target.value.length <= 32) {\n          this.setState({\n            avatarUrl: e.target.value\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"If your avatar URL is longer than 32 characters, please consider using \", __jsx(\"a\", {\n      href: \"https://goo.gl/\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Google URL Shortener\"))))), __jsx(Modal.Actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(Button, {\n      color: \"orange\",\n      onClick: this.updateProfileClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Update\"), __jsx(Button, {\n      color: \"grey\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Close\")));\n  }\n\n}\n\nexport default UpdateProfileModal;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/modals/UpdateProfileModal.js"],"names":["Component","Modal","Header","Button","Icon","Form","appDispatcher","Constant","UpdateProfileModal","constructor","props","e","preventDefault","setState","modalOpen","contractManager","updateProfile","state","name","avatarUrl","resultEvent","EVENT","ON_RECEIPT","window","location","reload","account","componentDidMount","register","payload","action","ACTION","OPEN_UPDATE_PROFILE","ACCOUNT_INFO_UPDATED","profile","render","handleClose","target","value","length","updateProfileClicked"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Icon,\r\n    Form\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass UpdateProfileModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {modalOpen: false, name: this.account.name, avatarUrl: this.account.avatarUrl};\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    updateProfileClicked = (e) => {\r\n        e.preventDefault();\r\n        this.contractManager.updateProfile(this.state.name, this.state.avatarUrl, (resultEvent) => {\r\n            if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n        this.setState({ modalOpen: false });\r\n    }\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_UPDATE_PROFILE) {\r\n                this.setState({modalOpen: true});\r\n            } else if (payload.action == Constant.EVENT.ACCOUNT_INFO_UPDATED) {\r\n                this.setState({name: payload.profile.name, avatarUrl: payload.profile.avatarUrl});\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                >\r\n                <Header icon=\"\" content=\"Update name and avatar\" />\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Form.Field>\r\n                            <label>Name</label>\r\n                            <input placeholder='Maximum 32 characters' value={this.state.name} \r\n                                onChange={(e) => {\r\n                                    if (e.target.value.length <= 32) {\r\n                                        this.setState({name: e.target.value});\r\n                                    }\r\n                                }}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            <label>Avatar URL</label>\r\n                            <input placeholder='Maximum 32 characters' value={this.state.avatarUrl} \r\n                                onChange={(e) => {\r\n                                    if (e.target.value.length <= 32) {\r\n                                        this.setState({avatarUrl: e.target.value});\r\n                                    }\r\n                                }} />\r\n                            <label>If your avatar URL is longer than 32 characters, \r\n                                please consider using <a href='https://goo.gl/' target='_blank'>Google URL Shortener</a></label>\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='orange' onClick={this.updateProfileClicked}>\r\n                        Update\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateProfileModal;"]},"metadata":{},"sourceType":"module"}