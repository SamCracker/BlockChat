{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AccountManager from './AccountManager';\nimport LocalStorageManager from './LocalStorageManager';\nimport ContractManager from './ContractManager';\nimport EventHandler from './EventHandler';\nimport appDispatcher from './AppDispatcher';\nimport Constant from '../support/Constant';\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\n\nclass AppManager {\n  constructor() {\n    _defineProperty(this, \"getProfileFromContract\", async () => {\n      var profile = await this.contractManager.getProfile();\n      this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\n    });\n\n    _defineProperty(this, \"startEventHandler\", accountAddress => {\n      this.eventHandler = new EventHandler(accountAddress, this.contractManager, this.storageManager);\n      this.eventHandler.start();\n    });\n  }\n\n  initialize() {\n    this.storageManager = new LocalStorageManager();\n    this.storageManager.initialize();\n    this.account = new AccountManager(this.storageManager);\n    this.contractManager = new ContractManager(this.account, this.storageManager); // Need to wait until the smart contract instance in this.contractManager is ready for using\n    // because it will take sometime to create the web3 contract instance.\n\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.EVENT.CONTRACT_READY) {\n        var accountAddress = this.account.getAddress();\n\n        if (accountAddress) {\n          this.startEventHandler();\n          this.getProfileFromContract();\n        }\n      }\n    });\n  }\n\n  getTransactionDispatcher() {\n    if (this.contractManager) {\n      return this.contractManager.transactionManager.dispatcher;\n    }\n  }\n\n}\n\nexport default AppManager;","map":null,"metadata":{},"sourceType":"module"}