{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\BlockChat\\\\BlockChat\\\\views\\\\ContactList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { List, Image, Loader, Dimmer, Button, Icon, Header, Popup } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport AddContactModal from './modals/AddContactModal';\n\nvar ContactList = /*#__PURE__*/function (_Component) {\n  _inherits(ContactList, _Component);\n\n  function ContactList(props) {\n    var _this;\n\n    _classCallCheck(this, ContactList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContactList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"addContactClicked\", function () {\n      if (_this.account.isJoined) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.ADD_CONTACT\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"acceptContactRequest\", function (event) {\n      if (_this.account.isJoined) {\n        var address = event.target.value;\n        _this.account.storageManager.contacts[address].isAccepting = true;\n\n        _this.forceUpdate();\n\n        _this.contractManager.acceptContactRequest(address, function (resultEvent) {\n          if (resultEvent == Constant.EVENT.ON_REJECTED) {\n            _this.account.storageManager.contacts[address].isAccepting = false;\n\n            _this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_ERROR) {\n            _this.account.storageManager.contacts[address].isAccepting = false;\n\n            _this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\n            _this.account.storageManager.contacts[address].isAccepting = false;\n            _this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\n\n            _this.setState({\n              contactAddresses: _this.account.storageManager.contactAddresses\n            });\n          }\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"listItemClicked\", function (address, event) {\n      if (_this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected && _this.account.storageManager.contacts[address].publicKey) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.SELECT_CONTACT,\n          data: address\n        });\n\n        _this.setState({\n          selectedAddress: address\n        });\n      }\n    });\n\n    _this.account = props.account;\n    _this.contractManager = props.contractManager;\n    _this.state = {\n      contactAddresses: [],\n      isAccepting: [],\n      selectedAddress: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ContactList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        contactAddresses: this.account.storageManager.contactAddresses\n      });\n      appDispatcher.register(function (payload) {\n        if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\n          _this2.setState({\n            contactAddresses: _this2.account.storageManager.contactAddresses\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contactAddresses = this.state.contactAddresses;\n      var height = this.props.height;\n      var htmlContent;\n      var contactItems = [];\n\n      if (contactAddresses == undefined) {\n        htmlContent = __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      } else if (contactAddresses.length == 0) {\n        contactItems.push(__jsx(List.Item, {\n          key: 'contact_' + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, __jsx(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, __jsx(List.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"Empty\"))));\n        htmlContent = __jsx(List, {\n          selection: true,\n          verticalAlign: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, contactItems);\n      } else {\n        for (var i = 0; i < contactAddresses.length; i++) {\n          var user = this.account.storageManager.contacts[contactAddresses[i]];\n          var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\n          var rightAlignedContent;\n\n          if (user.relationship == Constant.Relationship.NoRelation) {\n            rightAlignedContent = __jsx(List.Content, {\n              floated: \"right\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 113\n              },\n              __self: this\n            }, __jsx(Button, {\n              color: \"orange\",\n              loading: user.isAccepting,\n              disabled: user.isAccepting,\n              onClick: this.acceptContactRequest,\n              value: contactAddresses[i],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114\n              },\n              __self: this\n            }, \"Accept\"), __jsx(Popup, {\n              key: 'info_button_popup_' + i,\n              trigger: __jsx(Button, {\n                color: \"green\",\n                as: \"a\",\n                href: addressExplorerUrl,\n                target: \"_blank\",\n                circular: true,\n                icon: \"info circle\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 117\n                },\n                __self: this\n              }),\n              content: \"View on Etherscan\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            }));\n          } else if (user.relationship == Constant.Relationship.Requested) {\n            rightAlignedContent = __jsx(List.Content, {\n              floated: \"right\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124\n              },\n              __self: this\n            }, __jsx(Popup, {\n              key: 'wait_popup_' + i,\n              trigger: __jsx(Button, {\n                color: \"yellow\",\n                circular: true,\n                icon: \"wait\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 126\n                },\n                __self: this\n              }),\n              content: \"Pending acceptance\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125\n              },\n              __self: this\n            }), __jsx(Popup, {\n              key: 'info_button_popup_' + i,\n              trigger: __jsx(Button, {\n                color: \"green\",\n                as: \"a\",\n                href: addressExplorerUrl,\n                target: \"_blank\",\n                circular: true,\n                icon: \"info circle\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 130\n                },\n                __self: this\n              }),\n              content: \"View on Etherscan\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129\n              },\n              __self: this\n            }));\n          } else {\n            rightAlignedContent = __jsx(List.Content, {\n              floated: \"right\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137\n              },\n              __self: this\n            }, __jsx(Popup, {\n              key: 'info_button_popup_' + i,\n              trigger: __jsx(Button, {\n                color: \"green\",\n                as: \"a\",\n                href: addressExplorerUrl,\n                target: \"_blank\",\n                circular: true,\n                icon: \"info circle\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 139\n                },\n                __self: this\n              }),\n              content: \"View on Etherscan\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138\n              },\n              __self: this\n            }));\n          }\n\n          var address = contactAddresses[i];\n          contactItems.push(__jsx(List.Item, {\n            active: address == this.state.selectedAddress,\n            key: 'contact_' + i,\n            value: address,\n            onClick: this.listItemClicked.bind(this, address),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }, __jsx(Image, {\n            avatar: true,\n            src: user.avatarUrl ? user.avatarUrl : 'static/images/user.png',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }), __jsx(List.Content, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, __jsx(List.Header, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }, user.name ? user.name : address.substr(0, 10)), address.substr(0, 14) + '...'), rightAlignedContent));\n        }\n\n        htmlContent = __jsx(List, {\n          selection: true,\n          verticalAlign: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, contactItems);\n      }\n\n      return __jsx(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          height: 40,\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, __jsx(Header, {\n        as: \"h2\",\n        style: {\n          \"float\": 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Contact list\"), __jsx(Button, {\n        color: \"blue\",\n        style: {\n          \"float\": 'right'\n        },\n        onClick: this.addContactClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, __jsx(Icon, {\n        name: \"add user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), \"Add\")), __jsx(\"div\", {\n        style: {\n          height: height - 40,\n          overflow: 'auto',\n          \"float\": 'left',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, htmlContent), __jsx(AddContactModal, {\n        contractManager: this.contractManager,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ContactList;\n}(Component);\n\nexport default ContactList;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/views/ContactList.js"],"names":["Component","List","Image","Loader","Dimmer","Button","Icon","Header","Popup","appDispatcher","Constant","Config","AddContactModal","ContactList","props","account","isJoined","dispatch","action","ACTION","ADD_CONTACT","EVENT","ENCOUNTERED_ERROR","message","APP_NAME","event","address","target","value","storageManager","contacts","isAccepting","forceUpdate","contractManager","acceptContactRequest","resultEvent","ON_REJECTED","ON_ERROR","ON_RECEIPT","relationship","Relationship","Connected","setState","contactAddresses","publicKey","SELECT_CONTACT","data","selectedAddress","state","register","payload","CONTACT_LIST_UPDATED","height","htmlContent","contactItems","undefined","length","push","i","user","addressExplorerUrl","ENV","ExplorerUrl","rightAlignedContent","NoRelation","Requested","listItemClicked","bind","avatarUrl","name","substr","width","addContactClicked","overflow"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport {\r\n    List,\r\n    Image,\r\n    Loader,\r\n    Dimmer,\r\n    Button,\r\n    Icon,\r\n    Header,\r\n    Popup\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport AddContactModal from './modals/AddContactModal';\r\n\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {contactAddresses: [], isAccepting: [], selectedAddress: \"\"};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\r\n                this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n            }\r\n        })\r\n    }\r\n\r\n    addContactClicked = () => {\r\n        if (this.account.isJoined) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.ADD_CONTACT\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    acceptContactRequest = (event) => {\r\n        if (this.account.isJoined) {\r\n            var address = event.target.value;\r\n            \r\n            this.account.storageManager.contacts[address].isAccepting = true;\r\n            this.forceUpdate();\r\n\r\n            this.contractManager.acceptContactRequest(address, (resultEvent) => {\r\n                if (resultEvent == Constant.EVENT.ON_REJECTED) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_ERROR) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\r\n                    this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n                }\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    listItemClicked = (address, event) => {\r\n        if (this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected &&\r\n            this.account.storageManager.contacts[address].publicKey) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.SELECT_CONTACT,\r\n                data: address\r\n            });\r\n            this.setState({selectedAddress: address});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { contactAddresses } = this.state;\r\n        const {height} = this.props;\r\n        var htmlContent;\r\n\r\n        var contactItems = [];\r\n\r\n        if (contactAddresses == undefined) {\r\n            htmlContent = (<div></div>);\r\n        } else \r\n        if (contactAddresses.length == 0) {\r\n            contactItems.push(\r\n                <List.Item key={'contact_' + i}>\r\n                    <List.Content>\r\n                        <List.Header>Empty</List.Header>\r\n                    </List.Content>\r\n                </List.Item>\r\n                );\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        } else {\r\n            for (var i=0;i<contactAddresses.length;i++) {\r\n                var user = this.account.storageManager.contacts[contactAddresses[i]];\r\n                var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\r\n                var rightAlignedContent;\r\n                if (user.relationship == Constant.Relationship.NoRelation) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Button color='orange' loading={user.isAccepting} disabled={user.isAccepting} \r\n                                onClick={this.acceptContactRequest} value={contactAddresses[i]}>Accept</Button>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else if (user.relationship == Constant.Relationship.Requested) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'wait_popup_' + i}\r\n                                    trigger={<Button color='yellow' circular icon='wait'></Button>}\r\n                                    content='Pending acceptance'\r\n                            />\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    )\r\n                }\r\n\r\n                var address = contactAddresses[i];\r\n                contactItems.push(\r\n                    <List.Item active={address == this.state.selectedAddress} key={'contact_' + i} value={address} onClick={this.listItemClicked.bind(this,address)}>\r\n                        <Image avatar src={user.avatarUrl ? user.avatarUrl : 'static/images/user.png'}/>\r\n                        <List.Content>\r\n                            <List.Header>\r\n                                {user.name ? user.name : address.substr(0, 10)}\r\n                            </List.Header>\r\n                            {address.substr(0,14) + '...'}\r\n                        </List.Content>\r\n                        {rightAlignedContent}\r\n                    </List.Item>\r\n                );\r\n            }\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        }\r\n        \r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <div style={{height: 40, width: '100%'}}>\r\n                <Header as='h2' style={{float: 'left'}}>Contact list</Header>\r\n                <Button color='blue' style={{float: 'right'}} onClick={this.addContactClicked}><Icon name='add user'></Icon>Add</Button>\r\n                </div>\r\n                <div style={{height: height - 40, overflow: 'auto', float: 'left', width:'100%'}}>\r\n                    {htmlContent}\r\n                </div>\r\n                <AddContactModal contractManager={this.contractManager} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactList;"]},"metadata":{},"sourceType":"module"}