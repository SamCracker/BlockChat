{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { List, Image, Loader, Dimmer, Button, Icon, Header, Popup } from 'semantic-ui-react';\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport Config from '../support/Config';\nimport AddContactModal from './modals/AddContactModal';\n\nclass ContactList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"addContactClicked\", () => {\n      if (this.account.isJoined) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.ADD_CONTACT\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(this, \"acceptContactRequest\", event => {\n      if (this.account.isJoined) {\n        var address = event.target.value;\n        this.account.storageManager.contacts[address].isAccepting = true;\n        this.forceUpdate();\n        this.contractManager.acceptContactRequest(address, resultEvent => {\n          if (resultEvent == Constant.EVENT.ON_REJECTED) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_ERROR) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.forceUpdate();\n          } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\n            this.account.storageManager.contacts[address].isAccepting = false;\n            this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\n            this.setState({\n              contactAddresses: this.account.storageManager.contactAddresses\n            });\n          }\n        });\n      } else {\n        appDispatcher.dispatch({\n          action: Constant.EVENT.ENCOUNTERED_ERROR,\n          message: 'Please join ' + Constant.APP_NAME + ' first by click on the \\'Join\\' button on the top-right corner'\n        });\n      }\n    });\n\n    _defineProperty(this, \"listItemClicked\", (address, event) => {\n      if (this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected && this.account.storageManager.contacts[address].publicKey) {\n        appDispatcher.dispatch({\n          action: Constant.ACTION.SELECT_CONTACT,\n          data: address\n        });\n        this.setState({\n          selectedAddress: address\n        });\n      }\n    });\n\n    this.account = props.account;\n    this.contractManager = props.contractManager;\n    this.state = {\n      contactAddresses: [],\n      isAccepting: [],\n      selectedAddress: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      contactAddresses: this.account.storageManager.contactAddresses\n    });\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\n        this.setState({\n          contactAddresses: this.account.storageManager.contactAddresses\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      contactAddresses\n    } = this.state;\n    const {\n      height\n    } = this.props;\n    var htmlContent;\n    var contactItems = [];\n\n    if (contactAddresses == undefined) {\n      htmlContent = __jsx(\"div\", null);\n    } else if (contactAddresses.length == 0) {\n      contactItems.push(__jsx(List.Item, {\n        key: 'contact_' + i\n      }, __jsx(List.Content, null, __jsx(List.Header, null, \"Empty\"))));\n      htmlContent = __jsx(List, {\n        selection: true,\n        verticalAlign: \"middle\"\n      }, contactItems);\n    } else {\n      for (var i = 0; i < contactAddresses.length; i++) {\n        var user = this.account.storageManager.contacts[contactAddresses[i]];\n        var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\n        var rightAlignedContent;\n\n        if (user.relationship == Constant.Relationship.NoRelation) {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\"\n          }, __jsx(Button, {\n            color: \"orange\",\n            loading: user.isAccepting,\n            disabled: user.isAccepting,\n            onClick: this.acceptContactRequest,\n            value: contactAddresses[i]\n          }, \"Accept\"), __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\"\n            }),\n            content: \"View on Etherscan\"\n          }));\n        } else if (user.relationship == Constant.Relationship.Requested) {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\"\n          }, __jsx(Popup, {\n            key: 'wait_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"yellow\",\n              circular: true,\n              icon: \"wait\"\n            }),\n            content: \"Pending acceptance\"\n          }), __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\"\n            }),\n            content: \"View on Etherscan\"\n          }));\n        } else {\n          rightAlignedContent = __jsx(List.Content, {\n            floated: \"right\"\n          }, __jsx(Popup, {\n            key: 'info_button_popup_' + i,\n            trigger: __jsx(Button, {\n              color: \"green\",\n              as: \"a\",\n              href: addressExplorerUrl,\n              target: \"_blank\",\n              circular: true,\n              icon: \"info circle\"\n            }),\n            content: \"View on Etherscan\"\n          }));\n        }\n\n        var address = contactAddresses[i];\n        contactItems.push(__jsx(List.Item, {\n          active: address == this.state.selectedAddress,\n          key: 'contact_' + i,\n          value: address,\n          onClick: this.listItemClicked.bind(this, address)\n        }, __jsx(Image, {\n          avatar: true,\n          src: user.avatarUrl ? user.avatarUrl : 'static/images/user.png'\n        }), __jsx(List.Content, null, __jsx(List.Header, null, user.name ? user.name : address.substr(0, 10)), address.substr(0, 14) + '...'), rightAlignedContent));\n      }\n\n      htmlContent = __jsx(List, {\n        selection: true,\n        verticalAlign: \"middle\"\n      }, contactItems);\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        width: '100%'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        height: 40,\n        width: '100%'\n      }\n    }, __jsx(Header, {\n      as: \"h2\",\n      style: {\n        float: 'left'\n      }\n    }, \"Contact list\"), __jsx(Button, {\n      color: \"blue\",\n      style: {\n        float: 'right'\n      },\n      onClick: this.addContactClicked\n    }, __jsx(Icon, {\n      name: \"add user\"\n    }), \"Add\")), __jsx(\"div\", {\n      style: {\n        height: height - 40,\n        overflow: 'auto',\n        float: 'left',\n        width: '100%'\n      }\n    }, htmlContent), __jsx(AddContactModal, {\n      contractManager: this.contractManager\n    }));\n  }\n\n}\n\nexport default ContactList;","map":null,"metadata":{},"sourceType":"module"}