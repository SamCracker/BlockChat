{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport web3 from '../../ethereum/web3';\nimport { Modal, Input, Message, Button, Icon, Header } from 'semantic-ui-react';\nimport appDispatcher from '../../core/AppDispatcher';\nimport Constant from '../../support/Constant';\n\nclass AddContactModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClose\", e => {\n      e.preventDefault();\n      this.setState({\n        errorMessage: \"\"\n      });\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(this, \"handleAddContact\", e => {\n      if (web3.utils.isAddress(this.state.address)) {\n        this.contractManager.addContact(this.state.address);\n        this.setState({\n          errorMessage: \"\",\n          modalOpen: false\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Invalid ethereum address\"\n        });\n      }\n    });\n\n    this.state = {\n      modalOpen: false,\n      errorMessage: \"\",\n      address: \"\"\n    };\n    this.contractManager = props.contractManager;\n  }\n\n  componentDidMount() {\n    appDispatcher.register(payload => {\n      if (payload.action == Constant.ACTION.ADD_CONTACT) {\n        this.setState({\n          modalOpen: true,\n          errorMessage: \"\",\n          isLoading: false,\n          address: \"\"\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      size: \"small\"\n    }, __jsx(Header, {\n      icon: \"\",\n      content: \"Add contact by address\"\n    }), __jsx(Modal.Content, null, __jsx(Input, {\n      fluid: true,\n      value: this.state.address,\n      onChange: event => this.setState({\n        address: event.target.value\n      })\n    }), __jsx(Message, {\n      error: true,\n      header: this.state.errorMessage,\n      hidden: this.state.errorMessage == \"\"\n    })), __jsx(Modal.Actions, null, __jsx(Button, {\n      color: \"orange\",\n      onClick: this.handleAddContact\n    }, __jsx(Icon, {\n      name: \"checkmark\"\n    }), \" Add\"), __jsx(Button, {\n      color: \"grey\",\n      onClick: this.handleClose\n    }, __jsx(Icon, {\n      name: \"close\"\n    }), \" Close\")));\n  }\n\n}\n\nexport default AddContactModal;","map":null,"metadata":{},"sourceType":"module"}