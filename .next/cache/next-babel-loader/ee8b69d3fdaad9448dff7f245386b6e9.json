{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport web3 from '../ethereum/web3';\nimport compiledContract from '../ethereum/build/EtherChat.json';\nimport TransactionsManager from './TransactionManager';\nimport appDispatcher from './AppDispatcher';\nimport Config from '../support/Config';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils'; // import crypto from 'crypto';\n\n/**\r\n * Responsible for interacting with the Ethereum smart contract\r\n */\n\nvar ContractManager = /*#__PURE__*/function () {\n  function ContractManager(accountManager, storageManager) {\n    var _this = this;\n\n    _classCallCheck(this, ContractManager);\n\n    _defineProperty(this, \"getContract\", function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(new web3.eth.Contract(JSON.parse(compiledContract[\"interface\"]), Config.ENV.ContractAddress));\n\n            case 2:\n              _this.contract = _context.sent;\n              appDispatcher.dispatch({\n                action: Constant.EVENT.CONTRACT_READY\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"getProfile\", function _callee2(address) {\n      var result, profile;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(_this.contract.methods.members(_this.accountManager.getAddress()).call());\n\n            case 2:\n              result = _context2.sent;\n              profile = {};\n\n              if (result.isMember == 1) {\n                profile.isJoined = true;\n                profile.avatarUrl = utils.hexStringToAsciiString(result.avatarUrl);\n                profile.name = utils.hexStringToAsciiString(result.name);\n\n                _this.storageManager.setJoinedStatus(true);\n\n                _this.storageManager.setName(_this.name);\n\n                _this.storageManager.setAvatarUrl(_this.avatarUrl);\n\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.ACCOUNT_INFO_UPDATED,\n                  profile: profile\n                });\n              }\n\n              return _context2.abrupt(\"return\", profile);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"getMemberInfo\", function _callee3(address, relationship) {\n      var memberInfo, publicKey, name, avatarUrl;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_this.contract.methods.members(address).call());\n\n            case 2:\n              memberInfo = _context3.sent;\n\n              if (memberInfo.isMember) {\n                publicKey = '04' + memberInfo.publicKeyLeft.substr(2) + memberInfo.publicKeyRight.substr(2);\n                name = utils.hexStringToAsciiString(memberInfo.name);\n                avatarUrl = utils.hexStringToAsciiString(memberInfo.avatarUrl);\n\n                _this.storageManager.updateContact(address, publicKey, name, avatarUrl, relationship);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"getPastEvents\", function _callee4(eventName, filters) {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_this.contract.getPastEvents(eventName, filters));\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"addContact\", function _callee5(address, callback) {\n      var method;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(address);\n              method = _this.contract.methods.addContact(address);\n\n              _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\n              }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\n              }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.ENCOUNTERED_ERROR,\n                  message: error.message,\n                  title: \"Error\"\n                });\n                if (callback) callback(Constant.EVENT.ON_ERROR);\n              });\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"acceptContactRequest\", function _callee6(address, callback) {\n      var method;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              method = _this.contract.methods.acceptContactRequest(address);\n\n              _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\n              }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\n              }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.ENCOUNTERED_ERROR,\n                  message: error.message,\n                  title: \"Error\"\n                });\n                if (callback) callback(Constant.EVENT.ON_ERROR);\n              });\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"updateProfile\", function _callee7(name, avatarUrl, callback) {\n      var nameHex, avatarUrlHex, method;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              nameHex = '0x' + Buffer.from(name, 'ascii').toString('hex');\n              avatarUrlHex = '0x' + Buffer.from(avatarUrl, 'ascii').toString('hex');\n              method = _this.contract.methods.updateProfile(nameHex, avatarUrlHex);\n\n              _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\n              }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\n              }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.ENCOUNTERED_ERROR,\n                  message: error.message,\n                  title: \"Error\"\n                });\n                if (callback) callback(Constant.EVENT.ON_ERROR);\n              });\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"sendMessage\", function _callee8(toAddress, publicKey, message) {\n      var publicKeyBuffer, encryptedRaw, encryptedMessage, method;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              publicKeyBuffer = Buffer.from(publicKey, 'hex');\n              encryptedRaw = utils.encrypt(message, _this.accountManager.computeSecret(publicKeyBuffer));\n              encryptedMessage = '0x' + encryptedRaw.toString('hex');\n              method = _this.contract.methods.sendMessage(toAddress, encryptedMessage, utils.getEncryptAlgorithmInHex());\n\n              _this.transactionManager.executeMethod(method).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n                _this.storageManager.addMyLocalMessage(encryptedMessage, toAddress, utils.getEncryptAlgorithm(), txHash);\n\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.MESSAGES_UPDATED,\n                  data: toAddress\n                });\n              }).on(Constant.EVENT.ON_REJECTED, function (data) {// do nothing\n              }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n                _this.storageManager.updateLocalMessage(toAddress, receipt.transactionHash, Constant.SENT_STATUS.SUCCESS);\n\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.MESSAGES_UPDATED,\n                  data: toAddress\n                });\n              }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n                _this.storageManager.updateLocalMessage(toAddress, txHash, Constant.SENT_STATUS.FAILED);\n\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.MESSAGES_UPDATED,\n                  data: toAddress\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    });\n\n    this.getContract();\n    this.accountManager = accountManager;\n    this.storageManager = storageManager;\n    this.transactionManager = new TransactionsManager(accountManager);\n  } // Create a web3 contract object that represent the ethereum smart contract\n\n\n  _createClass(ContractManager, [{\n    key: \"joinContract\",\n    value: function joinContract(publicKeyBuffer, callback) {\n      var publicKeyLeft, publicKeyRight;\n      return _regeneratorRuntime.async(function joinContract$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              publicKeyLeft = '0x' + publicKeyBuffer.toString('hex', 0, 32);\n              publicKeyRight = '0x' + publicKeyBuffer.toString('hex', 32, 64);\n              this.transactionManager.executeMethod(this.contract.methods.join(publicKeyLeft, publicKeyRight)).on(Constant.EVENT.ON_APPROVED, function (txHash) {\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\n              }).on(Constant.EVENT.ON_REJECTED, function (txHash) {\n                if (callback) callback(Constant.EVENT.ON_REJECTED);\n              }).on(Constant.EVENT.ON_RECEIPT, function (receipt) {\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\n              }).on(Constant.EVENT.ON_ERROR, function (error, txHash) {\n                appDispatcher.dispatch({\n                  action: Constant.EVENT.ENCOUNTERED_ERROR,\n                  message: error.message,\n                  title: \"Error\"\n                });\n                if (callback) callback(Constant.EVENT.ON_ERROR);\n              });\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this);\n    } // joinContract = async (publicKeyBuffer, callback) => {\n\n  }]);\n\n  return ContractManager;\n}();\n\nexport default ContractManager;","map":{"version":3,"sources":["D:/BlockChat/BlockChat/core/ContractManager.js"],"names":["web3","compiledContract","TransactionsManager","appDispatcher","Config","Constant","utils","ContractManager","accountManager","storageManager","eth","Contract","JSON","parse","ENV","ContractAddress","contract","dispatch","action","EVENT","CONTRACT_READY","address","methods","members","getAddress","call","result","profile","isMember","isJoined","avatarUrl","hexStringToAsciiString","name","setJoinedStatus","setName","setAvatarUrl","ACCOUNT_INFO_UPDATED","relationship","memberInfo","publicKey","publicKeyLeft","substr","publicKeyRight","updateContact","eventName","filters","getPastEvents","callback","console","log","method","addContact","transactionManager","executeMethod","on","ON_APPROVED","txHash","ON_RECEIPT","receipt","ON_ERROR","error","ENCOUNTERED_ERROR","message","title","acceptContactRequest","nameHex","Buffer","from","toString","avatarUrlHex","updateProfile","toAddress","publicKeyBuffer","encryptedRaw","encrypt","computeSecret","encryptedMessage","sendMessage","getEncryptAlgorithmInHex","addMyLocalMessage","getEncryptAlgorithm","MESSAGES_UPDATED","data","ON_REJECTED","updateLocalMessage","transactionHash","SENT_STATUS","SUCCESS","FAILED","getContract","join"],"mappings":"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","sourcesContent":["import web3 from '../ethereum/web3';\r\nimport compiledContract from '../ethereum/build/EtherChat.json';\r\nimport TransactionsManager from './TransactionManager';\r\nimport appDispatcher from './AppDispatcher';\r\nimport Config from '../support/Config';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\n// import crypto from 'crypto';\r\n\r\n/**\r\n * Responsible for interacting with the Ethereum smart contract\r\n */\r\n\r\nclass ContractManager {\r\n    constructor(accountManager, storageManager) {\r\n        this.getContract();\r\n        this.accountManager = accountManager;\r\n        this.storageManager = storageManager;\r\n        this.transactionManager = new TransactionsManager(accountManager);\r\n    }\r\n\r\n    // Create a web3 contract object that represent the ethereum smart contract\r\n    getContract = async () => {\r\n        this.contract = await new web3.eth.Contract(JSON.parse(compiledContract.interface), \r\n                Config.ENV.ContractAddress);\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.CONTRACT_READY\r\n        })\r\n    }\r\n\r\n    // Get current account profile from EtherChat contract's storage\r\n    getProfile = async (address) => {\r\n        var result = await this.contract.methods.members(this.accountManager.getAddress()).call();\r\n        var profile = {};\r\n        if (result.isMember == 1) {\r\n            profile.isJoined = true;\r\n            profile.avatarUrl = utils.hexStringToAsciiString(result.avatarUrl);\r\n            profile.name = utils.hexStringToAsciiString(result.name);\r\n\r\n            this.storageManager.setJoinedStatus(true);\r\n            this.storageManager.setName(this.name);\r\n            this.storageManager.setAvatarUrl(this.avatarUrl);\r\n            \r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ACCOUNT_INFO_UPDATED,\r\n                profile: profile\r\n            })\r\n        }\r\n        return profile;\r\n    }\r\n\r\n    getMemberInfo = async (address, relationship) => {\r\n        var memberInfo = await this.contract.methods.members(address).call();\r\n        if (memberInfo.isMember) {\r\n            var publicKey = '04' + memberInfo.publicKeyLeft.substr(2) + memberInfo.publicKeyRight.substr(2);\r\n            var name = utils.hexStringToAsciiString(memberInfo.name);\r\n            var avatarUrl = utils.hexStringToAsciiString(memberInfo.avatarUrl);\r\n            this.storageManager.updateContact(address, publicKey, name, avatarUrl, relationship);\r\n        }\r\n    }\r\n\r\n    getPastEvents = async (eventName, filters) => {\r\n        return await this.contract.getPastEvents(eventName, filters);\r\n    }\r\n\r\n    async joinContract(publicKeyBuffer, callback) {\r\n        var publicKeyLeft = '0x' + publicKeyBuffer.toString('hex', 0, 32);\r\n    var publicKeyRight = '0x' + publicKeyBuffer.toString('hex', 32, 64);\r\n\r\n    this.transactionManager.executeMethod(this.contract.methods.join(publicKeyLeft, publicKeyRight))\r\n        .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n            if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n        })\r\n        .on(Constant.EVENT.ON_REJECTED, (txHash) => {\r\n            if (callback) callback(Constant.EVENT.ON_REJECTED);\r\n        })\r\n        .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n            if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n        })\r\n        .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: error.message,\r\n                title: \"Error\"\r\n            });\r\n            if (callback) callback(Constant.EVENT.ON_ERROR);\r\n        });\r\n    }\r\n    \r\n\r\n    // joinContract = async (publicKeyBuffer, callback) => {\r\n\r\n    addContact = async (address, callback) => {\r\n        console.log(address);\r\n\r\n        var method = this.contract.methods.addContact(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    acceptContactRequest = async (address, callback) => {\r\n        var method = this.contract.methods.acceptContactRequest(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    updateProfile = async (name, avatarUrl, callback) => {\r\n        var nameHex = '0x' + Buffer.from(name, 'ascii').toString('hex');\r\n        var avatarUrlHex = '0x' + Buffer.from(avatarUrl, 'ascii').toString('hex');\r\n        var method = this.contract.methods.updateProfile(nameHex, avatarUrlHex);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    // A message will be encrypted locally before sending to the smart contract\r\n    sendMessage = async (toAddress, publicKey, message) => {\r\n        var publicKeyBuffer = Buffer.from(publicKey, 'hex');\r\n        var encryptedRaw = utils.encrypt(message, this.accountManager.computeSecret(publicKeyBuffer));\r\n        var encryptedMessage = '0x' + encryptedRaw.toString('hex');\r\n        var method = this.contract.methods.sendMessage(toAddress, encryptedMessage, utils.getEncryptAlgorithmInHex());\r\n\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                this.storageManager.addMyLocalMessage(encryptedMessage, toAddress, utils.getEncryptAlgorithm(), txHash);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_REJECTED, (data) => {\r\n                // do nothing\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt, ) => {\r\n                this.storageManager.updateLocalMessage(toAddress, receipt.transactionHash, Constant.SENT_STATUS.SUCCESS);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                this.storageManager.updateLocalMessage(toAddress, txHash, Constant.SENT_STATUS.FAILED);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport default ContractManager;"]},"metadata":{},"sourceType":"module"}