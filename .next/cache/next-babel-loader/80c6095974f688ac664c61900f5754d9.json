{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport appDispatcher from '../core/AppDispatcher';\nimport Constant from '../support/Constant';\nimport utils from '../support/Utils';\n\nclass LocalStorageManager {\n  constructor() {\n    _defineProperty(this, \"loadLocalContactAddresses\", () => {\n      this.contactAddresses = []; // A list of Ethereum addresses in the contact list of the current user.\n\n      if (typeof Storage != 'undefined') {\n        var rawContactAddresses = window.localStorage.contactAddresses;\n\n        if (rawContactAddresses != undefined) {\n          this.contactAddresses = JSON.parse(rawContactAddresses);\n        }\n      }\n    });\n\n    _defineProperty(this, \"loadContactMessages\", () => {\n      if (typeof Storage != 'undefined') {\n        for (var i = 0; i < this.contactAddresses.length; i++) {\n          var address = this.contactAddresses[i];\n          var localContact = window.localStorage[address];\n          this.contacts[address] = JSON.parse(localContact);\n        }\n      }\n    });\n\n    _defineProperty(this, \"addContact\", (address, relationship) => {\n      var data = this.contacts[address];\n\n      if (data == undefined) {\n        var member = {};\n        member.messages = [];\n        member.relationship = relationship;\n        window.localStorage.setItem(address, JSON.stringify(member));\n        this.contacts[address] = member;\n        this.contactAddresses.push(address);\n        window.localStorage.setItem('contactAddresses', JSON.stringify(this.contactAddresses));\n      }\n    });\n\n    _defineProperty(this, \"updateContact\", (address, publicKey, name, avatarUrl, relationship) => {\n      var data = this.contacts[address];\n\n      if (data != undefined) {\n        if (data.relationship < relationship) {\n          data.relationship = relationship;\n        }\n\n        if (publicKey) {\n          data.publicKey = publicKey;\n        }\n\n        if (name) {\n          data.name = name;\n        }\n\n        if (avatarUrl) {\n          data.avatarUrl = avatarUrl;\n        }\n\n        window.localStorage.setItem(address, JSON.stringify(data));\n      }\n    });\n\n    _defineProperty(this, \"addInvitationEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.addContact(events[i].returnValues[\"from\"], Constant.Relationship.NoRelation);\n      }\n    });\n\n    _defineProperty(this, \"addRequestEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.addContact(events[i].returnValues[\"to\"], Constant.Relationship.Requested);\n      }\n    });\n\n    _defineProperty(this, \"addMyAcceptContactEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.updateContact(events[i].returnValues[\"to\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addAcceptContactEvents\", events => {\n      for (var i = 0; i < events.length; i++) {\n        this.updateContact(events[i].returnValues[\"from\"], \"\", \"\", \"\", Constant.Relationship.Connected);\n      }\n    });\n\n    _defineProperty(this, \"addMessageFromFriendEvent\", event => {\n      var data = event.returnValues;\n      var fromAddress = data.from;\n      var message = {};\n      message.isMine = false;\n      message.message = data.message;\n      message.encryption = utils.hexStringToAsciiString(data.encryption);\n      message.txHash = event.transactionHash;\n      this.contacts[fromAddress].messages.push(message);\n      window.localStorage.setItem(fromAddress, JSON.stringify(this.contacts[fromAddress]));\n    });\n\n    _defineProperty(this, \"addMyMessageEvent\", event => {\n      var data = event.returnValues;\n      var localMessages = this.contacts[data.to];\n      var noMatchingItem = true;\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (event.transactionHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = Constant.SENT_STATUS.SUCCESS;\n          window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\n          noMatchingItem = false;\n        }\n      }\n\n      if (noMatchingItem) {\n        var message = {};\n        message.isMine = true;\n        message.message = data.message;\n        message.encryption = utils.hexStringToAsciiString(data.encryption);\n        message.txHash = event.transactionHash;\n        localMessages.messages.push(message);\n        window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\n      }\n    });\n\n    _defineProperty(this, \"addMyLocalMessage\", (message, to, encryption, txHash) => {\n      var message = {\n        message,\n        encryption,\n        txHash\n      };\n      message.status = Constant.SENT_STATUS.PENDING;\n      message.isMine = true;\n      this.contacts[to].messages.push(message);\n      window.localStorage.setItem(to, JSON.stringify(this.contacts[to]));\n    });\n\n    _defineProperty(this, \"updateLocalMessage\", (toAddress, txHash, status) => {\n      var localMessages = this.contacts[toAddress];\n\n      for (var i = localMessages.messages.length - 1; i >= 0; i--) {\n        if (txHash == localMessages.messages[i].txHash) {\n          localMessages.messages[i].status = status;\n          window.localStorage.setItem(toAddress, JSON.stringify(this.contacts[toAddress]));\n        }\n      }\n    });\n\n    _defineProperty(this, \"clearMessages\", contacts => {\n      window.localStorage.setItem('currentDataBlock', \"0\");\n      window.localStorage.removeItem('contactAddresses');\n\n      for (var i = 0; i < contacts.length; i++) {\n        window.localStorage.removeItem(contacts[i]);\n      }\n    });\n  }\n\n  initialize() {\n    this.contacts = {}; // Map Ethereum addresses with all messages and information belong to an address\n\n    this.loadLocalContactAddresses();\n    this.loadContactMessages();\n    appDispatcher.dispatch({\n      action: Constant.EVENT.CONTACT_LIST_UPDATED\n    });\n  }\n\n  storePrivateKeyAndAddress(privateKey, address) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem(\"privateKey\", privateKey);\n      window.localStorage.setItem(\"address\", address);\n      window.localStorage.setItem(\"currentDataBlock\", \"0\");\n      window.localStorage.setItem(\"ethNetwork\", \"4\");\n    }\n  }\n\n  getPrivateKey() {\n    if (typeof Storage !== 'undefined') {\n      return window.localStorage.privateKey;\n    }\n  }\n\n  getAddress() {\n    if (typeof Storage !== 'undefined') {\n      return window.localStorage.address;\n    }\n  }\n\n  setBalance(balance) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('balance', balance);\n    }\n  }\n\n  getBalance() {\n    if (typeof Storage !== 'undefined' && window.localStorage.balance != undefined) {\n      return window.localStorage.balance;\n    } else {\n      return \"0\";\n    }\n  }\n\n  setName(name) {\n    if (typeof Storage !== 'undefined' && name != \"\") {\n      window.localStorage.setItem('name', name);\n    }\n  }\n\n  getName() {\n    if (typeof Storage !== 'undefined' && window.localStorage.name != undefined) {\n      return window.localStorage.name;\n    } else {\n      return \"\";\n    }\n  }\n\n  setAvatarUrl(avatarUrl) {\n    if (typeof Storage !== 'undefined' && avatarUrl) {\n      window.localStorage.setItem('avatarUrl', avatarUrl);\n    }\n  }\n\n  getAvatarUrl() {\n    if (typeof Storage !== 'undefined' && window.localStorage.avatarUrl != undefined) {\n      return window.localStorage.avatarUrl;\n    } else {\n      return \"\";\n    }\n  }\n\n  setJoinedStatus(isJoined) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('isJoined', isJoined);\n    }\n  }\n\n  getJoinedStatus() {\n    if (typeof Storage !== 'undefined' && window.localStorage.isJoined != undefined) {\n      return window.localStorage.isJoined;\n    } else {\n      return false;\n    }\n  } // Get current block number of contract events' data (message events, invitation events...)\n\n\n  getCurrentDataBlock() {\n    return parseInt(window.localStorage.currentDataBlock);\n  }\n\n  setCurrentDataBlock(blockNumber) {\n    window.localStorage.setItem('currentDataBlock', blockNumber);\n  }\n\n  setAskForTransactionApproval(boolValue) {\n    if (typeof Storage !== 'undefined') {\n      window.localStorage.setItem('askForTransactionApproval', boolValue);\n    }\n  }\n\n  getAskForTransactionApproval() {\n    if (typeof Storage !== 'undefined' && window.localStorage.askForTransactionApproval) {\n      return window.localStorage.askForTransactionApproval == \"true\";\n    } else {\n      return false;\n    }\n  }\n\n  removeNetworkDependentData() {\n    if (typeof Storage !== 'undefined') {\n      var rawAddresses = window.localStorage.contactAddresses;\n\n      if (rawAddresses != undefined) {\n        var addresses = JSON.parse(rawAddresses);\n\n        for (var i = 0; i < addresses.length; i++) {\n          window.localStorage.removeItem(addresses[i]);\n        }\n\n        window.localStorage.removeItem('contactAddresses');\n      }\n\n      window.localStorage.removeItem('balance');\n      window.localStorage.removeItem('isJoined');\n      window.localStorage.removeItem('name');\n      window.localStorage.removeItem('avatarUrl');\n      window.localStorage.setItem('currentDataBlock', '0');\n    }\n  }\n\n}\n\nexport default LocalStorageManager;","map":null,"metadata":{},"sourceType":"module"}