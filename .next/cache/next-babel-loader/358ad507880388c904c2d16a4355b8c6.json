{"ast":null,"code":"var crypto = require('crypto');\n\nvar wallet = require('ethereumjs-wallet');\n\nvar algorithm = 'aes256';\n\nmodule.exports.getEncryptAlgorithm = function () {\n  return algorithm;\n};\n\nmodule.exports.getEncryptAlgorithmInHex = function () {\n  return '0x' + Buffer.from(algorithm, 'ascii').toString('hex');\n};\n\nmodule.exports.hexStringToAsciiString = function (hexString) {\n  if (hexString.startsWith('0x')) {\n    hexString = hexString.substr(2);\n  }\n\n  return Buffer.from(hexString, 'hex').toString('ascii').replace(/\\0/g, '');\n};\n\nmodule.exports.privateToPublic = function (privateKey) {\n  var account = crypto.createECDH('secp256k1');\n  account.setPrivateKey(privateKey);\n  return account.getPublicKey().slice(1);\n};\n\nmodule.exports.computeSecret = function (privateKeyFromA, publicKeyFromB) {\n  var A = crypto.createECDH('secp256k1');\n  A.setPrivateKey(privateKeyFromA);\n  return A.computeSecret(publicKeyFromB);\n};\n\nexports.encrypt = function (message, secret) {\n  var cipher = crypto.createCipher(algorithm, secret);\n  var crypted = cipher.update(message, 'utf8', 'hex');\n  crypted += cipher[\"final\"]('hex');\n  return crypted;\n};\n\nexports.decrypt = function (encryptedMessage, secret) {\n  var decipher = crypto.createDecipher(algorithm, secret);\n  var dec = decipher.update(encryptedMessage, 'hex', 'utf8');\n  dec += decipher[\"final\"]('utf8');\n  return dec;\n}; // exports.getPubkeyFromTransaction = (rawTx) => {\n//       var localTx = {\n//         nonce: parseInt(rawTx.nonce),\n//         gasPrice: parseInt(rawTx.gasPrice),\n//         gasLimit: parseInt(rawTx.gas),\n//         to: rawTx.to,\n//         value: parseInt(rawTx.value),\n//         r: rawTx.r,\n//         s: rawTx.s,\n//         v: rawTx.v,\n//         data: rawTx.input,\n//       };\n//     var txInstance = new Transaction(localTx);\n//     return txInstance.getSenderPublicKey().toString('hex');\n//   }","map":null,"metadata":{},"sourceType":"script"}