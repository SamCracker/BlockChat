{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./core/AccountManager.js","webpack:///./core/AppDispatcher.js","webpack:///./core/AppManager.js","webpack:///./core/ContractManager.js","webpack:///./core/EventHandler.js","webpack:///./core/LocalStorageManager.js","webpack:///./core/TransactionManager.js","webpack:///./ethereum/web3.js","webpack:///./pages/index.js","webpack:///./support/Config.js","webpack:///./support/Constant.js","webpack:///./support/Utils.js","webpack:///./views/Chat.js","webpack:///./views/ContactList.js","webpack:///./views/Footer.js","webpack:///./views/HeaderMenu.js","webpack:///./views/modals/AddContactModal.js","webpack:///./views/modals/EnterPrivateKeyModal.js","webpack:///./views/modals/ErrorModal.js","webpack:///./views/modals/GuideModal.js","webpack:///./views/modals/SettingsModal.js","webpack:///./views/modals/TransactionModal.js","webpack:///./views/modals/UpdateProfileModal.js","webpack:///external \"crypto\"","webpack:///external \"ethereumjs-tx\"","webpack:///external \"ethereumjs-util\"","webpack:///external \"ethereumjs-wallet\"","webpack:///external \"events\"","webpack:///external \"flux\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"web3\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { sha256 } from 'ethereumjs-util';\r\n\r\nimport Wallet from 'ethereumjs-wallet';\r\nimport crypto from 'crypto';\r\nimport web3 from '../ethereum/web3';\r\nimport utils from '../support/Utils';\r\nimport EventHandler from './EventHandler';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport TransactionManager from './TransactionManager';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\n\r\nclass AccountManager {\r\n    constructor(storageManager) {\r\n        this.isJoined = false;\r\n        this.balance = 0;\r\n        this.name = \"\";\r\n        this.avatarUrl = \"\";\r\n        this.storageManager = storageManager;\r\n        this.loadPrivateKey();\r\n        this.loadInfoFromstorageManager();\r\n    }\r\n\r\n    loadInfoFromstorageManager = () => {\r\n        this.balance = this.storageManager.getBalance();\r\n        this.name = this.storageManager.getName();\r\n        this.avatarUrl = this.storageManager.getAvatarUrl();\r\n        this.isJoined = this.storageManager.getJoinedStatus();\r\n        this.askForTransactionApproval = this.storageManager.getAskForTransactionApproval();\r\n    }\r\n\r\n    setProfile = (name, avatarUrl, isJoined) => {\r\n        this.name = name;\r\n        this.avatarUrl = avatarUrl;\r\n        this.isJoined = isJoined;\r\n    }\r\n\r\n    // Update balance of the current account\r\n    updateBalance = async () => {\r\n        this.balance = await web3.eth.getBalance(this.walletAccount.getAddress().toString('hex'));\r\n        this.storageManager.setBalance(this.balance);\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.ACCOUNT_BALANCE_UPDATED\r\n        })\r\n    }\r\n\r\n    setAskForTransactionApproval = (askForApproval) => {\r\n        this.storageManager.setAskForTransactionApproval(askForApproval);\r\n        this.askForTransactionApproval = askForApproval;\r\n    }\r\n\r\n    // Load private key from browser's local storage\r\n    loadPrivateKey = () => {\r\n        var privateKeyHex = this.storageManager.getPrivateKey();\r\n        if (privateKeyHex) {\r\n            var privateKeyBuffer = Buffer.from(privateKeyHex, 'hex');\r\n            this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\r\n            this.updateBalance();\r\n        }\r\n    }\r\n\r\n    storePrivateKey = (privateKey) => {\r\n        var isValid = false;\r\n        try {\r\n            var privateKeyBuffer = Buffer.from(privateKey, 'hex');\r\n            this.walletAccount = Wallet.fromPrivateKey(privateKeyBuffer);\r\n            this.storageManager.storePrivateKeyAndAddress(privateKey, this.getAddress());\r\n            isValid = true;\r\n        } catch (err) {\r\n        }\r\n        this.updateBalance();\r\n        return isValid;\r\n    }\r\n\r\n    getPublicKeyBuffer() {\r\n        return this.walletAccount.getPublicKey();\r\n    }\r\n\r\n    getPrivateKeyBuffer() {\r\n        return this.walletAccount.getPrivateKey();\r\n    }\r\n\r\n    getAddress = () => {\r\n        if (this.walletAccount) {\r\n            return '0x' + this.walletAccount.getAddress().toString('hex');\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // Compute a secret key for messages encryption/decryption\r\n    computeSecret = (publicKeyBuffer) => {\r\n        var a = crypto.createECDH('secp256k1');\r\n        a.generateKeys();\r\n        a.setPrivateKey(this.getPrivateKeyBuffer());\r\n        return a.computeSecret(publicKeyBuffer);\r\n    }\r\n}\r\n\r\nexport default AccountManager;","import {Dispatcher} from 'flux';\r\n\r\nvar appDispatcher = new Dispatcher();\r\n\r\nexport default appDispatcher;","import AccountManager from './AccountManager'\r\nimport LocalStorageManager from './LocalStorageManager'\r\nimport ContractManager from './ContractManager'\r\nimport EventHandler from './EventHandler'\r\nimport appDispatcher from './AppDispatcher';\r\nimport Constant from '../support/Constant';\r\n\r\n/**\r\n * Manage all core components of this web app includes:\r\n *  - contractManager: to interactive with EtherChat smart contract\r\n *  - storageManager: store/retrive data from window.localStorage\r\n *  - account: manage the local ethereum account\r\n * \r\n * Only one instance of the App manager will be created.\r\n */\r\n\r\nclass AppManager {\r\n    initialize() {\r\n        this.storageManager = new LocalStorageManager();\r\n        this.storageManager.initialize();\r\n\r\n        this.account = new AccountManager(this.storageManager);\r\n        this.contractManager = new ContractManager(this.account, this.storageManager);\r\n\r\n        // Need to wait until the smart contract instance in this.contractManager is ready for using\r\n        // because it will take sometime to create the web3 contract instance.\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTRACT_READY) {\r\n                var accountAddress = this.account.getAddress();\r\n                if (accountAddress) {\r\n                    this.startEventHandler();\r\n                    this.getProfileFromContract();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getProfileFromContract = async () => {\r\n        var profile = await this.contractManager.getProfile();\r\n        this.account.setProfile(profile.name, profile.avatarUrl, profile.isJoined);\r\n    }\r\n\r\n    // Start to listen to EtherChat's events\r\n    startEventHandler = (accountAddress) => {\r\n        this.eventHandler = new EventHandler(accountAddress, this.contractManager, this.storageManager);\r\n        this.eventHandler.start();\r\n    }\r\n\r\n    getTransactionDispatcher() {\r\n        if (this.contractManager) {\r\n            return this.contractManager.transactionManager.dispatcher;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppManager;","import web3 from '../ethereum/web3';\r\nimport compiledContract from '../ethereum/build/EtherChat.json';\r\nimport TransactionsManager from './TransactionManager';\r\nimport appDispatcher from './AppDispatcher';\r\nimport Config from '../support/Config';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\nimport crypto from 'crypto';\r\n\r\n/**\r\n * Responsible for interacting with the Ethereum smart contract\r\n */\r\n\r\nclass ContractManager {\r\n    constructor(accountManager, storageManager) {\r\n        this.getContract();\r\n        this.accountManager = accountManager;\r\n        this.storageManager = storageManager;\r\n        this.transactionManager = new TransactionsManager(accountManager);\r\n    }\r\n\r\n    // Create a web3 contract object that represent the ethereum smart contract\r\n    getContract = async () => {\r\n        this.contract = await new web3.eth.Contract(JSON.parse(compiledContract.interface), \r\n                Config.ENV.ContractAddress);\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.CONTRACT_READY\r\n        })\r\n    }\r\n\r\n    // Get current account profile from EtherChat contract's storage\r\n    getProfile = async (address) => {\r\n        var result = await this.contract.methods.members(this.accountManager.getAddress()).call();\r\n        var profile = {};\r\n        if (result.isMember == 1) {\r\n            profile.isJoined = true;\r\n            profile.avatarUrl = utils.hexStringToAsciiString(result.avatarUrl);\r\n            profile.name = utils.hexStringToAsciiString(result.name);\r\n\r\n            this.storageManager.setJoinedStatus(true);\r\n            this.storageManager.setName(this.name);\r\n            this.storageManager.setAvatarUrl(this.avatarUrl);\r\n            \r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ACCOUNT_INFO_UPDATED,\r\n                profile: profile\r\n            })\r\n        }\r\n        return profile;\r\n    }\r\n\r\n    getMemberInfo = async (address, relationship) => {\r\n        var memberInfo = await this.contract.methods.members(address).call();\r\n        if (memberInfo.isMember) {\r\n            var publicKey = '04' + memberInfo.publicKeyLeft.substr(2) + memberInfo.publicKeyRight.substr(2);\r\n            var name = utils.hexStringToAsciiString(memberInfo.name);\r\n            var avatarUrl = utils.hexStringToAsciiString(memberInfo.avatarUrl);\r\n            this.storageManager.updateContact(address, publicKey, name, avatarUrl, relationship);\r\n        }\r\n    }\r\n\r\n    getPastEvents = async (eventName, filters) => {\r\n        return await this.contract.getPastEvents(eventName, filters);\r\n    }\r\n\r\n    joinContract = async(publicKeyBuffer, callback) => {\r\n        var publicKeyLeft = '0x' + publicKeyBuffer.toString('hex', 0, 32);\r\n        var publicKeyRight = '0x' + publicKeyBuffer.toString('hex', 32, 64);\r\n\r\n        this.transactionManager.executeMethod(this.contract.methods.join(publicKeyLeft, publicKeyRight))\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_REJECTED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_REJECTED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n    // joinContract = async (publicKeyBuffer, callback) => {\r\n\r\n    addContact = async (address, callback) => {\r\n        console.log(address);\r\n\r\n        var method = this.contract.methods.addContact(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    acceptContactRequest = async (address, callback) => {\r\n        var method = this.contract.methods.acceptContactRequest(address);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    updateProfile = async (name, avatarUrl, callback) => {\r\n        var nameHex = '0x' + Buffer.from(name, 'ascii').toString('hex');\r\n        var avatarUrlHex = '0x' + Buffer.from(avatarUrl, 'ascii').toString('hex');\r\n        var method = this.contract.methods.updateProfile(nameHex, avatarUrlHex);\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                if (callback) callback(Constant.EVENT.ON_APPROVED);\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt) => {\r\n                if (callback) callback(Constant.EVENT.ON_RECEIPT);\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                    message: error.message,\r\n                    title: \"Error\"\r\n                });\r\n                if (callback) callback(Constant.EVENT.ON_ERROR);\r\n            });\r\n    }\r\n\r\n    // A message will be encrypted locally before sending to the smart contract\r\n    sendMessage = async (toAddress, publicKey, message) => {\r\n        var publicKeyBuffer = Buffer.from(publicKey, 'hex');\r\n        var encryptedRaw = utils.encrypt(message, this.accountManager.computeSecret(publicKeyBuffer));\r\n        var encryptedMessage = '0x' + encryptedRaw.toString('hex');\r\n        var method = this.contract.methods.sendMessage(toAddress, encryptedMessage, utils.getEncryptAlgorithmInHex());\r\n\r\n        this.transactionManager.executeMethod(method)\r\n            .on(Constant.EVENT.ON_APPROVED, (txHash) => {\r\n                this.storageManager.addMyLocalMessage(encryptedMessage, toAddress, utils.getEncryptAlgorithm(), txHash);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_REJECTED, (data) => {\r\n                // do nothing\r\n            })\r\n            .on(Constant.EVENT.ON_RECEIPT, (receipt, ) => {\r\n                this.storageManager.updateLocalMessage(toAddress, receipt.transactionHash, Constant.SENT_STATUS.SUCCESS);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            })\r\n            .on(Constant.EVENT.ON_ERROR, (error, txHash) => {\r\n                this.storageManager.updateLocalMessage(toAddress, txHash, Constant.SENT_STATUS.FAILED);\r\n                appDispatcher.dispatch({\r\n                    action: Constant.EVENT.MESSAGES_UPDATED,\r\n                    data: toAddress\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport default ContractManager;","import web3 from '../ethereum/web3';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\n\r\n// EventHandler object currently make requests to the smart contract periodically \r\n//    to get events initiated by the contract.\r\n\r\nclass EventHandler {\r\n    constructor(myAddress, contractManager, storageManager) {\r\n        this.myAddress = myAddress;\r\n        this.contractManager = contractManager;\r\n        this.storageManager = storageManager;\r\n    }\r\n\r\n    pullContactEvents = async (blockNumber, currentDataBlock) => {\r\n\r\n        // Get list of invitation requests that the current user sent\r\n        var myRequestEvents = await this.contractManager.getPastEvents('addContactEvent', {\r\n            filter: {from: this.myAddress},\r\n            fromBlock: currentDataBlock+1,\r\n            toBlock: blockNumber\r\n        });\r\n        this.storageManager.addRequestEvents(myRequestEvents);\r\n\r\n        // Get list of invitation requests from other users send to the current user\r\n        var invitationEvents = await this.contractManager.getPastEvents('addContactEvent', {\r\n            filter: {to: this.myAddress},\r\n            fromBlock: currentDataBlock+1,\r\n            toBlock: blockNumber\r\n        });\r\n        this.storageManager.addInvitationEvents(invitationEvents);\r\n\r\n        for (var i=0;i<myRequestEvents.length;i++) {\r\n            await this.contractManager.getMemberInfo(myRequestEvents[i].returnValues.to, Constant.Relationship.Requested);\r\n        }\r\n        for (var i=0;i<invitationEvents.length;i++) {\r\n            await this.contractManager.getMemberInfo(invitationEvents[i].returnValues.from, Constant.Relationship.NoRelation);\r\n        }\r\n\r\n        var myAcceptContactEvents = await this.contractManager.getPastEvents('acceptContactEvent', {\r\n            filter: {from: this.myAddress},\r\n            fromBlock: currentDataBlock+1,\r\n            toBlock: blockNumber\r\n        });\r\n        this.storageManager.addMyAcceptContactEvents(myAcceptContactEvents);\r\n\r\n        var acceptContactEvents = await this.contractManager.getPastEvents('acceptContactEvent', {\r\n            filter: {to: this.myAddress},\r\n            fromBlock: currentDataBlock+1,\r\n            toBlock: blockNumber\r\n        });\r\n        this.storageManager.addAcceptContactEvents(acceptContactEvents);\r\n\r\n        // If the one who accept our contact doesn't have publicKey yet \r\n        // we need to get it from the smart contract\r\n        for (var i=0;i<acceptContactEvents.length;i++) {\r\n            var fromAddress = acceptContactEvents[i].returnValues.from;\r\n            if (!this.storageManager.contacts[fromAddress].publicKey) {\r\n                await this.contractManager.getMemberInfo(fromAddress, Constant.Relationship.Connected);\r\n            }\r\n        }\r\n\r\n        // Get profile update event to check if anyone in the current user contact list has updated their profile\r\n        var profileUpdateEvents = await this.contractManager.getPastEvents('profileUpdateEvent', {\r\n            filter: {from: this.storageManager.contactAddresses},\r\n            fromBlock: currentDataBlock + 1,\r\n            toBlock: blockNumber\r\n        });\r\n        \r\n        for (var i=0;i<profileUpdateEvents.length;i++) {\r\n            var eventData = profileUpdateEvents[i].returnValues;\r\n            this.storageManager.updateContact(eventData.from, \"\", \r\n                utils.hexStringToAsciiString(eventData.name), \r\n                utils.hexStringToAsciiString(eventData.avatarUrl), 0);\r\n        }\r\n\r\n        if (myRequestEvents.length > 0 || invitationEvents.length > 0 || \r\n            profileUpdateEvents.length > 0 || myAcceptContactEvents.length > 0 || \r\n            acceptContactEvents.length > 0) {\r\n\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.CONTACT_LIST_UPDATED\r\n            })\r\n        }\r\n    }\r\n\r\n    pullMessageEvents = async (blockNumber, currentDataBlock) => {\r\n        var messagesSent = await this.contractManager.getPastEvents('messageSentEvent', {\r\n            filter: {from: this.myAddress},\r\n            fromBlock: currentDataBlock + 1,\r\n            toBlock: blockNumber\r\n        });\r\n        var messagesReceived = await this.contractManager.getPastEvents('messageSentEvent', {\r\n            filter: {to: this.myAddress},\r\n            fromBlock: currentDataBlock + 1,\r\n            toBlock: blockNumber\r\n        });\r\n\r\n        var iSent=0;\r\n        var iReceived=0;\r\n        while (iSent < messagesSent.length || iReceived < messagesReceived.length) {\r\n            if (iSent >= messagesSent.length) {\r\n                this.storageManager.addMessageFromFriendEvent(messagesReceived[iReceived]);\r\n                iReceived++;\r\n            } else if (iReceived >= messagesReceived.length) {\r\n                this.storageManager.addMyMessageEvent(messagesSent[iSent]);\r\n                iSent++;\r\n            } else {\r\n                if (messagesSent[iSent].blockNumber < messagesReceived[iReceived].blockNumber) {\r\n                    this.storageManager.addMyMessageEvent(messagesSent[iSent]);\r\n                    iSent++;\r\n                } else {\r\n                    this.storageManager.addMessageFromFriendEvent(messagesReceived[iReceived]);\r\n                    iReceived++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messagesReceived.length > 0 || messagesSent.length > 0) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.MESSAGES_UPDATED,\r\n            })\r\n        }\r\n    }\r\n\r\n    pullEvents = async () => {\r\n        try {\r\n            // Get the last updated block number\r\n            var currentDataBlock = this.storageManager.getCurrentDataBlock();\r\n\r\n            var blockNumber = await web3.eth.getBlockNumber();\r\n\r\n            if (blockNumber > currentDataBlock) {\r\n                await this.pullContactEvents(blockNumber, currentDataBlock);\r\n                await this.pullMessageEvents(blockNumber, currentDataBlock);\r\n                this.storageManager.setCurrentDataBlock(blockNumber);\r\n            \r\n            }\r\n        } catch (err) {\r\n            console.log(err.message);\r\n        }\r\n\r\n        setTimeout(this.pullEvents, 5000);\r\n    }\r\n\r\n    start = () => {\r\n        this.pullEvents();\r\n    }\r\n}\r\n\r\nexport default EventHandler;","import appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport utils from '../support/Utils';\r\n\r\nclass LocalStorageManager {\r\n    initialize() {\r\n        this.contacts = {}; // Map Ethereum addresses with all messages and information belong to an address\r\n        this.loadLocalContactAddresses();\r\n        this.loadContactMessages();\r\n        appDispatcher.dispatch({\r\n            action: Constant.EVENT.CONTACT_LIST_UPDATED\r\n        });\r\n    }\r\n\r\n    loadLocalContactAddresses = () => {\r\n        this.contactAddresses = []; // A list of Ethereum addresses in the contact list of the current user.\r\n        if (typeof(Storage) != 'undefined') {\r\n            var rawContactAddresses = window.localStorage.contactAddresses;\r\n            if (rawContactAddresses != undefined) {\r\n                this.contactAddresses = JSON.parse(rawContactAddresses);\r\n            }\r\n        }\r\n    }\r\n\r\n    loadContactMessages = () => {\r\n        if (typeof(Storage) != 'undefined') {\r\n            for (var i=0;i<this.contactAddresses.length;i++) {\r\n                var address = this.contactAddresses[i];\r\n                var localContact = window.localStorage[address];\r\n                this.contacts[address] = JSON.parse(localContact);\r\n            }\r\n        }\r\n    }\r\n\r\n    addContact = (address, relationship) => {\r\n        var data = this.contacts[address];\r\n        if (data == undefined) {\r\n            var member = {};\r\n            member.messages = [];\r\n            member.relationship = relationship;\r\n            window.localStorage.setItem(address, JSON.stringify(member));\r\n            this.contacts[address] = member;\r\n\r\n            this.contactAddresses.push(address);\r\n            window.localStorage.setItem('contactAddresses', JSON.stringify(this.contactAddresses));\r\n        }\r\n    }\r\n\r\n    updateContact = (address, publicKey, name, avatarUrl, relationship) => {\r\n        var data = this.contacts[address];\r\n        if (data != undefined) {\r\n            if (data.relationship < relationship) {\r\n                data.relationship = relationship;\r\n            }\r\n            if (publicKey) {\r\n                data.publicKey = publicKey;\r\n            }\r\n            if (name) {\r\n                data.name = name;\r\n            }\r\n            if (avatarUrl) {\r\n                data.avatarUrl = avatarUrl;\r\n            }\r\n            window.localStorage.setItem(address, JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    addInvitationEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.addContact(events[i].returnValues[\"from\"], Constant.Relationship.NoRelation);\r\n        }\r\n    }\r\n\r\n    addRequestEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.addContact(events[i].returnValues[\"to\"], Constant.Relationship.Requested);\r\n        }\r\n    }\r\n\r\n    addMyAcceptContactEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.updateContact(events[i].returnValues[\"to\"], \"\", \"\", \"\", Constant.Relationship.Connected);\r\n        }\r\n    }\r\n\r\n    addAcceptContactEvents = (events) => {\r\n        for (var i=0;i<events.length;i++) {\r\n            this.updateContact(events[i].returnValues[\"from\"], \"\", \"\", \"\", Constant.Relationship.Connected);\r\n        }\r\n    }\r\n\r\n    addMessageFromFriendEvent = (event) => {\r\n        var data = event.returnValues;\r\n        var fromAddress = data.from;\r\n        var message = {};\r\n        message.isMine = false;\r\n        message.message = data.message;\r\n        message.encryption = utils.hexStringToAsciiString(data.encryption);\r\n        message.txHash = event.transactionHash;\r\n\r\n        this.contacts[fromAddress].messages.push(message);\r\n\r\n        window.localStorage.setItem(fromAddress, JSON.stringify(this.contacts[fromAddress]));\r\n    }\r\n\r\n    addMyMessageEvent = (event) => {\r\n        var data = event.returnValues;\r\n        var localMessages = this.contacts[data.to];\r\n        \r\n        var noMatchingItem = true;\r\n        for (var i=localMessages.messages.length-1; i>=0;i--) {\r\n            if (event.transactionHash == localMessages.messages[i].txHash) {\r\n                localMessages.messages[i].status = Constant.SENT_STATUS.SUCCESS;\r\n                window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\r\n                noMatchingItem = false;\r\n            }\r\n        }\r\n        if (noMatchingItem) {\r\n            var message = {};\r\n            message.isMine = true;\r\n            message.message = data.message;\r\n            message.encryption = utils.hexStringToAsciiString(data.encryption);\r\n            message.txHash = event.transactionHash;\r\n            localMessages.messages.push(message);\r\n            window.localStorage.setItem(data.to, JSON.stringify(this.contacts[data.to]));\r\n        }\r\n    }\r\n\r\n    addMyLocalMessage = (message, to, encryption, txHash) => {\r\n        var message = {message, encryption, txHash};\r\n        message.status = Constant.SENT_STATUS.PENDING;\r\n        message.isMine = true;\r\n        this.contacts[to].messages.push(message);\r\n        window.localStorage.setItem(to, JSON.stringify(this.contacts[to]));\r\n    }\r\n\r\n    updateLocalMessage = (toAddress, txHash, status) => {\r\n        var localMessages = this.contacts[toAddress];\r\n        for (var i=localMessages.messages.length-1; i>=0;i--) {\r\n            if (txHash == localMessages.messages[i].txHash) {\r\n                localMessages.messages[i].status = status;\r\n                window.localStorage.setItem(toAddress, JSON.stringify(this.contacts[toAddress]));\r\n            }\r\n        }\r\n    }\r\n\r\n    storePrivateKeyAndAddress(privateKey, address) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem(\"privateKey\", privateKey);\r\n            window.localStorage.setItem(\"address\", address);\r\n            window.localStorage.setItem(\"currentDataBlock\", \"0\");\r\n            window.localStorage.setItem(\"ethNetwork\", \"4\");\r\n        }\r\n    }\r\n\r\n    getPrivateKey() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            return window.localStorage.privateKey;\r\n        }\r\n    }\r\n\r\n    getAddress() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            return window.localStorage.address;\r\n        }\r\n    }\r\n\r\n    setBalance(balance) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('balance', balance);\r\n        }\r\n    }\r\n\r\n    getBalance() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.balance != undefined) {\r\n            return window.localStorage.balance;\r\n        } else {\r\n            return \"0\";\r\n        }\r\n    }\r\n\r\n    setName(name) {\r\n        if (typeof(Storage) !== 'undefined' && name != \"\") {\r\n            window.localStorage.setItem('name', name);\r\n        }\r\n    }\r\n\r\n    getName() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.name != undefined) {\r\n            return window.localStorage.name;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setAvatarUrl(avatarUrl) {\r\n        if (typeof(Storage) !== 'undefined' && avatarUrl) {\r\n            window.localStorage.setItem('avatarUrl', avatarUrl);\r\n        }\r\n    }\r\n\r\n    getAvatarUrl() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.avatarUrl != undefined) {\r\n            return window.localStorage.avatarUrl;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setJoinedStatus(isJoined) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('isJoined', isJoined);\r\n        }\r\n    }\r\n\r\n    getJoinedStatus() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.isJoined != undefined) {\r\n            return window.localStorage.isJoined;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Get current block number of contract events' data (message events, invitation events...)\r\n    getCurrentDataBlock() {\r\n        return parseInt(window.localStorage.currentDataBlock);\r\n    }\r\n\r\n    setCurrentDataBlock(blockNumber) {\r\n        window.localStorage.setItem('currentDataBlock', blockNumber);\r\n    }\r\n\r\n    setAskForTransactionApproval(boolValue) {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            window.localStorage.setItem('askForTransactionApproval', boolValue);\r\n        }\r\n    }\r\n    \r\n    getAskForTransactionApproval() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.askForTransactionApproval) {\r\n            return (window.localStorage.askForTransactionApproval == \"true\");\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeNetworkDependentData() {\r\n        if (typeof(Storage) !== 'undefined') {\r\n            var rawAddresses = window.localStorage.contactAddresses;\r\n            if (rawAddresses != undefined) {\r\n                var addresses = JSON.parse(rawAddresses);\r\n                for (var i=0;i<addresses.length;i++) {\r\n                    window.localStorage.removeItem(addresses[i]);\r\n                }\r\n                window.localStorage.removeItem('contactAddresses');\r\n            }\r\n            window.localStorage.removeItem('balance');\r\n            window.localStorage.removeItem('isJoined');\r\n            window.localStorage.removeItem('name');\r\n            window.localStorage.removeItem('avatarUrl');\r\n            window.localStorage.setItem('currentDataBlock', '0');\r\n        }\r\n    }\r\n\r\n    clearMessages = (contacts) => {\r\n        window.localStorage.setItem('currentDataBlock', \"0\");\r\n        window.localStorage.removeItem('contactAddresses');\r\n        for (var i=0;i<contacts.length;i++) {\r\n            window.localStorage.removeItem(contacts[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport default LocalStorageManager;","import EventEmitter from 'events';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport {Dispatcher} from 'flux';\r\nimport web3 from '../ethereum/web3';\r\nimport Tx from 'ethereumjs-tx';\r\n\r\nclass TransactionsManager {\r\n    constructor(account) {\r\n        this.account = account;\r\n        this.numPendingTx = 0;      // Number of pending Ethereum transactions\r\n        this.emitterMapping = {};   // A mapping of an increamental id with an event emitter in order\r\n                                    // to emit user approval and transaction results.\r\n        this.emitterIncrementalId = 0; // will be increased everytime executeMethod get called\r\n        this.dispatcher = new Dispatcher();\r\n\r\n        this.dispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.APPROVE_TRANSACTION) {\r\n                this.approveTransaction(payload.transactionId, payload.gasPrice, payload.gasAmount, payload.method);\r\n            } else if (payload.action == Constant.ACTION.REJECT_TRANSACTION) {\r\n                this.rejectTransaction(payload.transactionId);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    approveTransaction = async (transactionId, gasPrice, gasAmount, method) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n\r\n        var data = method.encodeABI();\r\n        var transactionCount = await web3.eth.getTransactionCount(this.account.getAddress());\r\n\r\n        var rawTx = {\r\n            nonce: parseInt(transactionCount + this.numPendingTx),\r\n            gasPrice: parseInt(gasPrice),\r\n            gasLimit: parseInt(gasAmount),\r\n            to: Config.ENV.ContractAddress,\r\n            value: 0,\r\n            data: data\r\n        }\r\n        var tx = new Tx(rawTx);\r\n        tx.sign(this.account.getPrivateKeyBuffer());\r\n        var serializedTx = tx.serialize();\r\n        var txHash =  '0x' + tx.hash().toString('hex');\r\n\r\n        this.updatePendingTx(this.numPendingTx+1);\r\n        web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\r\n                .on('receipt', (receipt) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_RECEIPT, receipt);\r\n                }).on('error', (err, data) => {\r\n                    this.updatePendingTx(this.numPendingTx-1);\r\n                    emitter.emit(Constant.EVENT.ON_ERROR, err, txHash);\r\n                });\r\n        emitter.emit(Constant.EVENT.ON_APPROVED, txHash);\r\n    }\r\n\r\n    /**\r\n     * @description Get called when user click on Approve button from a TransactionModal\r\n     */\r\n    rejectTransaction = (transactionId) => {\r\n        var emitter = this.emitterMapping[transactionId];\r\n        emitter.emit(Constant.EVENT.ON_REJECTED);\r\n\r\n        delete this.emitterMapping[transactionId];\r\n    }\r\n\r\n    updatePendingTx(numPendingTx) {\r\n        this.numPendingTx = numPendingTx;\r\n        this.dispatcher.dispatch({\r\n            action: Constant.EVENT.PENDING_TRANSACTION_UPDATED,\r\n            numPendingTx: this.numPendingTx\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Execute a web3's method by signing and sending the raw transaction to EtherChat contract.\r\n     * @param {*} method Web3 contract method instance, which contains method's parameters.\r\n     */\r\n    executeMethod(method) {\r\n        this.emitterIncrementalId++;\r\n        var emitter = new EventEmitter();\r\n        this.emitterMapping[this.emitterIncrementalId] = emitter;\r\n\r\n        if (this.account.askForTransactionApproval) {\r\n            this.dispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_TRANSACTION_MODAL,\r\n                method: method,\r\n                transactionId: this.emitterIncrementalId\r\n            });\r\n        } else {\r\n            this.automaticallyApproveTransaction(this.emitterIncrementalId, method);\r\n        }\r\n\r\n        return emitter;\r\n    }\r\n\r\n    /**\r\n     * @description Approve a transaction without asking for user permission. Gas price will be\r\n     * calculated automatically\r\n     */\r\n    automaticallyApproveTransaction = async (transactionId, method) => {\r\n        var estimatedGas;\r\n        try {\r\n            estimatedGas = await method.estimateGas({\r\n                gas: 3000000,\r\n            });\r\n        } catch(err) {\r\n            estimatedGas = 3000000;\r\n        }\r\n        var gasPrice = await web3.eth.getGasPrice();\r\n        this.approveTransaction(transactionId, gasPrice, estimatedGas, method);\r\n    }\r\n}\r\n\r\nexport default TransactionsManager;","import Web3 from 'web3';\r\nimport Config from '../support/Config';\r\n\r\nlet web3;\r\n\r\nconst provider = new Web3.providers.HttpProvider(Config.ENV.ProviderUrl);\r\nweb3 = new Web3(provider);\r\n\r\nexport default web3;","import {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Container,\r\n    List,\r\n    Image,\r\n    Grid,\r\n    Message,\r\n    Rail,\r\n    Sticky,\r\n    Input,\r\n    Segment\r\n} from 'semantic-ui-react';\r\nimport HeaderMenu from '../views/HeaderMenu';\r\nimport web3 from '../ethereum/web3';\r\nimport PrivateKeyModal from '../views/modals/EnterPrivateKeyModal';\r\nimport UpdateProfileModal from '../views/modals/UpdateProfileModal';\r\nimport GuideModal from '../views/modals/GuideModal';\r\nimport Head from 'next/head';\r\nimport AppManager from '../core/AppManager';\r\nimport ContactList from '../views/ContactList';\r\nimport Chat from '../views/Chat';\r\nimport ErrorModal from '../views/modals/ErrorModal';\r\nimport SettingsModal from '../views/modals/SettingsModal';\r\nimport TransactionModal from '../views/modals/TransactionModal';\r\nimport Footer from '../views/Footer';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { width: 0, height: 0, contactList: [], messages: [], selectedContact: \"\" };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.app = new AppManager();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.app.initialize();\r\n    }\r\n      \r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n      \r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        var account = this.app.account;\r\n        var contractManager = this.app.contractManager;\r\n        var transactionDispatcher = this.app.getTransactionDispatcher();\r\n\r\n        var listHeight = this.state.height - 140;\r\n        return (\r\n            <Container>\r\n                <Head>\r\n                    <title>BlockChat - Decentralized messaging on Ethereum network</title>\r\n                </Head>\r\n\r\n                <UpdateProfileModal account={account} contractManager={contractManager} />\r\n                <PrivateKeyModal account={account} />\r\n                <HeaderMenu account={account} transactionDispatcher={transactionDispatcher}/>\r\n                <GuideModal />\r\n                <ErrorModal />\r\n                <SettingsModal account={account} />\r\n                <TransactionModal dispatcher={transactionDispatcher} />\r\n            <Grid column={2} style={{paddingTop: 100}}>\r\n                <Grid.Row stretched>\r\n                    <Grid.Column width={6} style={{height: listHeight + \"px\", float: 'left'}}>\r\n                        <ContactList height={listHeight} account={account} contractManager={contractManager}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10} style={{height: listHeight + \"px\", overflow: 'auto', float: 'left'}}>\r\n                        <Chat height={listHeight} account={account} contractManager={contractManager}/>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Footer />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;","module.exports.NETWORK_LIST = [\r\n    {\r\n        id: 1,\r\n        name: 'Main Network',\r\n        contractAddress: '0x163485b3cddc7b3202e56ad31fb1921a00759f21',\r\n        explorerUrl: 'https://etherscan.io/',\r\n        providerUrl: 'https://mainnet.infura.io/Q2aBIgYNhIB60VsqyrN1'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Ropsten Test Net',\r\n        contractAddress: '0x97e1dc3169a01b51b6d7d7e11c14308ead4692e2',\r\n        explorerUrl: 'https://ropsten.etherscan.io/',\r\n        providerUrl: 'https://ropsten.infura.io/v3/10330c483afc4a93a939de9dac39939d'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Rinkeby Test Net',\r\n        contractAddress: '0xa8d27Eda6518Ac6CcF3eb7Ec100B1fc8ef850e80',\r\n        explorerUrl: 'https://rinkeby.etherscan.io/',\r\n        providerUrl: 'https://rinkeby.infura.io/v3/10330c483afc4a93a939de9dac39939d'\r\n    }\r\n]\r\n\r\nmodule.exports.ENV = {\r\n    get ContractAddress() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.ethNetwork != undefined) {\r\n            var network = parseInt(window.localStorage.ethNetwork);\r\n            for (var i=0;i<module.exports.NETWORK_LIST.length;i++) {\r\n                if (network == module.exports.NETWORK_LIST[i].id) {\r\n                    return module.exports.NETWORK_LIST[i].contractAddress;\r\n                }\r\n            }\r\n        } else {\r\n            return \"\";\r\n        }\r\n    },\r\n\r\n    get NetworkName() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.ethNetwork != undefined) {\r\n            var network = parseInt(window.localStorage.ethNetwork);\r\n            for (var i=0;i<module.exports.NETWORK_LIST.length;i++) {\r\n                if (network == module.exports.NETWORK_LIST[i].id) {\r\n                    return module.exports.NETWORK_LIST[i].name;\r\n                }\r\n            }\r\n        } else {\r\n            return \"\";\r\n        }\r\n    },\r\n\r\n    get ProviderUrl() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.ethNetwork != undefined) {\r\n            var network = parseInt(window.localStorage.ethNetwork);\r\n            for (var i=0;i<module.exports.NETWORK_LIST.length;i++) {\r\n                if (network == module.exports.NETWORK_LIST[i].id) {\r\n                    return module.exports.NETWORK_LIST[i].providerUrl;\r\n                }\r\n            }\r\n        } else {\r\n            return module.exports.NETWORK_LIST[0].providerUrl;\r\n        }\r\n    },\r\n\r\n    get ExplorerUrl() {\r\n        if (typeof(Storage) !== 'undefined' && window.localStorage.ethNetwork != undefined) {\r\n            var network = parseInt(window.localStorage.ethNetwork);\r\n            for (var i=0;i<module.exports.NETWORK_LIST.length;i++) {\r\n                if (network == module.exports.NETWORK_LIST[i].id) {\r\n                    return module.exports.NETWORK_LIST[i].explorerUrl;\r\n                }\r\n            }\r\n        } else {\r\n            return module.exports.NETWORK_LIST[0].explorerUrl;\r\n        }\r\n    },\r\n\r\n    set EthNetworkId(networkId) {\r\n        if (typeof(Storage) != 'undefined') {\r\n            window.localStorage.setItem('ethNetwork', networkId);\r\n        }\r\n    },\r\n\r\n    get EthNetworkId() {\r\n        if (typeof(Storage) !== 'undefined' || window.localStorage.ethNetwork == undefined) {\r\n            return parseInt(window.localStorage.ethNetwork);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","module.exports.APP_NAME = \"BlockChat\";\r\nmodule.exports.GITHUB_LINK = \"#\";\r\nmodule.exports.MEDIUM_LINK = \"#\";\r\n\r\nmodule.exports.ACTION = {\r\n    ADD_CONTACT: 'ADD_CONTACT_ACTION',\r\n    SELECT_CONTACT: 'SELECT_CONTACT_ACTION',\r\n    OPEN_UPDATE_PROFILE: 'OPEN_UPDATE_PROFILE',\r\n    OPEN_PRIVATE_KEY_MODAL: 'OPEN_PRIVATE_KEY_MODAL',\r\n    OPEN_GUIDE: 'OPEN_GUIDE',\r\n    OPEN_SETTINGS_MODAL: 'OPEN_SETTINGS_MODAL',\r\n    OPEN_TRANSACTION_MODAL: 'OPEN_TRANSACTION_MODAL',\r\n    REJECT_TRANSACTION: 'REJECT_TRANSACTION',\r\n    APPROVE_TRANSACTION: 'APRROVE_TRANSACTION'\r\n}\r\n\r\nmodule.exports.EVENT = {\r\n    CONTRACT_READY: 'CONTRACT_READY',\r\n    CONTACT_LIST_UPDATED: 'CONTACT_LIST_UPDATED',\r\n    MESSAGES_UPDATED: 'MESSAGES_UPDATED',\r\n    ACCOUNT_BALANCE_UPDATED: 'ACCOUNT_BALANCE_UPDATED',\r\n    ACCOUNT_INFO_UPDATED: 'ACCOUNT_INFO_UPDATED',\r\n    PENDING_TRANSACTION_UPDATED: 'PENDING_TRANSACTION_UPDATED',\r\n    ENCOUNTERED_ERROR: 'ENCOUNTERED_ERROR',\r\n    ON_ERROR: 'onError',\r\n    ON_RECEIPT: 'onReceipt',\r\n    ON_APPROVED: 'onApproved',\r\n    ON_REJECTED: 'onRejected'\r\n}\r\n\r\nmodule.exports.SENT_STATUS = {\r\n    PENDING: 1,\r\n    SUCCESS: 2,\r\n    FAILED: 3\r\n}\r\n\r\nmodule.exports.Relationship = {\r\n    NoRelation: 0,\r\n    Requested: 1,\r\n    Connected: 2,\r\n    Blocked: 3\r\n}","var crypto = require('crypto');\r\nvar wallet = require('ethereumjs-wallet');\r\n\r\nvar algorithm = 'aes256';\r\n\r\nmodule.exports.getEncryptAlgorithm = () => {\r\n    return algorithm;\r\n}\r\n\r\nmodule.exports.getEncryptAlgorithmInHex = () => {\r\n    return '0x' + Buffer.from(algorithm, 'ascii').toString('hex');\r\n}\r\n\r\nmodule.exports.hexStringToAsciiString = (hexString) => {\r\n    if (hexString.startsWith('0x')) {\r\n        hexString = hexString.substr(2);\r\n    }\r\n    return Buffer.from(hexString, 'hex').toString('ascii').replace(/\\0/g, '');\r\n}\r\n\r\nmodule.exports.privateToPublic = (privateKey) => {\r\n    var account = crypto.createECDH('secp256k1');\r\n    account.setPrivateKey(privateKey);\r\n    return account.getPublicKey().slice(1);\r\n}\r\n\r\nmodule.exports.computeSecret = (privateKeyFromA, publicKeyFromB) => {\r\n    var A = crypto.createECDH('secp256k1');\r\n    A.setPrivateKey(privateKeyFromA);\r\n    return A.computeSecret(publicKeyFromB);\r\n}\r\n\r\nexports.encrypt = (message, secret) => {\r\n    var cipher = crypto.createCipher(algorithm, secret);\r\n    var crypted = cipher.update(message,'utf8','hex')\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n  }\r\n  \r\nexports.decrypt = (encryptedMessage, secret) => {\r\n    var decipher = crypto.createDecipher(algorithm,secret)\r\n    var dec = decipher.update(encryptedMessage,'hex','utf8')\r\n    dec += decipher.final('utf8');\r\n    return dec;\r\n}\r\n\r\n// exports.getPubkeyFromTransaction = (rawTx) => {\r\n//       var localTx = {\r\n//         nonce: parseInt(rawTx.nonce),\r\n//         gasPrice: parseInt(rawTx.gasPrice),\r\n//         gasLimit: parseInt(rawTx.gas),\r\n//         to: rawTx.to,\r\n//         value: parseInt(rawTx.value),\r\n//         r: rawTx.r,\r\n//         s: rawTx.s,\r\n//         v: rawTx.v,\r\n//         data: rawTx.input,\r\n//       };\r\n  \r\n//     var txInstance = new Transaction(localTx);\r\n//     return txInstance.getSenderPublicKey().toString('hex');\r\n//   }","import {Component} from 'react';\r\nimport {\r\n    Segment,\r\n    Input,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Header,\r\n    Label\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport utils from '../support/Utils';\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {address: \"\", messages: [], publicKey: \"\"}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      componentDidUpdate() {\r\n        this.scrollToBottom();\r\n      }\r\n    \r\n      scrollToBottom() {\r\n          if (this.lastObjectAnchor != undefined) {\r\n                this.lastObjectAnchor.scrollIntoView({ behavior: 'smooth' });\r\n          }\r\n      }    \r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.SELECT_CONTACT) {\r\n                this.setState({address: payload.data, \r\n                    publicKey: this.account.storageManager.contacts[payload.data].publicKey,\r\n                    messages: this.account.storageManager.contacts[payload.data].messages});\r\n                \r\n            } else if (this.state.address != \"\" && payload.action == Constant.EVENT.MESSAGES_UPDATED) {\r\n                if (payload.data == undefined || payload.data == this.state.address) {\r\n                    this.setState({messages: this.account.storageManager.contacts[this.state.address].messages})\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        this.contractManager.sendMessage(this.state.address, \r\n            this.account.storageManager.contacts[this.state.address].publicKey, \r\n            message);\r\n    }\r\n\r\n    render() {\r\n        const {height} = this.props;\r\n\r\n        const { publicKey, messages } = this.state;\r\n\r\n        var messageItems = [];\r\n        if (publicKey) {\r\n            if (messages.length > 0) {\r\n                for (var i=0;i<messages.length;i++) {\r\n                    var decryptedMessage;\r\n                    if (messages[i].encryption == 'aes256') {\r\n                        decryptedMessage = utils.decrypt(messages[i].message.substr(2), \r\n                            this.account.computeSecret(Buffer.from(publicKey, 'hex')));\r\n                    } else {\r\n                        decryptedMessage = messages[i].message;\r\n                    }\r\n\r\n                    var lastObjectAnchor = (<span />);\r\n                    if (i == messages.length - 1) {\r\n                        lastObjectAnchor = (<span ref={lastObjectAnchor => { this.lastObjectAnchor = lastObjectAnchor; }} />);\r\n                    }\r\n\r\n                    var explorerUrl = Config.ENV.ExplorerUrl + 'tx/' + messages[i].txHash;\r\n                    if (messages[i].isMine) {\r\n                        if (messages[i].status == Constant.SENT_STATUS.PENDING) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' size='large' color='blue' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='circle notched' loading />\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else if (messages[i].status == Constant.SENT_STATUS.FAILED) {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}><Label pointing='right' \r\n                                    as='span' key={'msg_' + i} size='large' color='blue' \r\n                                    style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    <Icon name='warning sign'/>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                                </Label></p>\r\n                            );\r\n                        } else {\r\n                            messageItems.push(\r\n                                <p align='right' key={'msg_' + i}>\r\n                                    <a href={explorerUrl} target='_blank'><Label pointing='right' \r\n                                        as='span' key={'msg_' + i} size='large' color='blue' \r\n                                        style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                        {decryptedMessage}\r\n                                        {lastObjectAnchor}\r\n                                </Label></a></p>\r\n                            );\r\n                        }\r\n                    } else {\r\n                        messageItems.push(\r\n                            <p key={'msg_' + i}>\r\n                                <a href={explorerUrl} target='_blank'>\r\n                                    <Label pointing='left' as='span' \r\n                                    key={'msg_' + i} size='large' style={{fontWeight: '100', lineHeight: '1.5'}}>\r\n                                    {decryptedMessage}\r\n                                    {lastObjectAnchor}\r\n                            </Label></a></p>\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                messageItems.push(\r\n                    <Header as='h2' textAlign='center' key='no_messages'>No messages</Header>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <Segment style={{height: (height-90) + \"px\", width: '100%', overflow: 'auto'}}>\r\n                    {messageItems}\r\n                </Segment>\r\n                <Segment>\r\n                    <TextInput disabled={this.state.address ? false : true} onSend={this.sendMessage}/>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TextInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {disabled: props.disabled, content: \"\"};\r\n        this.onSend = props.onSend;\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({disabled: props.disabled});\r\n    }\r\n\r\n    sendMessageClicked() {\r\n        if (this.state.content) {\r\n            this.onSend(this.state.content);\r\n            this.setState({content: \"\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Input fluid disabled={this.state.disabled}\r\n                value={this.state.content} \r\n                onChange={(e) => this.setState({content: e.target.value})} \r\n                action={{ color: 'orange', labelPosition: 'right', icon: 'send', content: 'Send', onClick: (e)=>this.sendMessageClicked()}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;","import {Component} from 'react';\r\nimport {\r\n    List,\r\n    Image,\r\n    Loader,\r\n    Dimmer,\r\n    Button,\r\n    Icon,\r\n    Header,\r\n    Popup\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport AddContactModal from './modals/AddContactModal';\r\n\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {contactAddresses: [], isAccepting: [], selectedAddress: \"\"};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.CONTACT_LIST_UPDATED) {\r\n                this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n            }\r\n        })\r\n    }\r\n\r\n    addContactClicked = () => {\r\n        if (this.account.isJoined) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.ADD_CONTACT\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    acceptContactRequest = (event) => {\r\n        if (this.account.isJoined) {\r\n            var address = event.target.value;\r\n            \r\n            this.account.storageManager.contacts[address].isAccepting = true;\r\n            this.forceUpdate();\r\n\r\n            this.contractManager.acceptContactRequest(address, (resultEvent) => {\r\n                if (resultEvent == Constant.EVENT.ON_REJECTED) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_ERROR) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.forceUpdate();\r\n                } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                    this.account.storageManager.contacts[address].isAccepting = false;\r\n                    this.account.storageManager.contacts[address].relationship = Constant.Relationship.Connected;\r\n                    this.setState({contactAddresses: this.account.storageManager.contactAddresses});\r\n                }\r\n            });\r\n        } else {\r\n            appDispatcher.dispatch({\r\n                action: Constant.EVENT.ENCOUNTERED_ERROR,\r\n                message: 'Please join '+Constant.APP_NAME+' first by click on the \\'Join\\' button on the top-right corner'\r\n            });\r\n        }\r\n    }\r\n\r\n    listItemClicked = (address, event) => {\r\n        if (this.account.storageManager.contacts[address].relationship == Constant.Relationship.Connected &&\r\n            this.account.storageManager.contacts[address].publicKey) {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.SELECT_CONTACT,\r\n                data: address\r\n            });\r\n            this.setState({selectedAddress: address});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { contactAddresses } = this.state;\r\n        const {height} = this.props;\r\n        var htmlContent;\r\n\r\n        var contactItems = [];\r\n\r\n        if (contactAddresses == undefined) {\r\n            htmlContent = (<div></div>);\r\n        } else \r\n        if (contactAddresses.length == 0) {\r\n            contactItems.push(\r\n                <List.Item key={'contact_' + i}>\r\n                    <List.Content>\r\n                        <List.Header>Empty</List.Header>\r\n                    </List.Content>\r\n                </List.Item>\r\n                );\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        } else {\r\n            for (var i=0;i<contactAddresses.length;i++) {\r\n                var user = this.account.storageManager.contacts[contactAddresses[i]];\r\n                var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + contactAddresses[i];\r\n                var rightAlignedContent;\r\n                if (user.relationship == Constant.Relationship.NoRelation) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Button color='orange' loading={user.isAccepting} disabled={user.isAccepting} \r\n                                onClick={this.acceptContactRequest} value={contactAddresses[i]}>Accept</Button>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else if (user.relationship == Constant.Relationship.Requested) {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'wait_popup_' + i}\r\n                                    trigger={<Button color='yellow' circular icon='wait'></Button>}\r\n                                    content='Pending acceptance'\r\n                            />\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    );\r\n                } else {\r\n                    rightAlignedContent = (\r\n                        <List.Content floated='right'>\r\n                            <Popup  key={'info_button_popup_' + i}\r\n                                    trigger={<Button color='green' as='a' href={addressExplorerUrl} target='_blank' circular icon='info circle'></Button>}\r\n                                    content='View on Etherscan'\r\n                            />\r\n                        </List.Content>\r\n                    )\r\n                }\r\n\r\n                var address = contactAddresses[i];\r\n                contactItems.push(\r\n                    <List.Item active={address == this.state.selectedAddress} key={'contact_' + i} value={address} onClick={this.listItemClicked.bind(this,address)}>\r\n                        <Image avatar src={user.avatarUrl ? user.avatarUrl : 'static/images/user.png'}/>\r\n                        <List.Content>\r\n                            <List.Header>\r\n                                {user.name ? user.name : address.substr(0, 10)}\r\n                            </List.Header>\r\n                            {address.substr(0,14) + '...'}\r\n                        </List.Content>\r\n                        {rightAlignedContent}\r\n                    </List.Item>\r\n                );\r\n            }\r\n            htmlContent = (<List selection verticalAlign='middle'>{contactItems}</List>);\r\n        }\r\n        \r\n        return (\r\n            <div style={{width: '100%'}}>\r\n                <div style={{height: 40, width: '100%'}}>\r\n                <Header as='h2' style={{float: 'left'}}>Contact list</Header>\r\n                <Button color='blue' style={{float: 'right'}} onClick={this.addContactClicked}><Icon name='add user'></Icon>Add</Button>\r\n                </div>\r\n                <div style={{height: height - 40, overflow: 'auto', float: 'left', width:'100%'}}>\r\n                    {htmlContent}\r\n                </div>\r\n                <AddContactModal contractManager={this.contractManager} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactList;","import {Component} from 'react';\r\nimport Constant from '../support/Constant';\r\nimport {Button} from 'semantic-ui-react';\r\nimport appDispatcher from '../core/AppDispatcher';\r\n\r\nclass Footer extends Component {\r\n    openGuide(e) {\r\n        e.preventDefault();\r\n        appDispatcher.dispatch({\r\n            action: Constant.ACTION.OPEN_GUIDE\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center', marginTop: 10, marginBottom: 10}}>\r\n            <a href='/'>Home</a>\r\n            <a style={{marginLeft: 20}} onClick={this.openGuide} href='#'>Guide</a>\r\n            <a style={{marginLeft: 20}} href='/terms'>Term of use</a>\r\n            <a style={{marginLeft: 20}} href='/about'>About {Constant.APP_NAME}</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import {Component} from 'react';\r\nimport {\r\n    Menu,\r\n    Container,\r\n    Button,\r\n    Label,\r\n    Loader,\r\n    List,\r\n    Image,\r\n    Icon,\r\n    Dropdown\r\n} from 'semantic-ui-react';\r\nimport Head from 'next/head';\r\nimport web3 from '../ethereum/web3';\r\nimport Constant from '../support/Constant';\r\nimport Config from '../support/Config';\r\nimport appDispatcher from '../core/AppDispatcher';\r\nimport contractManager from '../core/ContractManager';\r\n\r\nclass HeaderMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = contractManager;\r\n        this.transactionDispatcher = props.transactionDispatcher;\r\n        this.state = {address: \"\", balance: \"\", name: \"\", \r\n            avatarUrl: \"\", isLoading: true, isJoinButtonLoading: false, \r\n            isJoined: false, numPendingTx: 0};\r\n        this.reloadCount = 0;\r\n    }\r\n    clearAllData = () => {\r\n        window.localStorage.clear();\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.account) {\r\n            this.getAccountInfo();\r\n            appDispatcher.register((payload) => {\r\n                if (payload.action == Constant.EVENT.ACCOUNT_BALANCE_UPDATED) {\r\n                    this.setState({balance: this.account.balance});\r\n                } else if (payload.action == Constant.EVENT.ACCOUNT_INFO_UPDATED) {\r\n                    this.setState({name: payload.profile.name, avatarUrl: payload.profile.avatarUrl, isJoined: payload.profile.isJoined});\r\n                } \r\n            });\r\n            this.transactionDispatcher.register((payload) => {\r\n                if (payload.action == Constant.EVENT.PENDING_TRANSACTION_UPDATED) {\r\n                    this.setState({numPendingTx: payload.numPendingTx});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getAccountInfo = () => {\r\n        var address = this.account.getAddress();\r\n        if (address) {\r\n            this.setState({address: address, balance: this.account.balance, isLoading: false, isJoined: this.account.isJoined});\r\n        } else {\r\n            if (this.reloadCount == 1) {\r\n                this.setState({isLoading: false});\r\n            } else {\r\n                this.reloadCount++;\r\n                setTimeout(this.getAccountInfo, 800);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleDropdownClicked = (event, data) => {\r\n        if (data.name == 'updateProfile') {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_UPDATE_PROFILE\r\n            });\r\n        } else if (data.name == 'logOutItem') {\r\n            this.clearAllData();\r\n            window.location.reload();\r\n        } else if (data.name == 'settingsItem') {\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_SETTINGS_MODAL\r\n            })\r\n        } \r\n         else if (data.name == 'changeEthNetwork') {\r\n            if (data.networkid != Config.ENV.EthNetworkId) {\r\n                Config.ENV.EthNetworkId = data.networkid;\r\n                this.removeNetworkDependentData();\r\n                window.location.reload();\r\n            }\r\n        }\r\n    }\r\n\r\n    removeNetworkDependentData = () => {\r\n        this.account.storageManager.removeNetworkDependentData();\r\n    }\r\n\r\n    handleJoinClicked = () => {\r\n        var publicKeyBuffer = this.account.getPublicKeyBuffer();\r\n        this.contractManager.joinContract(publicKeyBuffer, (resultEvent) => {\r\n            if (resultEvent == Constant.EVENT.ON_REJECTED || resultEvent == Constant.EVENT.ON_ERROR) {\r\n                this.setState({isJoinButtonLoading: false});\r\n            } else if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n        this.setState({isJoinButtonLoading: true});\r\n    }\r\n\r\n    handleImportPrivateKeyClicked = () => {\r\n        appDispatcher.dispatch({\r\n            action: Constant.ACTION.OPEN_PRIVATE_KEY_MODAL\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var accountInfo = (<div></div>);\r\n\r\n        if (this.account) {\r\n            if (this.state.isLoading == false) {\r\n                if (this.state.address) {\r\n                    var addressExplorerUrl = Config.ENV.ExplorerUrl + 'address/' + this.state.address;\r\n                    var dropdownTrigger;\r\n\r\n                    if (this.state.avatarUrl) { \r\n                        dropdownTrigger = (\r\n                            <span><Image src={this.state.avatarUrl} avatar/>{ this.state.name ? this.state.name : this.state.address.substr(0,10)}</span>\r\n                        );\r\n                    } else {\r\n                        dropdownTrigger = (\r\n                            <span><Icon name='user' size='large'/>{ this.state.name ? this.state.name : this.state.address.substr(0,10)}</span>\r\n                        );\r\n                    }\r\n\r\n                    var networkItems = [];\r\n                    for (var i=0;i<Config.NETWORK_LIST.length;i++) {\r\n                        networkItems.push(\r\n                            <Dropdown.Item key={'networkItem' + i} networkid={Config.NETWORK_LIST[i].id} name='changeEthNetwork' onClick={this.handleDropdownClicked}>\r\n                                {Config.NETWORK_LIST[i].name}\r\n                            </Dropdown.Item>\r\n                        );\r\n                    }\r\n\r\n                    var memberInfo;\r\n                    if (this.account.isJoined) {\r\n                        memberInfo = (\r\n                            <Dropdown item trigger={dropdownTrigger}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item name='updateProfile' onClick={this.handleDropdownClicked}>\r\n                                        <Icon name='write'/>Update profile\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item name='settingsItem' onClick={this.handleDropdownClicked}>\r\n                                        <Icon name='settings'/>Settings\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item name='logOutItem' onClick={this.handleDropdownClicked}>\r\n                                        <Icon name='log out'/>Log out\r\n                                    </Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        );\r\n                    } else {\r\n                        memberInfo = (\r\n                            <Button color='orange' onClick={this.handleJoinClicked} \r\n                                loading={this.state.isJoinButtonLoading} \r\n                                disabled={this.state.isJoinButtonLoading}>Join {Constant.APP_NAME}</Button>\r\n                        );\r\n                    }\r\n\r\n                    var pendingTxItem;\r\n                    if (this.state.numPendingTx > 0) {\r\n                        pendingTxItem = (\r\n                            <Label as='a' color='yellow' href={addressExplorerUrl} target='_blank'>\r\n                                <Icon name='spinner' loading/>\r\n                                {this.state.numPendingTx} pending tx\r\n                            </Label>\r\n                        );\r\n                    }\r\n\r\n                    accountInfo = (\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                            <Dropdown item text={Config.ENV.NetworkName}>\r\n                                    <Dropdown.Menu>\r\n                                        {networkItems}\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                            </Menu.Item>\r\n                            <Menu.Item>\r\n                                <List>\r\n                                <List.Item>\r\n                                    <a href={addressExplorerUrl} target='_blank'>\r\n                                        {this.state.address}\r\n                                    </a>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    Balance: <Label as='a' href={addressExplorerUrl} target='_blank' color='orange'>{parseFloat(web3.utils.fromWei(\"\" +this.state.balance, 'ether')).toFixed(8) + ' ETH' }</Label>\r\n                                    {pendingTxItem}\r\n                                </List.Item>\r\n                                </List>\r\n                            </Menu.Item>\r\n                            <Menu.Item>\r\n                                {memberInfo}\r\n                            </Menu.Item>\r\n                        </Menu.Menu>\r\n                    );\r\n                } else {\r\n                    accountInfo = (\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                <Button onClick={this.handleImportPrivateKeyClicked} color='blue'>Import private key</Button>\r\n                            </Menu.Item>\r\n                        </Menu.Menu>\r\n                    );\r\n                }\r\n            } else {\r\n                accountInfo = (<Loader inverted active />);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Menu fixed='top' color='grey' inverted>\r\n                <Head>\r\n                <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"></link>\r\n                </Head>\r\n                <Container>\r\n                <Menu.Item>\r\n                    <a href='/'><Image src='static/images/blockchat.png' height={55} /></a>\r\n                </Menu.Item>\r\n                    {this.account ? accountInfo: (<div></div>)}\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderMenu;","import {Component} from 'react';\r\nimport web3 from '../../ethereum/web3';\r\nimport {\r\n    Modal,\r\n    Input,\r\n    Message,\r\n    Button,\r\n    Icon,\r\n    Header\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass AddContactModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { modalOpen: false, errorMessage: \"\", address: \"\"}\r\n        this.contractManager = props.contractManager;\r\n    }\r\n    \r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.ADD_CONTACT) {\r\n                this.setState({modalOpen: true, errorMessage: \"\", isLoading: false, address: \"\"});\r\n            }\r\n        })\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({errorMessage: \"\"});\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    handleAddContact = (e) => {\r\n        if (web3.utils.isAddress(this.state.address)) {\r\n            this.contractManager.addContact(this.state.address);\r\n            this.setState({errorMessage: \"\", modalOpen: false});\r\n        } else {\r\n            this.setState({errorMessage: \"Invalid ethereum address\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content=\"Add contact by address\" />\r\n                    <Modal.Content>\r\n                        <Input fluid value={this.state.address} onChange={event => this.setState({address: event.target.value})}/>\r\n                        <Message error header={this.state.errorMessage} hidden={this.state.errorMessage == \"\"}/>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='orange' onClick={this.handleAddContact}>\r\n                        <Icon name='checkmark' /> Add\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        <Icon name='close' /> Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContactModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Icon,\r\n    Input,\r\n    Message\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass EnterPrivateKeyModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { modalOpen: false, key: \"\", errorMessage:\"\"}\r\n        this.account = props.account;\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({errorMessage: \"\"});\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    handleConfirm = (e) => {\r\n        e.preventDefault();\r\n        this.setState({errorMessage: \"\"});\r\n\r\n        var success = this.account.storePrivateKey(this.state.key);\r\n        if (success) {\r\n            this.setState({ modalOpen: false });\r\n            window.location.reload();\r\n        } else {\r\n            this.setState({errorMessage: \"Invalid private key\"});\r\n        }\r\n        \r\n    };\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_PRIVATE_KEY_MODAL) {\r\n                this.setState({modalOpen: true});\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content=\"Import private key\"/>\r\n                    <Modal.Content>\r\n                        <Input fluid value={this.state.key} \r\n                            onChange={event => this.setState({key: event.target.value})}\r\n                            placeholder='Ethereum private key'/>\r\n                        <Message error header={this.state.errorMessage} hidden={this.state.errorMessage == \"\"}/>\r\n                        <p style={{marginTop: 20}}>By clicking Confirm, you also agree to our <a href='/terms' target='_blank'>Terms of use</a></p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='blue' onClick={this.handleConfirm}>\r\n                        <Icon name='checkmark' /> Confirm\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        <Icon name='close' /> Close\r\n                    </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterPrivateKeyModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Message\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass ErrorModal extends Component {\r\n    state = { modalOpen: false, message: \"\", title: \"\"}\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.EVENT.ENCOUNTERED_ERROR) {\r\n                this.setState({modalOpen: true, message: payload.message, title: payload.title});\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content={this.state.title ? this.state.title : \"Notice\"} />\r\n                    <Modal.Content>\r\n                        <Message error>{this.state.message}</Message>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ErrorModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Icon\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass GuideModal extends Component {\r\n    state = { modalOpen: false, key: \"\"}\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false })\r\n\r\n        var firstTimeUse = window.localStorage.firstTimeUse;\r\n        if (firstTimeUse == undefined) {\r\n            window.localStorage.setItem('firstTimeUse', \"false\");\r\n            appDispatcher.dispatch({\r\n                action: Constant.ACTION.OPEN_PRIVATE_KEY_MODAL,\r\n            });\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkForFirstTime();\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_GUIDE) {\r\n                this.setState({modalOpen: true});\r\n            }\r\n        });\r\n    }\r\n\r\n    checkForFirstTime() {\r\n        if (typeof(Storage) !== \"undefined\") {\r\n            var firstTimeUse = window.localStorage.firstTimeUse;\r\n            if (firstTimeUse == undefined || firstTimeUse == false) {\r\n                this.setState({modalOpen: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content=\"Welcome to BlockChat\" />\r\n                    <Modal.Content style={{fontSize: '1.2em'}}>\r\n                        <h2>Please read our note carefully</h2>\r\n                        <p>BlockChat is an Ethereum app that allows you to send encrypted messages via \r\n                            a smart contract that only you and the recipient of a message can decrypt it.\r\n                            BlockChat can operate without any centralized server</p>\r\n                        <p>You will be required to key in your BlockChat private key in order to \r\n                            use BlockChat. Make sure that you understand the risk of giving your \r\n                            private key to any third party.</p>\r\n                        <p>We recommend you to try BlockChat on Rinkeby test net or Ropsten test Net. You can get free ether on Rinkeby at https://faucet.rinkeby.io/ and https://faucet.ropsten.be/</p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='green' onClick={this.handleClose}>\r\n                        <Icon name='checkmark' /> Got it\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GuideModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Message,\r\n    Checkbox\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass SettingsModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.state = { modalOpen: false, askForApproval: false}\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false})\r\n    };\r\n\r\n    handleUpdate = () => {\r\n        this.account.setAskForTransactionApproval(this.state.askForApproval);\r\n        this.setState({ modalOpen: false})\r\n    }\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_SETTINGS_MODAL) {\r\n                var askForApproval = this.account.askForTransactionApproval;\r\n                this.setState({modalOpen: true, askForApproval});\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='small'\r\n                >\r\n                <Header icon=\"\" content='Settings' />\r\n                    <Modal.Content>\r\n                        <Checkbox toggle label='Ask for transaction approval' checked={this.state.askForApproval} onChange={(event, data) => this.setState({askForApproval: data.checked})}/>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='blue' onClick={this.handleUpdate}>\r\n                        Update\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Message,\r\n    Loader,\r\n    Dimmer,\r\n    Form,\r\n    Input\r\n} from 'semantic-ui-react';\r\nimport Constant from '../../support/Constant';\r\nimport web3 from '../../ethereum/web3';\r\n\r\nclass TransactionModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dispatcher = props.dispatcher;\r\n        this.state = { modalOpen: false, estimatedGas: 0, gasPrice: 0, transactionId: 0, warningMessage: \"\"};\r\n    }\r\n\r\n    handleReject = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false})\r\n\r\n        this.dispatcher.dispatch({\r\n            action: Constant.ACTION.REJECT_TRANSACTION,\r\n            transactionId: this.state.transactionId\r\n        })\r\n    };\r\n\r\n    handleApprove = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false})\r\n\r\n        this.dispatcher.dispatch({\r\n            action: Constant.ACTION.APPROVE_TRANSACTION,\r\n            transactionId: this.state.transactionId,\r\n            method: this.method,\r\n            gasPrice: this.state.gasPrice,\r\n            gasAmount: this.state.estimatedGas\r\n        })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.dispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_TRANSACTION_MODAL) {\r\n                this.method = payload.method;\r\n                this.setState({modalOpen: true, estimatedGas: 0, gasPrice: 0, transactionId: payload.transactionId});\r\n                this.updateInfo();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateInfo = async () => {\r\n        var estimatedGas;\r\n        var warningMessage = \"\";\r\n        try {\r\n            estimatedGas = await this.method.estimateGas({\r\n                gas: 3000000\r\n                // from: this.account.getAddress()\r\n            });\r\n        } catch(err) {\r\n            estimatedGas = 3000000;\r\n            if (err) {\r\n                warningMessage = err.message;\r\n            }\r\n        }\r\n        var gasPrice = await web3.eth.getGasPrice();\r\n        this.setState({estimatedGas, gasPrice, warningMessage});\r\n    }\r\n\r\n    render() {\r\n        var content = (\r\n            <Dimmer.Dimmable as={Modal.Content}>\r\n                <Dimmer active inverted><Loader active inline='centered' inverted /></Dimmer>\r\n            </Dimmer.Dimmable>\r\n        );\r\n        if (this.state.gasPrice) {\r\n            content = (\r\n            <Modal.Content>\r\n                <Form warning={this.state.warningMessage != \"\"}>\r\n                    <Form.Field>\r\n                    The gas price is suggested by the last few blocks median gas price.\r\n                    </Form.Field>\r\n                    <Form.Field inline>\r\n                    <label>Gas limit: </label>\r\n                    <input value={this.state.estimatedGas} disabled />\r\n                    </Form.Field>\r\n                    <Form.Field inline>\r\n                    <label>Gas price</label>\r\n                    <Input value={web3.utils.fromWei(this.state.gasPrice, 'gwei')} \r\n                        label={{basic: true, content: 'Gwei'}} labelPosition='right'\r\n                        onChange={(e) => {\r\n                                if (e.target.value < 1000000) {\r\n                                    this.setState({gasPrice: web3.utils.toWei(e.target.value, 'gwei')});\r\n                                }\r\n                            }\r\n                        }\r\n                        style={{textAlign: 'right'}}/>\r\n                    </Form.Field>\r\n                    <Form.Field inline>\r\n                    <label>Transaction fee: </label>\r\n                    <label>{web3.utils.fromWei((this.state.estimatedGas*this.state.gasPrice).toString(), 'ether') + ' ETH'}</label>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <Message warning>{this.state.warningMessage}</Message>\r\n                    </Form.Field>\r\n                </Form>\r\n            </Modal.Content>)\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                size='mini'\r\n                closeOnDimmerClick={false}\r\n                >\r\n                <Header icon=\"\" content='Confirm transaction' />\r\n                    {content}\r\n                    <Modal.Actions>\r\n                    <Button color='orange' onClick={this.handleApprove}>\r\n                        Approve\r\n                    </Button>\r\n                    <Button color='red' onClick={this.handleReject}>\r\n                        Reject\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TransactionModal;","import {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    Header,\r\n    Button,\r\n    Icon,\r\n    Form\r\n} from 'semantic-ui-react';\r\nimport appDispatcher from '../../core/AppDispatcher';\r\nimport Constant from '../../support/Constant';\r\n\r\nclass UpdateProfileModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.account = props.account;\r\n        this.contractManager = props.contractManager;\r\n        this.state = {modalOpen: false, name: this.account.name, avatarUrl: this.account.avatarUrl};\r\n    }\r\n\r\n    handleClose = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ modalOpen: false })\r\n    };\r\n\r\n    updateProfileClicked = (e) => {\r\n        e.preventDefault();\r\n        this.contractManager.updateProfile(this.state.name, this.state.avatarUrl, (resultEvent) => {\r\n            if (resultEvent == Constant.EVENT.ON_RECEIPT) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n        this.setState({ modalOpen: false });\r\n    }\r\n\r\n    componentDidMount() {\r\n        appDispatcher.register((payload) => {\r\n            if (payload.action == Constant.ACTION.OPEN_UPDATE_PROFILE) {\r\n                this.setState({modalOpen: true});\r\n            } else if (payload.action == Constant.EVENT.ACCOUNT_INFO_UPDATED) {\r\n                this.setState({name: payload.profile.name, avatarUrl: payload.profile.avatarUrl});\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                >\r\n                <Header icon=\"\" content=\"Update name and avatar\" />\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Form.Field>\r\n                            <label>Name</label>\r\n                            <input placeholder='Maximum 32 characters' value={this.state.name} \r\n                                onChange={(e) => {\r\n                                    if (e.target.value.length <= 32) {\r\n                                        this.setState({name: e.target.value});\r\n                                    }\r\n                                }}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            <label>Avatar URL</label>\r\n                            <input placeholder='Maximum 32 characters' value={this.state.avatarUrl} \r\n                                onChange={(e) => {\r\n                                    if (e.target.value.length <= 32) {\r\n                                        this.setState({avatarUrl: e.target.value});\r\n                                    }\r\n                                }} />\r\n                            <label>If your avatar URL is longer than 32 characters, \r\n                                please consider using <a href='https://goo.gl/' target='_blank'>Google URL Shortener</a></label>\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                    <Button color='orange' onClick={this.updateProfileClicked}>\r\n                        Update\r\n                    </Button>\r\n                    <Button color='grey' onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateProfileModal;","module.exports = require(\"crypto\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"ethereumjs-wallet\");","module.exports = require(\"events\");","module.exports = require(\"flux\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"web3\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AAvBA;AA0BA;AACA;AACA;AACA;AADA;AAGA;AACA;AAhCA;AAkCA;AACA;AACA;AACA;AArCA;AAwCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAiDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAsEA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AA+EA;AACA;AACA;AACA;AACA;AACA;AAnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEA;AACA;AAsFA;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AAzBA;AA4BA;AACA;AACA;AA9BA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AASA;AAEA;AACA;AADA;AAGA;AACA;AAfA;AAkBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AApCA;AAsCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAgDA;AACA;AACA;AAlDA;AAoDA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AA1EA;AA6EA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAhGA;AAkGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAnHA;AAqHA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAxIA;AA2IA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAzKA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AA4KA;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AA7EA;AA+EA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AApHA;AAsHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxIA;AA0IA;AACA;AACA;AA3IA;AACA;AACA;AACA;AACA;AANA;AACA;AA8IA;;;;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3CA;AA6CA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA9DA;AAgEA;AACA;AACA;AACA;AACA;AApEA;AAsEA;AACA;AACA;AACA;AACA;AA1EA;AA4EA;AACA;AACA;AACA;AACA;AAhFA;AAkFA;AACA;AACA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AApGA;AAsGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3HA;AA6HA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAnIA;AAqIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7IA;AAqQA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1QA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAqnQA;AACA;AA4QA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAqBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AAuDA;AACA;AAEA;AACA;AACA;AA5DA;AAgGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1GA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AA4CA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AA5FA;AACA;AA6GA;;;;;;;;;;;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA1DA;AACA;AA2DA;;;;;;;;;;;ACvFA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA;;;;;;;;;;;ACxBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;ACpCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAqCA;AAGA;AACA;AAvCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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","sourceRoot":""}